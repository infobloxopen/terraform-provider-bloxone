// Code generated by go-swagger; DO NOT EDIT.

package b1ddi

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/infobloxopen/b1ddi-go-client/models"
)

// ConfigForwardersBlock ForwardersBlock
//
// Block for fields: _forwarders_, _forwarders_only_.
//
// swagger:model configForwardersBlock
func schemaConfigForwardersBlock() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{

			// Optional. Field config for _forwarders_ field from.
			"forwarders": {
				Type:        schema.TypeList,
				Elem:        schemaConfigForwarder(),
				Optional:    true,
				Description: "Optional. Field config for _forwarders_ field from.",
			},

			// Optional. Field config for _forwarders_only_ field.
			"forwarders_only": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Optional. Field config for _forwarders_only_ field.",
			},
		},
	}
}

func flattenConfigForwardersBlock(r *models.ConfigForwardersBlock) []interface{} {
	if r == nil {
		return []interface{}{}
	}

	forwarders := make([]interface{}, 0, len(r.Forwarders))
	for _, f := range r.Forwarders {
		forwarders = append(forwarders, flattenConfigForwarder(f))
	}

	return []interface{}{
		map[string]interface{}{
			"forwarders":      forwarders,
			"forwarders_only": r.ForwardersOnly,
		},
	}
}

func expandConfigForwardersBlock(d []interface{}) *models.ConfigForwardersBlock {
	if len(d) == 0 || d[0] == nil {
		return nil
	}
	in := d[0].(map[string]interface{})

	forwarders := make([]*models.ConfigForwarder, 0)
	for _, fwd := range in["forwarders"].([]interface{}) {
		if fwd != nil {
			forwarders = append(forwarders, expandConfigForwarder(fwd.(map[string]interface{})))
		}
	}

	return &models.ConfigForwardersBlock{
		Forwarders:     forwarders,
		ForwardersOnly: in["forwarders_only"].(bool),
	}
}
