// Code generated by go-swagger; DO NOT EDIT.

package b1ddi

import (
	"github.com/go-openapi/swag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/infobloxopen/b1ddi-go-client/models"
)

// IpamsvcUtilizationThreshold UtilizationThreshold
//
// A __UtilizationThreshold__ object represents IP address utilization threshold settings.
//
// swagger:model ipamsvcUtilizationThreshold
func schemaIpamsvcUtilizationThreshold() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{

			// Indicates whether the utilization threshold for IP addresses is enabled or not.
			// Required: true
			"enabled": {
				Type:        schema.TypeBool,
				Required:    true,
				Description: "Indicates whether the utilization threshold for IP addresses is enabled or not.",
			},

			// The high threshold value for the percentage of used IP addresses relative to the total IP addresses available in the scope of the object. Thresholds are inclusive in the comparison test.
			// Required: true
			// Maximum: 100
			"high": {
				Type:        schema.TypeInt,
				Required:    true,
				Description: "The high threshold value for the percentage of used IP addresses relative to the total IP addresses available in the scope of the object. Thresholds are inclusive in the comparison test.",
			},

			// The low threshold value for the percentage of used IP addresses relative to the total IP addresses available in the scope of the object. Thresholds are inclusive in the comparison test.
			// Required: true
			// Maximum: 100
			"low": {
				Type:        schema.TypeInt,
				Required:    true,
				Description: "The low threshold value for the percentage of used IP addresses relative to the total IP addresses available in the scope of the object. Thresholds are inclusive in the comparison test.",
			},
		},
	}
}

func flattenIpamsvcUtilizationThreshold(r *models.IpamsvcUtilizationThreshold) []interface{} {
	if r == nil {
		return []interface{}{}
	}

	return []interface{}{
		map[string]interface{}{
			"enabled": r.Enabled,
			"high":    r.High,
			"low":     r.Low,
		},
	}
}

func expandIpamsvcUtilizationThreshold(d []interface{}) *models.IpamsvcUtilizationThreshold {
	if len(d) == 0 || d[0] == nil {
		return nil
	}
	in := d[0].(map[string]interface{})
	return &models.IpamsvcUtilizationThreshold{
		Enabled: in["enabled"].(bool),
		High:    swag.Int64(int64(in["high"].(int))),
		Low:     swag.Int64(int64(in["low"].(int))),
	}
}
