// Code generated by go-swagger; DO NOT EDIT.

package b1ddi

import (
	"context"
	"github.com/go-openapi/strfmt"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/infobloxopen/b1ddi-go-client/models"
)

// IpamsvcAsmEnableBlock AsmEnableBlock
//
// ASM enable group of fields.
//
// swagger:model ipamsvcAsmEnableBlock
func schemaIpamsvcAsmEnableBlock() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{

			// Indicates whether Automated Scope Management is enabled or not.
			"enable": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Indicates whether Automated Scope Management is enabled or not.",
			},

			// Indicates whether sending notifications to the users is enabled or not.
			"enable_notification": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Indicates whether sending notifications to the users is enabled or not.",
			},

			// The date at which notifications will be re-enabled automatically.
			// Format: date-time
			"reenable_date": {
				Type:         schema.TypeString,
				Optional:     true,
				Description:  "The date at which notifications will be re-enabled automatically.",
				ValidateFunc: validation.IsRFC3339Time,
			},
		},
	}
}

func flattenIpamsvcAsmEnableBlock(r *models.IpamsvcAsmEnableBlock) []interface{} {
	if r == nil {
		return []interface{}{}
	}

	return []interface{}{
		map[string]interface{}{
			"enable":              r.Enable,
			"enable_notification": r.EnableNotification,
			"reenable_date":       r.ReenableDate.String(),
		},
	}
}

func expandIpamsvcAsmEnableBlock(ctx context.Context, d []interface{}) (*models.IpamsvcAsmEnableBlock, error) {
	if len(d) == 0 || d[0] == nil {
		return nil, nil
	}
	in := d[0].(map[string]interface{})

	reenableDate, err := strfmt.ParseDateTime(in["reenable_date"].(string))
	if err != nil {
		tflog.Error(ctx, "Failed to parse 'reenable_date' field")
		return nil, err
	}

	return &models.IpamsvcAsmEnableBlock{
		Enable:             in["enable"].(bool),
		EnableNotification: in["enable_notification"].(bool),
		ReenableDate:       reenableDate,
	}, nil
}
