/*
Host Activation Service

Host activation service provides a RESTful interface to manage cert and join token object. Join tokens are essentially a password that allows on-prem hosts to auto-associate themselves to a customer's account and receive a signed cert.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infra_provision

import (
	"encoding/json"
	"fmt"
)

// HostactivationCSRState the model 'HostactivationCSRState'
type HostactivationCSRState string

// List of hostactivationCSRState
const (
	HOSTACTIVATIONCSRSTATE_UNKNOWN  HostactivationCSRState = "UNKNOWN"
	HOSTACTIVATIONCSRSTATE_NEW      HostactivationCSRState = "NEW"
	HOSTACTIVATIONCSRSTATE_VERIFIED HostactivationCSRState = "VERIFIED"
	HOSTACTIVATIONCSRSTATE_DENIED   HostactivationCSRState = "DENIED"
	HOSTACTIVATIONCSRSTATE_TIMEOUT  HostactivationCSRState = "TIMEOUT"
	HOSTACTIVATIONCSRSTATE_RENEWED  HostactivationCSRState = "RENEWED"
)

// All allowed values of HostactivationCSRState enum
var AllowedHostactivationCSRStateEnumValues = []HostactivationCSRState{
	"UNKNOWN",
	"NEW",
	"VERIFIED",
	"DENIED",
	"TIMEOUT",
	"RENEWED",
}

func (v *HostactivationCSRState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HostactivationCSRState(value)
	for _, existing := range AllowedHostactivationCSRStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HostactivationCSRState", value)
}

// NewHostactivationCSRStateFromValue returns a pointer to a valid HostactivationCSRState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHostactivationCSRStateFromValue(v string) (*HostactivationCSRState, error) {
	ev := HostactivationCSRState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HostactivationCSRState: valid values are %v", v, AllowedHostactivationCSRStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HostactivationCSRState) IsValid() bool {
	for _, existing := range AllowedHostactivationCSRStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to hostactivationCSRState value
func (v HostactivationCSRState) Ptr() *HostactivationCSRState {
	return &v
}

type NullableHostactivationCSRState struct {
	value *HostactivationCSRState
	isSet bool
}

func (v NullableHostactivationCSRState) Get() *HostactivationCSRState {
	return v.value
}

func (v *NullableHostactivationCSRState) Set(val *HostactivationCSRState) {
	v.value = val
	v.isSet = true
}

func (v NullableHostactivationCSRState) IsSet() bool {
	return v.isSet
}

func (v *NullableHostactivationCSRState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostactivationCSRState(val *HostactivationCSRState) *NullableHostactivationCSRState {
	return &NullableHostactivationCSRState{value: val, isSet: true}
}

func (v NullableHostactivationCSRState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostactivationCSRState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
