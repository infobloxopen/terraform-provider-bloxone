/*
Host Activation Service

Host activation service provides a RESTful interface to manage cert and join token object. Join tokens are essentially a password that allows on-prem hosts to auto-associate themselves to a customer's account and receive a signed cert.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infra_provision

import (
	"encoding/json"
	"fmt"
)

// JoinTokenJoinTokenStatus the model 'JoinTokenJoinTokenStatus'
type JoinTokenJoinTokenStatus string

// List of JoinTokenJoinTokenStatus
const (
	JOINTOKENJOINTOKENSTATUS_UNKNOWN JoinTokenJoinTokenStatus = "UNKNOWN"
	JOINTOKENJOINTOKENSTATUS_ACTIVE  JoinTokenJoinTokenStatus = "ACTIVE"
	JOINTOKENJOINTOKENSTATUS_EXPIRED JoinTokenJoinTokenStatus = "EXPIRED"
	JOINTOKENJOINTOKENSTATUS_REVOKED JoinTokenJoinTokenStatus = "REVOKED"
)

// All allowed values of JoinTokenJoinTokenStatus enum
var AllowedJoinTokenJoinTokenStatusEnumValues = []JoinTokenJoinTokenStatus{
	"UNKNOWN",
	"ACTIVE",
	"EXPIRED",
	"REVOKED",
}

func (v *JoinTokenJoinTokenStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JoinTokenJoinTokenStatus(value)
	for _, existing := range AllowedJoinTokenJoinTokenStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JoinTokenJoinTokenStatus", value)
}

// NewJoinTokenJoinTokenStatusFromValue returns a pointer to a valid JoinTokenJoinTokenStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJoinTokenJoinTokenStatusFromValue(v string) (*JoinTokenJoinTokenStatus, error) {
	ev := JoinTokenJoinTokenStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JoinTokenJoinTokenStatus: valid values are %v", v, AllowedJoinTokenJoinTokenStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JoinTokenJoinTokenStatus) IsValid() bool {
	for _, existing := range AllowedJoinTokenJoinTokenStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JoinTokenJoinTokenStatus value
func (v JoinTokenJoinTokenStatus) Ptr() *JoinTokenJoinTokenStatus {
	return &v
}

type NullableJoinTokenJoinTokenStatus struct {
	value *JoinTokenJoinTokenStatus
	isSet bool
}

func (v NullableJoinTokenJoinTokenStatus) Get() *JoinTokenJoinTokenStatus {
	return v.value
}

func (v *NullableJoinTokenJoinTokenStatus) Set(val *JoinTokenJoinTokenStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableJoinTokenJoinTokenStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableJoinTokenJoinTokenStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJoinTokenJoinTokenStatus(val *JoinTokenJoinTokenStatus) *NullableJoinTokenJoinTokenStatus {
	return &NullableJoinTokenJoinTokenStatus{value: val, isSet: true}
}

func (v NullableJoinTokenJoinTokenStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJoinTokenJoinTokenStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
