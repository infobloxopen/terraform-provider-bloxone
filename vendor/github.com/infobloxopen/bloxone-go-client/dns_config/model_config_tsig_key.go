/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_config

import (
	"encoding/json"
)

// checks if the ConfigTSIGKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigTSIGKey{}

// ConfigTSIGKey Object representing TSIG key synced from Keys Service.
type ConfigTSIGKey struct {
	// TSIG key algorithm.  Possible values:  * _hmac_sha256_,  * _hmac_sha1_,  * _hmac_sha224_,  * _hmac_sha384_,  * _hmac_sha512_.
	Algorithm *string `json:"algorithm,omitempty"`
	// Comment for TSIG key.
	Comment *string `json:"comment,omitempty"`
	// The resource identifier.
	Key *string `json:"key,omitempty"`
	// TSIG key name, FQDN.
	Name *string `json:"name,omitempty"`
	// TSIG key name in punycode.
	ProtocolName *string `json:"protocol_name,omitempty"`
	// TSIG key secret, base64 string.
	Secret *string `json:"secret,omitempty"`
}

// NewConfigTSIGKey instantiates a new ConfigTSIGKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigTSIGKey() *ConfigTSIGKey {
	this := ConfigTSIGKey{}
	return &this
}

// NewConfigTSIGKeyWithDefaults instantiates a new ConfigTSIGKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigTSIGKeyWithDefaults() *ConfigTSIGKey {
	this := ConfigTSIGKey{}
	return &this
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *ConfigTSIGKey) GetAlgorithm() string {
	if o == nil || IsNil(o.Algorithm) {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTSIGKey) GetAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.Algorithm) {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *ConfigTSIGKey) HasAlgorithm() bool {
	if o != nil && !IsNil(o.Algorithm) {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *ConfigTSIGKey) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ConfigTSIGKey) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTSIGKey) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ConfigTSIGKey) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ConfigTSIGKey) SetComment(v string) {
	o.Comment = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ConfigTSIGKey) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTSIGKey) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ConfigTSIGKey) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ConfigTSIGKey) SetKey(v string) {
	o.Key = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConfigTSIGKey) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTSIGKey) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConfigTSIGKey) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConfigTSIGKey) SetName(v string) {
	o.Name = &v
}

// GetProtocolName returns the ProtocolName field value if set, zero value otherwise.
func (o *ConfigTSIGKey) GetProtocolName() string {
	if o == nil || IsNil(o.ProtocolName) {
		var ret string
		return ret
	}
	return *o.ProtocolName
}

// GetProtocolNameOk returns a tuple with the ProtocolName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTSIGKey) GetProtocolNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProtocolName) {
		return nil, false
	}
	return o.ProtocolName, true
}

// HasProtocolName returns a boolean if a field has been set.
func (o *ConfigTSIGKey) HasProtocolName() bool {
	if o != nil && !IsNil(o.ProtocolName) {
		return true
	}

	return false
}

// SetProtocolName gets a reference to the given string and assigns it to the ProtocolName field.
func (o *ConfigTSIGKey) SetProtocolName(v string) {
	o.ProtocolName = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *ConfigTSIGKey) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTSIGKey) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *ConfigTSIGKey) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *ConfigTSIGKey) SetSecret(v string) {
	o.Secret = &v
}

func (o ConfigTSIGKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigTSIGKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Algorithm) {
		toSerialize["algorithm"] = o.Algorithm
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ProtocolName) {
		toSerialize["protocol_name"] = o.ProtocolName
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	return toSerialize, nil
}

type NullableConfigTSIGKey struct {
	value *ConfigTSIGKey
	isSet bool
}

func (v NullableConfigTSIGKey) Get() *ConfigTSIGKey {
	return v.value
}

func (v *NullableConfigTSIGKey) Set(val *ConfigTSIGKey) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigTSIGKey) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigTSIGKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigTSIGKey(val *ConfigTSIGKey) *NullableConfigTSIGKey {
	return &NullableConfigTSIGKey{value: val, isSet: true}
}

func (v NullableConfigTSIGKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigTSIGKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
