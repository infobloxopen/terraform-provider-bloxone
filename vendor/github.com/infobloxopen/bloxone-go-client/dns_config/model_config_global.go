/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_config

import (
	"encoding/json"
)

// checks if the ConfigGlobal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigGlobal{}

// ConfigGlobal A Global configuration (_dns/global_). Used by default unless more specific configuration exists. There is only one instance of this object.
type ConfigGlobal struct {
	// _add_edns_option_in_outgoing_query_ adds client IP, MAC address and view name into outgoing recursive query. Defaults to _false_.
	AddEdnsOptionInOutgoingQuery *bool `json:"add_edns_option_in_outgoing_query,omitempty"`
	// Optional. List of custom root nameservers. The order does not matter.  Error if empty while _custom_root_ns_enabled_ is _true_. Error if there are duplicate items in the list.  Defaults to empty.
	CustomRootNs []ConfigRootNS `json:"custom_root_ns,omitempty"`
	// Optional. _true_ to use custom root nameservers instead of the default ones.  The _custom_root_ns_ field is validated when enabled.  Defaults to false.
	CustomRootNsEnabled *bool `json:"custom_root_ns_enabled,omitempty"`
	// Optional. _true_ to perform DNSSEC validation. Ignored if _dnssec_enabled_ is _false_.  Defaults to _true_.
	DnssecEnableValidation *bool `json:"dnssec_enable_validation,omitempty"`
	// Optional. Master toggle for all DNSSEC processing. Other _dnssec_*_ configuration is unused if this is disabled.  Defaults to _true_.
	DnssecEnabled *bool `json:"dnssec_enabled,omitempty"`
	// DNSSEC root keys. The root keys are not configurable.  A default list is provided by cloud management and included here for config generation.
	DnssecRootKeys []ConfigTrustAnchor `json:"dnssec_root_keys,omitempty"`
	// Optional. DNSSEC trust anchors.  Error if there are list items with duplicate (_zone_, _sep_, _algorithm_) combinations.  Defaults to empty.
	DnssecTrustAnchors []ConfigTrustAnchor `json:"dnssec_trust_anchors,omitempty"`
	// Optional. _true_ to reject expired DNSSEC keys. Ignored if either _dnssec_enabled_ or _dnssec_enable_validation_ is _false_.  Defaults to _true_.
	DnssecValidateExpiry *bool            `json:"dnssec_validate_expiry,omitempty"`
	DtcConfig            *ConfigDTCConfig `json:"dtc_config,omitempty"`
	// Optional. _true_ to enable EDNS client subnet for recursive queries. Other _ecs_*_ fields are ignored if this field is not enabled.  Defaults to _false_.
	EcsEnabled *bool `json:"ecs_enabled,omitempty"`
	// Optional. _true_ to enable ECS options in outbound queries. This functionality has additional overhead so it is disabled by default.  Defaults to _false_.
	EcsForwarding *bool `json:"ecs_forwarding,omitempty"`
	// Optional. Maximum scope length for v4 ECS.  Unsigned integer, min 1 max 24.  Defaults to 24.
	EcsPrefixV4 *int64 `json:"ecs_prefix_v4,omitempty"`
	// Optional. Maximum scope length for v6 ECS.  Unsigned integer, min 1 max 56.  Defaults to 56.
	EcsPrefixV6 *int64 `json:"ecs_prefix_v6,omitempty"`
	// Optional. List of zones where ECS queries may be sent.  Error if empty while _ecs_enabled_ is true. Error if there are duplicate FQDNs in the list.  Defaults to empty.
	EcsZones []ConfigECSZone `json:"ecs_zones,omitempty"`
	// Optional. _edns_udp_size_ represents the edns UDP size. The size a querying DNS server advertises to the DNS server itâ€™s sending a query to.  Defaults to 1232 bytes.
	EdnsUdpSize *int64 `json:"edns_udp_size,omitempty"`
	// Optional. Specifies a list of client addresses for which AAAA filtering is to be applied.  Defaults to _empty_.
	FilterAaaaAcl []ConfigACLItem `json:"filter_aaaa_acl,omitempty"`
	// _filter_aaaa_on_v4_ allows named to omit some IPv6 addresses when responding to IPv4 clients.  Allowed values: * _yes_, * _no_, * _break_dnssec_.  Defaults to _no_
	FilterAaaaOnV4 *string `json:"filter_aaaa_on_v4,omitempty"`
	// Optional. List of forwarders.  Error if empty while _forwarders_only_ or _use_root_forwarders_for_local_resolution_with_b1td_ is _true_. Error if there are items in the list with duplicate addresses.  Defaults to empty.
	Forwarders []ConfigForwarder `json:"forwarders,omitempty"`
	// Optional. _true_ to only forward.  Defaults to _false_.
	ForwardersOnly *bool `json:"forwarders_only,omitempty"`
	// _gss_tsig_enabled_ enables/disables GSS-TSIG signed dynamic updates.  Defaults to _false_.
	GssTsigEnabled *bool `json:"gss_tsig_enabled,omitempty"`
	// The resource identifier.
	Id string `json:"id"`
	// _kerberos_keys_ contains a list of keys for GSS-TSIG signed dynamic updates.  Defaults to empty.
	KerberosKeys []ConfigKerberosKey `json:"kerberos_keys,omitempty"`
	// Optional. Unused in the current on-prem DNS server implementation.  Unsigned integer, min 0 max 3600 (1h).  Defaults to 600.
	LameTtl *int64 `json:"lame_ttl,omitempty"`
	// Optional. Control DNS query/response logging functionality.  Defaults to _true_.
	LogQueryResponse *bool `json:"log_query_response,omitempty"`
	// Optional. If _true_ only recursive queries from matching clients access the view.  Defaults to _false_.
	MatchRecursiveOnly *bool `json:"match_recursive_only,omitempty"`
	// Optional. Seconds to cache positive responses.  Unsigned integer, min 1 max 604800 (7d).  Defaults to 604800 (7d).
	MaxCacheTtl *int64 `json:"max_cache_ttl,omitempty"`
	// Optional. Seconds to cache negative responses.  Unsigned integer, min 1 max 604800 (7d).  Defaults to 10800 (3h).
	MaxNegativeTtl *int64 `json:"max_negative_ttl,omitempty"`
	// Optional. _max_udp_size_ represents maximum UDP payload size. The maximum number of bytes a responding DNS server will send to a UDP datagram.  Defaults to 1232 bytes.
	MaxUdpSize *int64 `json:"max_udp_size,omitempty"`
	// Optional. When enabled, the DNS server will only add records to the authority and additional data sections when they are required.  Defaults to _false_.
	MinimalResponses *bool `json:"minimal_responses,omitempty"`
	// _notify_ all external secondary DNS servers.  Defaults to _false_.
	Notify *bool `json:"notify,omitempty"`
	// Optional. Clients must match this ACL to make authoritative queries. Also used for recursive queries if that ACL is unset.  Defaults to empty.
	QueryAcl []ConfigACLItem `json:"query_acl,omitempty"`
	// Optional. Source port for outbound DNS queries. When set to 0 the port is unspecified and the implementation may randomize it using any available ports.  Defaults to 0.
	QueryPort *int64 `json:"query_port,omitempty"`
	// Optional. Clients must match this ACL to make recursive queries. If this ACL is empty, then the _query_acl_ field will be used instead.  Defaults to empty.
	RecursionAcl []ConfigACLItem `json:"recursion_acl,omitempty"`
	// Optional. _true_ to allow recursive DNS queries.  Defaults to _true_.
	RecursionEnabled *bool `json:"recursion_enabled,omitempty"`
	// Optional. Defines the number of simultaneous recursive lookups the server will perform on behalf of its clients.  Defaults to 1000.
	RecursiveClients *int64 `json:"recursive_clients,omitempty"`
	// Optional. Seconds before a recursive query times out.  Unsigned integer, min 10 max 30.  Defaults to 10.
	ResolverQueryTimeout *int64 `json:"resolver_query_timeout,omitempty"`
	// Optional. Maximum concurrent inbound AXFRs. When set to 0 a host-dependent default will be used.  Defaults to 0.
	SecondaryAxfrQueryLimit *int64 `json:"secondary_axfr_query_limit,omitempty"`
	// Optional. Maximum concurrent outbound SOA queries. When set to 0 a host-dependent default will be used.  Defaults to 0.
	SecondarySoaQueryLimit *int64 `json:"secondary_soa_query_limit,omitempty"`
	// Optional. Specifies a sorted network list for A/AAAA records in DNS query response.  Defaults to _empty_.
	SortList []ConfigSortListItem `json:"sort_list,omitempty"`
	// _synthesize_address_records_from_https_ enables/disables creation of A/AAAA records from HTTPS RR Defaults to _false_.
	SynthesizeAddressRecordsFromHttps *bool `json:"synthesize_address_records_from_https,omitempty"`
	// Optional. Clients must match this ACL to receive zone transfers.  Defaults to \"deny any\".
	TransferAcl []ConfigACLItem `json:"transfer_acl,omitempty"`
	// Optional. Specifies which hosts are allowed to issue Dynamic DNS updates for authoritative zones of _primary_type_ _cloud_.  Defaults to empty.
	UpdateAcl []ConfigACLItem `json:"update_acl,omitempty"`
	// Optional. Use default forwarders to resolve queries for subzones.  Defaults to _true_.
	UseForwardersForSubzones *bool `json:"use_forwarders_for_subzones,omitempty"`
	// _use_root_forwarders_for_local_resolution_with_b1td_ allows DNS recursive queries sent to root forwarders for local resolution when deployed alongside BloxOne Thread Defense. Defaults to _false_.
	UseRootForwardersForLocalResolutionWithB1td *bool                `json:"use_root_forwarders_for_local_resolution_with_b1td,omitempty"`
	ZoneAuthority                               *ConfigZoneAuthority `json:"zone_authority,omitempty"`
}

// NewConfigGlobal instantiates a new ConfigGlobal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigGlobal(id string) *ConfigGlobal {
	this := ConfigGlobal{}
	this.Id = id
	return &this
}

// NewConfigGlobalWithDefaults instantiates a new ConfigGlobal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigGlobalWithDefaults() *ConfigGlobal {
	this := ConfigGlobal{}
	return &this
}

// GetAddEdnsOptionInOutgoingQuery returns the AddEdnsOptionInOutgoingQuery field value if set, zero value otherwise.
func (o *ConfigGlobal) GetAddEdnsOptionInOutgoingQuery() bool {
	if o == nil || IsNil(o.AddEdnsOptionInOutgoingQuery) {
		var ret bool
		return ret
	}
	return *o.AddEdnsOptionInOutgoingQuery
}

// GetAddEdnsOptionInOutgoingQueryOk returns a tuple with the AddEdnsOptionInOutgoingQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetAddEdnsOptionInOutgoingQueryOk() (*bool, bool) {
	if o == nil || IsNil(o.AddEdnsOptionInOutgoingQuery) {
		return nil, false
	}
	return o.AddEdnsOptionInOutgoingQuery, true
}

// HasAddEdnsOptionInOutgoingQuery returns a boolean if a field has been set.
func (o *ConfigGlobal) HasAddEdnsOptionInOutgoingQuery() bool {
	if o != nil && !IsNil(o.AddEdnsOptionInOutgoingQuery) {
		return true
	}

	return false
}

// SetAddEdnsOptionInOutgoingQuery gets a reference to the given bool and assigns it to the AddEdnsOptionInOutgoingQuery field.
func (o *ConfigGlobal) SetAddEdnsOptionInOutgoingQuery(v bool) {
	o.AddEdnsOptionInOutgoingQuery = &v
}

// GetCustomRootNs returns the CustomRootNs field value if set, zero value otherwise.
func (o *ConfigGlobal) GetCustomRootNs() []ConfigRootNS {
	if o == nil || IsNil(o.CustomRootNs) {
		var ret []ConfigRootNS
		return ret
	}
	return o.CustomRootNs
}

// GetCustomRootNsOk returns a tuple with the CustomRootNs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetCustomRootNsOk() ([]ConfigRootNS, bool) {
	if o == nil || IsNil(o.CustomRootNs) {
		return nil, false
	}
	return o.CustomRootNs, true
}

// HasCustomRootNs returns a boolean if a field has been set.
func (o *ConfigGlobal) HasCustomRootNs() bool {
	if o != nil && !IsNil(o.CustomRootNs) {
		return true
	}

	return false
}

// SetCustomRootNs gets a reference to the given []ConfigRootNS and assigns it to the CustomRootNs field.
func (o *ConfigGlobal) SetCustomRootNs(v []ConfigRootNS) {
	o.CustomRootNs = v
}

// GetCustomRootNsEnabled returns the CustomRootNsEnabled field value if set, zero value otherwise.
func (o *ConfigGlobal) GetCustomRootNsEnabled() bool {
	if o == nil || IsNil(o.CustomRootNsEnabled) {
		var ret bool
		return ret
	}
	return *o.CustomRootNsEnabled
}

// GetCustomRootNsEnabledOk returns a tuple with the CustomRootNsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetCustomRootNsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CustomRootNsEnabled) {
		return nil, false
	}
	return o.CustomRootNsEnabled, true
}

// HasCustomRootNsEnabled returns a boolean if a field has been set.
func (o *ConfigGlobal) HasCustomRootNsEnabled() bool {
	if o != nil && !IsNil(o.CustomRootNsEnabled) {
		return true
	}

	return false
}

// SetCustomRootNsEnabled gets a reference to the given bool and assigns it to the CustomRootNsEnabled field.
func (o *ConfigGlobal) SetCustomRootNsEnabled(v bool) {
	o.CustomRootNsEnabled = &v
}

// GetDnssecEnableValidation returns the DnssecEnableValidation field value if set, zero value otherwise.
func (o *ConfigGlobal) GetDnssecEnableValidation() bool {
	if o == nil || IsNil(o.DnssecEnableValidation) {
		var ret bool
		return ret
	}
	return *o.DnssecEnableValidation
}

// GetDnssecEnableValidationOk returns a tuple with the DnssecEnableValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetDnssecEnableValidationOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecEnableValidation) {
		return nil, false
	}
	return o.DnssecEnableValidation, true
}

// HasDnssecEnableValidation returns a boolean if a field has been set.
func (o *ConfigGlobal) HasDnssecEnableValidation() bool {
	if o != nil && !IsNil(o.DnssecEnableValidation) {
		return true
	}

	return false
}

// SetDnssecEnableValidation gets a reference to the given bool and assigns it to the DnssecEnableValidation field.
func (o *ConfigGlobal) SetDnssecEnableValidation(v bool) {
	o.DnssecEnableValidation = &v
}

// GetDnssecEnabled returns the DnssecEnabled field value if set, zero value otherwise.
func (o *ConfigGlobal) GetDnssecEnabled() bool {
	if o == nil || IsNil(o.DnssecEnabled) {
		var ret bool
		return ret
	}
	return *o.DnssecEnabled
}

// GetDnssecEnabledOk returns a tuple with the DnssecEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetDnssecEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecEnabled) {
		return nil, false
	}
	return o.DnssecEnabled, true
}

// HasDnssecEnabled returns a boolean if a field has been set.
func (o *ConfigGlobal) HasDnssecEnabled() bool {
	if o != nil && !IsNil(o.DnssecEnabled) {
		return true
	}

	return false
}

// SetDnssecEnabled gets a reference to the given bool and assigns it to the DnssecEnabled field.
func (o *ConfigGlobal) SetDnssecEnabled(v bool) {
	o.DnssecEnabled = &v
}

// GetDnssecRootKeys returns the DnssecRootKeys field value if set, zero value otherwise.
func (o *ConfigGlobal) GetDnssecRootKeys() []ConfigTrustAnchor {
	if o == nil || IsNil(o.DnssecRootKeys) {
		var ret []ConfigTrustAnchor
		return ret
	}
	return o.DnssecRootKeys
}

// GetDnssecRootKeysOk returns a tuple with the DnssecRootKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetDnssecRootKeysOk() ([]ConfigTrustAnchor, bool) {
	if o == nil || IsNil(o.DnssecRootKeys) {
		return nil, false
	}
	return o.DnssecRootKeys, true
}

// HasDnssecRootKeys returns a boolean if a field has been set.
func (o *ConfigGlobal) HasDnssecRootKeys() bool {
	if o != nil && !IsNil(o.DnssecRootKeys) {
		return true
	}

	return false
}

// SetDnssecRootKeys gets a reference to the given []ConfigTrustAnchor and assigns it to the DnssecRootKeys field.
func (o *ConfigGlobal) SetDnssecRootKeys(v []ConfigTrustAnchor) {
	o.DnssecRootKeys = v
}

// GetDnssecTrustAnchors returns the DnssecTrustAnchors field value if set, zero value otherwise.
func (o *ConfigGlobal) GetDnssecTrustAnchors() []ConfigTrustAnchor {
	if o == nil || IsNil(o.DnssecTrustAnchors) {
		var ret []ConfigTrustAnchor
		return ret
	}
	return o.DnssecTrustAnchors
}

// GetDnssecTrustAnchorsOk returns a tuple with the DnssecTrustAnchors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetDnssecTrustAnchorsOk() ([]ConfigTrustAnchor, bool) {
	if o == nil || IsNil(o.DnssecTrustAnchors) {
		return nil, false
	}
	return o.DnssecTrustAnchors, true
}

// HasDnssecTrustAnchors returns a boolean if a field has been set.
func (o *ConfigGlobal) HasDnssecTrustAnchors() bool {
	if o != nil && !IsNil(o.DnssecTrustAnchors) {
		return true
	}

	return false
}

// SetDnssecTrustAnchors gets a reference to the given []ConfigTrustAnchor and assigns it to the DnssecTrustAnchors field.
func (o *ConfigGlobal) SetDnssecTrustAnchors(v []ConfigTrustAnchor) {
	o.DnssecTrustAnchors = v
}

// GetDnssecValidateExpiry returns the DnssecValidateExpiry field value if set, zero value otherwise.
func (o *ConfigGlobal) GetDnssecValidateExpiry() bool {
	if o == nil || IsNil(o.DnssecValidateExpiry) {
		var ret bool
		return ret
	}
	return *o.DnssecValidateExpiry
}

// GetDnssecValidateExpiryOk returns a tuple with the DnssecValidateExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetDnssecValidateExpiryOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecValidateExpiry) {
		return nil, false
	}
	return o.DnssecValidateExpiry, true
}

// HasDnssecValidateExpiry returns a boolean if a field has been set.
func (o *ConfigGlobal) HasDnssecValidateExpiry() bool {
	if o != nil && !IsNil(o.DnssecValidateExpiry) {
		return true
	}

	return false
}

// SetDnssecValidateExpiry gets a reference to the given bool and assigns it to the DnssecValidateExpiry field.
func (o *ConfigGlobal) SetDnssecValidateExpiry(v bool) {
	o.DnssecValidateExpiry = &v
}

// GetDtcConfig returns the DtcConfig field value if set, zero value otherwise.
func (o *ConfigGlobal) GetDtcConfig() ConfigDTCConfig {
	if o == nil || IsNil(o.DtcConfig) {
		var ret ConfigDTCConfig
		return ret
	}
	return *o.DtcConfig
}

// GetDtcConfigOk returns a tuple with the DtcConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetDtcConfigOk() (*ConfigDTCConfig, bool) {
	if o == nil || IsNil(o.DtcConfig) {
		return nil, false
	}
	return o.DtcConfig, true
}

// HasDtcConfig returns a boolean if a field has been set.
func (o *ConfigGlobal) HasDtcConfig() bool {
	if o != nil && !IsNil(o.DtcConfig) {
		return true
	}

	return false
}

// SetDtcConfig gets a reference to the given ConfigDTCConfig and assigns it to the DtcConfig field.
func (o *ConfigGlobal) SetDtcConfig(v ConfigDTCConfig) {
	o.DtcConfig = &v
}

// GetEcsEnabled returns the EcsEnabled field value if set, zero value otherwise.
func (o *ConfigGlobal) GetEcsEnabled() bool {
	if o == nil || IsNil(o.EcsEnabled) {
		var ret bool
		return ret
	}
	return *o.EcsEnabled
}

// GetEcsEnabledOk returns a tuple with the EcsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetEcsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EcsEnabled) {
		return nil, false
	}
	return o.EcsEnabled, true
}

// HasEcsEnabled returns a boolean if a field has been set.
func (o *ConfigGlobal) HasEcsEnabled() bool {
	if o != nil && !IsNil(o.EcsEnabled) {
		return true
	}

	return false
}

// SetEcsEnabled gets a reference to the given bool and assigns it to the EcsEnabled field.
func (o *ConfigGlobal) SetEcsEnabled(v bool) {
	o.EcsEnabled = &v
}

// GetEcsForwarding returns the EcsForwarding field value if set, zero value otherwise.
func (o *ConfigGlobal) GetEcsForwarding() bool {
	if o == nil || IsNil(o.EcsForwarding) {
		var ret bool
		return ret
	}
	return *o.EcsForwarding
}

// GetEcsForwardingOk returns a tuple with the EcsForwarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetEcsForwardingOk() (*bool, bool) {
	if o == nil || IsNil(o.EcsForwarding) {
		return nil, false
	}
	return o.EcsForwarding, true
}

// HasEcsForwarding returns a boolean if a field has been set.
func (o *ConfigGlobal) HasEcsForwarding() bool {
	if o != nil && !IsNil(o.EcsForwarding) {
		return true
	}

	return false
}

// SetEcsForwarding gets a reference to the given bool and assigns it to the EcsForwarding field.
func (o *ConfigGlobal) SetEcsForwarding(v bool) {
	o.EcsForwarding = &v
}

// GetEcsPrefixV4 returns the EcsPrefixV4 field value if set, zero value otherwise.
func (o *ConfigGlobal) GetEcsPrefixV4() int64 {
	if o == nil || IsNil(o.EcsPrefixV4) {
		var ret int64
		return ret
	}
	return *o.EcsPrefixV4
}

// GetEcsPrefixV4Ok returns a tuple with the EcsPrefixV4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetEcsPrefixV4Ok() (*int64, bool) {
	if o == nil || IsNil(o.EcsPrefixV4) {
		return nil, false
	}
	return o.EcsPrefixV4, true
}

// HasEcsPrefixV4 returns a boolean if a field has been set.
func (o *ConfigGlobal) HasEcsPrefixV4() bool {
	if o != nil && !IsNil(o.EcsPrefixV4) {
		return true
	}

	return false
}

// SetEcsPrefixV4 gets a reference to the given int64 and assigns it to the EcsPrefixV4 field.
func (o *ConfigGlobal) SetEcsPrefixV4(v int64) {
	o.EcsPrefixV4 = &v
}

// GetEcsPrefixV6 returns the EcsPrefixV6 field value if set, zero value otherwise.
func (o *ConfigGlobal) GetEcsPrefixV6() int64 {
	if o == nil || IsNil(o.EcsPrefixV6) {
		var ret int64
		return ret
	}
	return *o.EcsPrefixV6
}

// GetEcsPrefixV6Ok returns a tuple with the EcsPrefixV6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetEcsPrefixV6Ok() (*int64, bool) {
	if o == nil || IsNil(o.EcsPrefixV6) {
		return nil, false
	}
	return o.EcsPrefixV6, true
}

// HasEcsPrefixV6 returns a boolean if a field has been set.
func (o *ConfigGlobal) HasEcsPrefixV6() bool {
	if o != nil && !IsNil(o.EcsPrefixV6) {
		return true
	}

	return false
}

// SetEcsPrefixV6 gets a reference to the given int64 and assigns it to the EcsPrefixV6 field.
func (o *ConfigGlobal) SetEcsPrefixV6(v int64) {
	o.EcsPrefixV6 = &v
}

// GetEcsZones returns the EcsZones field value if set, zero value otherwise.
func (o *ConfigGlobal) GetEcsZones() []ConfigECSZone {
	if o == nil || IsNil(o.EcsZones) {
		var ret []ConfigECSZone
		return ret
	}
	return o.EcsZones
}

// GetEcsZonesOk returns a tuple with the EcsZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetEcsZonesOk() ([]ConfigECSZone, bool) {
	if o == nil || IsNil(o.EcsZones) {
		return nil, false
	}
	return o.EcsZones, true
}

// HasEcsZones returns a boolean if a field has been set.
func (o *ConfigGlobal) HasEcsZones() bool {
	if o != nil && !IsNil(o.EcsZones) {
		return true
	}

	return false
}

// SetEcsZones gets a reference to the given []ConfigECSZone and assigns it to the EcsZones field.
func (o *ConfigGlobal) SetEcsZones(v []ConfigECSZone) {
	o.EcsZones = v
}

// GetEdnsUdpSize returns the EdnsUdpSize field value if set, zero value otherwise.
func (o *ConfigGlobal) GetEdnsUdpSize() int64 {
	if o == nil || IsNil(o.EdnsUdpSize) {
		var ret int64
		return ret
	}
	return *o.EdnsUdpSize
}

// GetEdnsUdpSizeOk returns a tuple with the EdnsUdpSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetEdnsUdpSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.EdnsUdpSize) {
		return nil, false
	}
	return o.EdnsUdpSize, true
}

// HasEdnsUdpSize returns a boolean if a field has been set.
func (o *ConfigGlobal) HasEdnsUdpSize() bool {
	if o != nil && !IsNil(o.EdnsUdpSize) {
		return true
	}

	return false
}

// SetEdnsUdpSize gets a reference to the given int64 and assigns it to the EdnsUdpSize field.
func (o *ConfigGlobal) SetEdnsUdpSize(v int64) {
	o.EdnsUdpSize = &v
}

// GetFilterAaaaAcl returns the FilterAaaaAcl field value if set, zero value otherwise.
func (o *ConfigGlobal) GetFilterAaaaAcl() []ConfigACLItem {
	if o == nil || IsNil(o.FilterAaaaAcl) {
		var ret []ConfigACLItem
		return ret
	}
	return o.FilterAaaaAcl
}

// GetFilterAaaaAclOk returns a tuple with the FilterAaaaAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetFilterAaaaAclOk() ([]ConfigACLItem, bool) {
	if o == nil || IsNil(o.FilterAaaaAcl) {
		return nil, false
	}
	return o.FilterAaaaAcl, true
}

// HasFilterAaaaAcl returns a boolean if a field has been set.
func (o *ConfigGlobal) HasFilterAaaaAcl() bool {
	if o != nil && !IsNil(o.FilterAaaaAcl) {
		return true
	}

	return false
}

// SetFilterAaaaAcl gets a reference to the given []ConfigACLItem and assigns it to the FilterAaaaAcl field.
func (o *ConfigGlobal) SetFilterAaaaAcl(v []ConfigACLItem) {
	o.FilterAaaaAcl = v
}

// GetFilterAaaaOnV4 returns the FilterAaaaOnV4 field value if set, zero value otherwise.
func (o *ConfigGlobal) GetFilterAaaaOnV4() string {
	if o == nil || IsNil(o.FilterAaaaOnV4) {
		var ret string
		return ret
	}
	return *o.FilterAaaaOnV4
}

// GetFilterAaaaOnV4Ok returns a tuple with the FilterAaaaOnV4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetFilterAaaaOnV4Ok() (*string, bool) {
	if o == nil || IsNil(o.FilterAaaaOnV4) {
		return nil, false
	}
	return o.FilterAaaaOnV4, true
}

// HasFilterAaaaOnV4 returns a boolean if a field has been set.
func (o *ConfigGlobal) HasFilterAaaaOnV4() bool {
	if o != nil && !IsNil(o.FilterAaaaOnV4) {
		return true
	}

	return false
}

// SetFilterAaaaOnV4 gets a reference to the given string and assigns it to the FilterAaaaOnV4 field.
func (o *ConfigGlobal) SetFilterAaaaOnV4(v string) {
	o.FilterAaaaOnV4 = &v
}

// GetForwarders returns the Forwarders field value if set, zero value otherwise.
func (o *ConfigGlobal) GetForwarders() []ConfigForwarder {
	if o == nil || IsNil(o.Forwarders) {
		var ret []ConfigForwarder
		return ret
	}
	return o.Forwarders
}

// GetForwardersOk returns a tuple with the Forwarders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetForwardersOk() ([]ConfigForwarder, bool) {
	if o == nil || IsNil(o.Forwarders) {
		return nil, false
	}
	return o.Forwarders, true
}

// HasForwarders returns a boolean if a field has been set.
func (o *ConfigGlobal) HasForwarders() bool {
	if o != nil && !IsNil(o.Forwarders) {
		return true
	}

	return false
}

// SetForwarders gets a reference to the given []ConfigForwarder and assigns it to the Forwarders field.
func (o *ConfigGlobal) SetForwarders(v []ConfigForwarder) {
	o.Forwarders = v
}

// GetForwardersOnly returns the ForwardersOnly field value if set, zero value otherwise.
func (o *ConfigGlobal) GetForwardersOnly() bool {
	if o == nil || IsNil(o.ForwardersOnly) {
		var ret bool
		return ret
	}
	return *o.ForwardersOnly
}

// GetForwardersOnlyOk returns a tuple with the ForwardersOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetForwardersOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ForwardersOnly) {
		return nil, false
	}
	return o.ForwardersOnly, true
}

// HasForwardersOnly returns a boolean if a field has been set.
func (o *ConfigGlobal) HasForwardersOnly() bool {
	if o != nil && !IsNil(o.ForwardersOnly) {
		return true
	}

	return false
}

// SetForwardersOnly gets a reference to the given bool and assigns it to the ForwardersOnly field.
func (o *ConfigGlobal) SetForwardersOnly(v bool) {
	o.ForwardersOnly = &v
}

// GetGssTsigEnabled returns the GssTsigEnabled field value if set, zero value otherwise.
func (o *ConfigGlobal) GetGssTsigEnabled() bool {
	if o == nil || IsNil(o.GssTsigEnabled) {
		var ret bool
		return ret
	}
	return *o.GssTsigEnabled
}

// GetGssTsigEnabledOk returns a tuple with the GssTsigEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetGssTsigEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.GssTsigEnabled) {
		return nil, false
	}
	return o.GssTsigEnabled, true
}

// HasGssTsigEnabled returns a boolean if a field has been set.
func (o *ConfigGlobal) HasGssTsigEnabled() bool {
	if o != nil && !IsNil(o.GssTsigEnabled) {
		return true
	}

	return false
}

// SetGssTsigEnabled gets a reference to the given bool and assigns it to the GssTsigEnabled field.
func (o *ConfigGlobal) SetGssTsigEnabled(v bool) {
	o.GssTsigEnabled = &v
}

// GetId returns the Id field value
func (o *ConfigGlobal) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ConfigGlobal) SetId(v string) {
	o.Id = v
}

// GetKerberosKeys returns the KerberosKeys field value if set, zero value otherwise.
func (o *ConfigGlobal) GetKerberosKeys() []ConfigKerberosKey {
	if o == nil || IsNil(o.KerberosKeys) {
		var ret []ConfigKerberosKey
		return ret
	}
	return o.KerberosKeys
}

// GetKerberosKeysOk returns a tuple with the KerberosKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetKerberosKeysOk() ([]ConfigKerberosKey, bool) {
	if o == nil || IsNil(o.KerberosKeys) {
		return nil, false
	}
	return o.KerberosKeys, true
}

// HasKerberosKeys returns a boolean if a field has been set.
func (o *ConfigGlobal) HasKerberosKeys() bool {
	if o != nil && !IsNil(o.KerberosKeys) {
		return true
	}

	return false
}

// SetKerberosKeys gets a reference to the given []ConfigKerberosKey and assigns it to the KerberosKeys field.
func (o *ConfigGlobal) SetKerberosKeys(v []ConfigKerberosKey) {
	o.KerberosKeys = v
}

// GetLameTtl returns the LameTtl field value if set, zero value otherwise.
func (o *ConfigGlobal) GetLameTtl() int64 {
	if o == nil || IsNil(o.LameTtl) {
		var ret int64
		return ret
	}
	return *o.LameTtl
}

// GetLameTtlOk returns a tuple with the LameTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetLameTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.LameTtl) {
		return nil, false
	}
	return o.LameTtl, true
}

// HasLameTtl returns a boolean if a field has been set.
func (o *ConfigGlobal) HasLameTtl() bool {
	if o != nil && !IsNil(o.LameTtl) {
		return true
	}

	return false
}

// SetLameTtl gets a reference to the given int64 and assigns it to the LameTtl field.
func (o *ConfigGlobal) SetLameTtl(v int64) {
	o.LameTtl = &v
}

// GetLogQueryResponse returns the LogQueryResponse field value if set, zero value otherwise.
func (o *ConfigGlobal) GetLogQueryResponse() bool {
	if o == nil || IsNil(o.LogQueryResponse) {
		var ret bool
		return ret
	}
	return *o.LogQueryResponse
}

// GetLogQueryResponseOk returns a tuple with the LogQueryResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetLogQueryResponseOk() (*bool, bool) {
	if o == nil || IsNil(o.LogQueryResponse) {
		return nil, false
	}
	return o.LogQueryResponse, true
}

// HasLogQueryResponse returns a boolean if a field has been set.
func (o *ConfigGlobal) HasLogQueryResponse() bool {
	if o != nil && !IsNil(o.LogQueryResponse) {
		return true
	}

	return false
}

// SetLogQueryResponse gets a reference to the given bool and assigns it to the LogQueryResponse field.
func (o *ConfigGlobal) SetLogQueryResponse(v bool) {
	o.LogQueryResponse = &v
}

// GetMatchRecursiveOnly returns the MatchRecursiveOnly field value if set, zero value otherwise.
func (o *ConfigGlobal) GetMatchRecursiveOnly() bool {
	if o == nil || IsNil(o.MatchRecursiveOnly) {
		var ret bool
		return ret
	}
	return *o.MatchRecursiveOnly
}

// GetMatchRecursiveOnlyOk returns a tuple with the MatchRecursiveOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetMatchRecursiveOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.MatchRecursiveOnly) {
		return nil, false
	}
	return o.MatchRecursiveOnly, true
}

// HasMatchRecursiveOnly returns a boolean if a field has been set.
func (o *ConfigGlobal) HasMatchRecursiveOnly() bool {
	if o != nil && !IsNil(o.MatchRecursiveOnly) {
		return true
	}

	return false
}

// SetMatchRecursiveOnly gets a reference to the given bool and assigns it to the MatchRecursiveOnly field.
func (o *ConfigGlobal) SetMatchRecursiveOnly(v bool) {
	o.MatchRecursiveOnly = &v
}

// GetMaxCacheTtl returns the MaxCacheTtl field value if set, zero value otherwise.
func (o *ConfigGlobal) GetMaxCacheTtl() int64 {
	if o == nil || IsNil(o.MaxCacheTtl) {
		var ret int64
		return ret
	}
	return *o.MaxCacheTtl
}

// GetMaxCacheTtlOk returns a tuple with the MaxCacheTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetMaxCacheTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxCacheTtl) {
		return nil, false
	}
	return o.MaxCacheTtl, true
}

// HasMaxCacheTtl returns a boolean if a field has been set.
func (o *ConfigGlobal) HasMaxCacheTtl() bool {
	if o != nil && !IsNil(o.MaxCacheTtl) {
		return true
	}

	return false
}

// SetMaxCacheTtl gets a reference to the given int64 and assigns it to the MaxCacheTtl field.
func (o *ConfigGlobal) SetMaxCacheTtl(v int64) {
	o.MaxCacheTtl = &v
}

// GetMaxNegativeTtl returns the MaxNegativeTtl field value if set, zero value otherwise.
func (o *ConfigGlobal) GetMaxNegativeTtl() int64 {
	if o == nil || IsNil(o.MaxNegativeTtl) {
		var ret int64
		return ret
	}
	return *o.MaxNegativeTtl
}

// GetMaxNegativeTtlOk returns a tuple with the MaxNegativeTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetMaxNegativeTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxNegativeTtl) {
		return nil, false
	}
	return o.MaxNegativeTtl, true
}

// HasMaxNegativeTtl returns a boolean if a field has been set.
func (o *ConfigGlobal) HasMaxNegativeTtl() bool {
	if o != nil && !IsNil(o.MaxNegativeTtl) {
		return true
	}

	return false
}

// SetMaxNegativeTtl gets a reference to the given int64 and assigns it to the MaxNegativeTtl field.
func (o *ConfigGlobal) SetMaxNegativeTtl(v int64) {
	o.MaxNegativeTtl = &v
}

// GetMaxUdpSize returns the MaxUdpSize field value if set, zero value otherwise.
func (o *ConfigGlobal) GetMaxUdpSize() int64 {
	if o == nil || IsNil(o.MaxUdpSize) {
		var ret int64
		return ret
	}
	return *o.MaxUdpSize
}

// GetMaxUdpSizeOk returns a tuple with the MaxUdpSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetMaxUdpSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxUdpSize) {
		return nil, false
	}
	return o.MaxUdpSize, true
}

// HasMaxUdpSize returns a boolean if a field has been set.
func (o *ConfigGlobal) HasMaxUdpSize() bool {
	if o != nil && !IsNil(o.MaxUdpSize) {
		return true
	}

	return false
}

// SetMaxUdpSize gets a reference to the given int64 and assigns it to the MaxUdpSize field.
func (o *ConfigGlobal) SetMaxUdpSize(v int64) {
	o.MaxUdpSize = &v
}

// GetMinimalResponses returns the MinimalResponses field value if set, zero value otherwise.
func (o *ConfigGlobal) GetMinimalResponses() bool {
	if o == nil || IsNil(o.MinimalResponses) {
		var ret bool
		return ret
	}
	return *o.MinimalResponses
}

// GetMinimalResponsesOk returns a tuple with the MinimalResponses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetMinimalResponsesOk() (*bool, bool) {
	if o == nil || IsNil(o.MinimalResponses) {
		return nil, false
	}
	return o.MinimalResponses, true
}

// HasMinimalResponses returns a boolean if a field has been set.
func (o *ConfigGlobal) HasMinimalResponses() bool {
	if o != nil && !IsNil(o.MinimalResponses) {
		return true
	}

	return false
}

// SetMinimalResponses gets a reference to the given bool and assigns it to the MinimalResponses field.
func (o *ConfigGlobal) SetMinimalResponses(v bool) {
	o.MinimalResponses = &v
}

// GetNotify returns the Notify field value if set, zero value otherwise.
func (o *ConfigGlobal) GetNotify() bool {
	if o == nil || IsNil(o.Notify) {
		var ret bool
		return ret
	}
	return *o.Notify
}

// GetNotifyOk returns a tuple with the Notify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.Notify) {
		return nil, false
	}
	return o.Notify, true
}

// HasNotify returns a boolean if a field has been set.
func (o *ConfigGlobal) HasNotify() bool {
	if o != nil && !IsNil(o.Notify) {
		return true
	}

	return false
}

// SetNotify gets a reference to the given bool and assigns it to the Notify field.
func (o *ConfigGlobal) SetNotify(v bool) {
	o.Notify = &v
}

// GetQueryAcl returns the QueryAcl field value if set, zero value otherwise.
func (o *ConfigGlobal) GetQueryAcl() []ConfigACLItem {
	if o == nil || IsNil(o.QueryAcl) {
		var ret []ConfigACLItem
		return ret
	}
	return o.QueryAcl
}

// GetQueryAclOk returns a tuple with the QueryAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetQueryAclOk() ([]ConfigACLItem, bool) {
	if o == nil || IsNil(o.QueryAcl) {
		return nil, false
	}
	return o.QueryAcl, true
}

// HasQueryAcl returns a boolean if a field has been set.
func (o *ConfigGlobal) HasQueryAcl() bool {
	if o != nil && !IsNil(o.QueryAcl) {
		return true
	}

	return false
}

// SetQueryAcl gets a reference to the given []ConfigACLItem and assigns it to the QueryAcl field.
func (o *ConfigGlobal) SetQueryAcl(v []ConfigACLItem) {
	o.QueryAcl = v
}

// GetQueryPort returns the QueryPort field value if set, zero value otherwise.
func (o *ConfigGlobal) GetQueryPort() int64 {
	if o == nil || IsNil(o.QueryPort) {
		var ret int64
		return ret
	}
	return *o.QueryPort
}

// GetQueryPortOk returns a tuple with the QueryPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetQueryPortOk() (*int64, bool) {
	if o == nil || IsNil(o.QueryPort) {
		return nil, false
	}
	return o.QueryPort, true
}

// HasQueryPort returns a boolean if a field has been set.
func (o *ConfigGlobal) HasQueryPort() bool {
	if o != nil && !IsNil(o.QueryPort) {
		return true
	}

	return false
}

// SetQueryPort gets a reference to the given int64 and assigns it to the QueryPort field.
func (o *ConfigGlobal) SetQueryPort(v int64) {
	o.QueryPort = &v
}

// GetRecursionAcl returns the RecursionAcl field value if set, zero value otherwise.
func (o *ConfigGlobal) GetRecursionAcl() []ConfigACLItem {
	if o == nil || IsNil(o.RecursionAcl) {
		var ret []ConfigACLItem
		return ret
	}
	return o.RecursionAcl
}

// GetRecursionAclOk returns a tuple with the RecursionAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetRecursionAclOk() ([]ConfigACLItem, bool) {
	if o == nil || IsNil(o.RecursionAcl) {
		return nil, false
	}
	return o.RecursionAcl, true
}

// HasRecursionAcl returns a boolean if a field has been set.
func (o *ConfigGlobal) HasRecursionAcl() bool {
	if o != nil && !IsNil(o.RecursionAcl) {
		return true
	}

	return false
}

// SetRecursionAcl gets a reference to the given []ConfigACLItem and assigns it to the RecursionAcl field.
func (o *ConfigGlobal) SetRecursionAcl(v []ConfigACLItem) {
	o.RecursionAcl = v
}

// GetRecursionEnabled returns the RecursionEnabled field value if set, zero value otherwise.
func (o *ConfigGlobal) GetRecursionEnabled() bool {
	if o == nil || IsNil(o.RecursionEnabled) {
		var ret bool
		return ret
	}
	return *o.RecursionEnabled
}

// GetRecursionEnabledOk returns a tuple with the RecursionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetRecursionEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RecursionEnabled) {
		return nil, false
	}
	return o.RecursionEnabled, true
}

// HasRecursionEnabled returns a boolean if a field has been set.
func (o *ConfigGlobal) HasRecursionEnabled() bool {
	if o != nil && !IsNil(o.RecursionEnabled) {
		return true
	}

	return false
}

// SetRecursionEnabled gets a reference to the given bool and assigns it to the RecursionEnabled field.
func (o *ConfigGlobal) SetRecursionEnabled(v bool) {
	o.RecursionEnabled = &v
}

// GetRecursiveClients returns the RecursiveClients field value if set, zero value otherwise.
func (o *ConfigGlobal) GetRecursiveClients() int64 {
	if o == nil || IsNil(o.RecursiveClients) {
		var ret int64
		return ret
	}
	return *o.RecursiveClients
}

// GetRecursiveClientsOk returns a tuple with the RecursiveClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetRecursiveClientsOk() (*int64, bool) {
	if o == nil || IsNil(o.RecursiveClients) {
		return nil, false
	}
	return o.RecursiveClients, true
}

// HasRecursiveClients returns a boolean if a field has been set.
func (o *ConfigGlobal) HasRecursiveClients() bool {
	if o != nil && !IsNil(o.RecursiveClients) {
		return true
	}

	return false
}

// SetRecursiveClients gets a reference to the given int64 and assigns it to the RecursiveClients field.
func (o *ConfigGlobal) SetRecursiveClients(v int64) {
	o.RecursiveClients = &v
}

// GetResolverQueryTimeout returns the ResolverQueryTimeout field value if set, zero value otherwise.
func (o *ConfigGlobal) GetResolverQueryTimeout() int64 {
	if o == nil || IsNil(o.ResolverQueryTimeout) {
		var ret int64
		return ret
	}
	return *o.ResolverQueryTimeout
}

// GetResolverQueryTimeoutOk returns a tuple with the ResolverQueryTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetResolverQueryTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.ResolverQueryTimeout) {
		return nil, false
	}
	return o.ResolverQueryTimeout, true
}

// HasResolverQueryTimeout returns a boolean if a field has been set.
func (o *ConfigGlobal) HasResolverQueryTimeout() bool {
	if o != nil && !IsNil(o.ResolverQueryTimeout) {
		return true
	}

	return false
}

// SetResolverQueryTimeout gets a reference to the given int64 and assigns it to the ResolverQueryTimeout field.
func (o *ConfigGlobal) SetResolverQueryTimeout(v int64) {
	o.ResolverQueryTimeout = &v
}

// GetSecondaryAxfrQueryLimit returns the SecondaryAxfrQueryLimit field value if set, zero value otherwise.
func (o *ConfigGlobal) GetSecondaryAxfrQueryLimit() int64 {
	if o == nil || IsNil(o.SecondaryAxfrQueryLimit) {
		var ret int64
		return ret
	}
	return *o.SecondaryAxfrQueryLimit
}

// GetSecondaryAxfrQueryLimitOk returns a tuple with the SecondaryAxfrQueryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetSecondaryAxfrQueryLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.SecondaryAxfrQueryLimit) {
		return nil, false
	}
	return o.SecondaryAxfrQueryLimit, true
}

// HasSecondaryAxfrQueryLimit returns a boolean if a field has been set.
func (o *ConfigGlobal) HasSecondaryAxfrQueryLimit() bool {
	if o != nil && !IsNil(o.SecondaryAxfrQueryLimit) {
		return true
	}

	return false
}

// SetSecondaryAxfrQueryLimit gets a reference to the given int64 and assigns it to the SecondaryAxfrQueryLimit field.
func (o *ConfigGlobal) SetSecondaryAxfrQueryLimit(v int64) {
	o.SecondaryAxfrQueryLimit = &v
}

// GetSecondarySoaQueryLimit returns the SecondarySoaQueryLimit field value if set, zero value otherwise.
func (o *ConfigGlobal) GetSecondarySoaQueryLimit() int64 {
	if o == nil || IsNil(o.SecondarySoaQueryLimit) {
		var ret int64
		return ret
	}
	return *o.SecondarySoaQueryLimit
}

// GetSecondarySoaQueryLimitOk returns a tuple with the SecondarySoaQueryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetSecondarySoaQueryLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.SecondarySoaQueryLimit) {
		return nil, false
	}
	return o.SecondarySoaQueryLimit, true
}

// HasSecondarySoaQueryLimit returns a boolean if a field has been set.
func (o *ConfigGlobal) HasSecondarySoaQueryLimit() bool {
	if o != nil && !IsNil(o.SecondarySoaQueryLimit) {
		return true
	}

	return false
}

// SetSecondarySoaQueryLimit gets a reference to the given int64 and assigns it to the SecondarySoaQueryLimit field.
func (o *ConfigGlobal) SetSecondarySoaQueryLimit(v int64) {
	o.SecondarySoaQueryLimit = &v
}

// GetSortList returns the SortList field value if set, zero value otherwise.
func (o *ConfigGlobal) GetSortList() []ConfigSortListItem {
	if o == nil || IsNil(o.SortList) {
		var ret []ConfigSortListItem
		return ret
	}
	return o.SortList
}

// GetSortListOk returns a tuple with the SortList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetSortListOk() ([]ConfigSortListItem, bool) {
	if o == nil || IsNil(o.SortList) {
		return nil, false
	}
	return o.SortList, true
}

// HasSortList returns a boolean if a field has been set.
func (o *ConfigGlobal) HasSortList() bool {
	if o != nil && !IsNil(o.SortList) {
		return true
	}

	return false
}

// SetSortList gets a reference to the given []ConfigSortListItem and assigns it to the SortList field.
func (o *ConfigGlobal) SetSortList(v []ConfigSortListItem) {
	o.SortList = v
}

// GetSynthesizeAddressRecordsFromHttps returns the SynthesizeAddressRecordsFromHttps field value if set, zero value otherwise.
func (o *ConfigGlobal) GetSynthesizeAddressRecordsFromHttps() bool {
	if o == nil || IsNil(o.SynthesizeAddressRecordsFromHttps) {
		var ret bool
		return ret
	}
	return *o.SynthesizeAddressRecordsFromHttps
}

// GetSynthesizeAddressRecordsFromHttpsOk returns a tuple with the SynthesizeAddressRecordsFromHttps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetSynthesizeAddressRecordsFromHttpsOk() (*bool, bool) {
	if o == nil || IsNil(o.SynthesizeAddressRecordsFromHttps) {
		return nil, false
	}
	return o.SynthesizeAddressRecordsFromHttps, true
}

// HasSynthesizeAddressRecordsFromHttps returns a boolean if a field has been set.
func (o *ConfigGlobal) HasSynthesizeAddressRecordsFromHttps() bool {
	if o != nil && !IsNil(o.SynthesizeAddressRecordsFromHttps) {
		return true
	}

	return false
}

// SetSynthesizeAddressRecordsFromHttps gets a reference to the given bool and assigns it to the SynthesizeAddressRecordsFromHttps field.
func (o *ConfigGlobal) SetSynthesizeAddressRecordsFromHttps(v bool) {
	o.SynthesizeAddressRecordsFromHttps = &v
}

// GetTransferAcl returns the TransferAcl field value if set, zero value otherwise.
func (o *ConfigGlobal) GetTransferAcl() []ConfigACLItem {
	if o == nil || IsNil(o.TransferAcl) {
		var ret []ConfigACLItem
		return ret
	}
	return o.TransferAcl
}

// GetTransferAclOk returns a tuple with the TransferAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetTransferAclOk() ([]ConfigACLItem, bool) {
	if o == nil || IsNil(o.TransferAcl) {
		return nil, false
	}
	return o.TransferAcl, true
}

// HasTransferAcl returns a boolean if a field has been set.
func (o *ConfigGlobal) HasTransferAcl() bool {
	if o != nil && !IsNil(o.TransferAcl) {
		return true
	}

	return false
}

// SetTransferAcl gets a reference to the given []ConfigACLItem and assigns it to the TransferAcl field.
func (o *ConfigGlobal) SetTransferAcl(v []ConfigACLItem) {
	o.TransferAcl = v
}

// GetUpdateAcl returns the UpdateAcl field value if set, zero value otherwise.
func (o *ConfigGlobal) GetUpdateAcl() []ConfigACLItem {
	if o == nil || IsNil(o.UpdateAcl) {
		var ret []ConfigACLItem
		return ret
	}
	return o.UpdateAcl
}

// GetUpdateAclOk returns a tuple with the UpdateAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetUpdateAclOk() ([]ConfigACLItem, bool) {
	if o == nil || IsNil(o.UpdateAcl) {
		return nil, false
	}
	return o.UpdateAcl, true
}

// HasUpdateAcl returns a boolean if a field has been set.
func (o *ConfigGlobal) HasUpdateAcl() bool {
	if o != nil && !IsNil(o.UpdateAcl) {
		return true
	}

	return false
}

// SetUpdateAcl gets a reference to the given []ConfigACLItem and assigns it to the UpdateAcl field.
func (o *ConfigGlobal) SetUpdateAcl(v []ConfigACLItem) {
	o.UpdateAcl = v
}

// GetUseForwardersForSubzones returns the UseForwardersForSubzones field value if set, zero value otherwise.
func (o *ConfigGlobal) GetUseForwardersForSubzones() bool {
	if o == nil || IsNil(o.UseForwardersForSubzones) {
		var ret bool
		return ret
	}
	return *o.UseForwardersForSubzones
}

// GetUseForwardersForSubzonesOk returns a tuple with the UseForwardersForSubzones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetUseForwardersForSubzonesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseForwardersForSubzones) {
		return nil, false
	}
	return o.UseForwardersForSubzones, true
}

// HasUseForwardersForSubzones returns a boolean if a field has been set.
func (o *ConfigGlobal) HasUseForwardersForSubzones() bool {
	if o != nil && !IsNil(o.UseForwardersForSubzones) {
		return true
	}

	return false
}

// SetUseForwardersForSubzones gets a reference to the given bool and assigns it to the UseForwardersForSubzones field.
func (o *ConfigGlobal) SetUseForwardersForSubzones(v bool) {
	o.UseForwardersForSubzones = &v
}

// GetUseRootForwardersForLocalResolutionWithB1td returns the UseRootForwardersForLocalResolutionWithB1td field value if set, zero value otherwise.
func (o *ConfigGlobal) GetUseRootForwardersForLocalResolutionWithB1td() bool {
	if o == nil || IsNil(o.UseRootForwardersForLocalResolutionWithB1td) {
		var ret bool
		return ret
	}
	return *o.UseRootForwardersForLocalResolutionWithB1td
}

// GetUseRootForwardersForLocalResolutionWithB1tdOk returns a tuple with the UseRootForwardersForLocalResolutionWithB1td field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetUseRootForwardersForLocalResolutionWithB1tdOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRootForwardersForLocalResolutionWithB1td) {
		return nil, false
	}
	return o.UseRootForwardersForLocalResolutionWithB1td, true
}

// HasUseRootForwardersForLocalResolutionWithB1td returns a boolean if a field has been set.
func (o *ConfigGlobal) HasUseRootForwardersForLocalResolutionWithB1td() bool {
	if o != nil && !IsNil(o.UseRootForwardersForLocalResolutionWithB1td) {
		return true
	}

	return false
}

// SetUseRootForwardersForLocalResolutionWithB1td gets a reference to the given bool and assigns it to the UseRootForwardersForLocalResolutionWithB1td field.
func (o *ConfigGlobal) SetUseRootForwardersForLocalResolutionWithB1td(v bool) {
	o.UseRootForwardersForLocalResolutionWithB1td = &v
}

// GetZoneAuthority returns the ZoneAuthority field value if set, zero value otherwise.
func (o *ConfigGlobal) GetZoneAuthority() ConfigZoneAuthority {
	if o == nil || IsNil(o.ZoneAuthority) {
		var ret ConfigZoneAuthority
		return ret
	}
	return *o.ZoneAuthority
}

// GetZoneAuthorityOk returns a tuple with the ZoneAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGlobal) GetZoneAuthorityOk() (*ConfigZoneAuthority, bool) {
	if o == nil || IsNil(o.ZoneAuthority) {
		return nil, false
	}
	return o.ZoneAuthority, true
}

// HasZoneAuthority returns a boolean if a field has been set.
func (o *ConfigGlobal) HasZoneAuthority() bool {
	if o != nil && !IsNil(o.ZoneAuthority) {
		return true
	}

	return false
}

// SetZoneAuthority gets a reference to the given ConfigZoneAuthority and assigns it to the ZoneAuthority field.
func (o *ConfigGlobal) SetZoneAuthority(v ConfigZoneAuthority) {
	o.ZoneAuthority = &v
}

func (o ConfigGlobal) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigGlobal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddEdnsOptionInOutgoingQuery) {
		toSerialize["add_edns_option_in_outgoing_query"] = o.AddEdnsOptionInOutgoingQuery
	}
	if !IsNil(o.CustomRootNs) {
		toSerialize["custom_root_ns"] = o.CustomRootNs
	}
	if !IsNil(o.CustomRootNsEnabled) {
		toSerialize["custom_root_ns_enabled"] = o.CustomRootNsEnabled
	}
	if !IsNil(o.DnssecEnableValidation) {
		toSerialize["dnssec_enable_validation"] = o.DnssecEnableValidation
	}
	if !IsNil(o.DnssecEnabled) {
		toSerialize["dnssec_enabled"] = o.DnssecEnabled
	}
	if !IsNil(o.DnssecRootKeys) {
		toSerialize["dnssec_root_keys"] = o.DnssecRootKeys
	}
	if !IsNil(o.DnssecTrustAnchors) {
		toSerialize["dnssec_trust_anchors"] = o.DnssecTrustAnchors
	}
	if !IsNil(o.DnssecValidateExpiry) {
		toSerialize["dnssec_validate_expiry"] = o.DnssecValidateExpiry
	}
	if !IsNil(o.DtcConfig) {
		toSerialize["dtc_config"] = o.DtcConfig
	}
	if !IsNil(o.EcsEnabled) {
		toSerialize["ecs_enabled"] = o.EcsEnabled
	}
	if !IsNil(o.EcsForwarding) {
		toSerialize["ecs_forwarding"] = o.EcsForwarding
	}
	if !IsNil(o.EcsPrefixV4) {
		toSerialize["ecs_prefix_v4"] = o.EcsPrefixV4
	}
	if !IsNil(o.EcsPrefixV6) {
		toSerialize["ecs_prefix_v6"] = o.EcsPrefixV6
	}
	if !IsNil(o.EcsZones) {
		toSerialize["ecs_zones"] = o.EcsZones
	}
	if !IsNil(o.EdnsUdpSize) {
		toSerialize["edns_udp_size"] = o.EdnsUdpSize
	}
	if !IsNil(o.FilterAaaaAcl) {
		toSerialize["filter_aaaa_acl"] = o.FilterAaaaAcl
	}
	if !IsNil(o.FilterAaaaOnV4) {
		toSerialize["filter_aaaa_on_v4"] = o.FilterAaaaOnV4
	}
	if !IsNil(o.Forwarders) {
		toSerialize["forwarders"] = o.Forwarders
	}
	if !IsNil(o.ForwardersOnly) {
		toSerialize["forwarders_only"] = o.ForwardersOnly
	}
	if !IsNil(o.GssTsigEnabled) {
		toSerialize["gss_tsig_enabled"] = o.GssTsigEnabled
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.KerberosKeys) {
		toSerialize["kerberos_keys"] = o.KerberosKeys
	}
	if !IsNil(o.LameTtl) {
		toSerialize["lame_ttl"] = o.LameTtl
	}
	if !IsNil(o.LogQueryResponse) {
		toSerialize["log_query_response"] = o.LogQueryResponse
	}
	if !IsNil(o.MatchRecursiveOnly) {
		toSerialize["match_recursive_only"] = o.MatchRecursiveOnly
	}
	if !IsNil(o.MaxCacheTtl) {
		toSerialize["max_cache_ttl"] = o.MaxCacheTtl
	}
	if !IsNil(o.MaxNegativeTtl) {
		toSerialize["max_negative_ttl"] = o.MaxNegativeTtl
	}
	if !IsNil(o.MaxUdpSize) {
		toSerialize["max_udp_size"] = o.MaxUdpSize
	}
	if !IsNil(o.MinimalResponses) {
		toSerialize["minimal_responses"] = o.MinimalResponses
	}
	if !IsNil(o.Notify) {
		toSerialize["notify"] = o.Notify
	}
	if !IsNil(o.QueryAcl) {
		toSerialize["query_acl"] = o.QueryAcl
	}
	if !IsNil(o.QueryPort) {
		toSerialize["query_port"] = o.QueryPort
	}
	if !IsNil(o.RecursionAcl) {
		toSerialize["recursion_acl"] = o.RecursionAcl
	}
	if !IsNil(o.RecursionEnabled) {
		toSerialize["recursion_enabled"] = o.RecursionEnabled
	}
	if !IsNil(o.RecursiveClients) {
		toSerialize["recursive_clients"] = o.RecursiveClients
	}
	if !IsNil(o.ResolverQueryTimeout) {
		toSerialize["resolver_query_timeout"] = o.ResolverQueryTimeout
	}
	if !IsNil(o.SecondaryAxfrQueryLimit) {
		toSerialize["secondary_axfr_query_limit"] = o.SecondaryAxfrQueryLimit
	}
	if !IsNil(o.SecondarySoaQueryLimit) {
		toSerialize["secondary_soa_query_limit"] = o.SecondarySoaQueryLimit
	}
	if !IsNil(o.SortList) {
		toSerialize["sort_list"] = o.SortList
	}
	if !IsNil(o.SynthesizeAddressRecordsFromHttps) {
		toSerialize["synthesize_address_records_from_https"] = o.SynthesizeAddressRecordsFromHttps
	}
	if !IsNil(o.TransferAcl) {
		toSerialize["transfer_acl"] = o.TransferAcl
	}
	if !IsNil(o.UpdateAcl) {
		toSerialize["update_acl"] = o.UpdateAcl
	}
	if !IsNil(o.UseForwardersForSubzones) {
		toSerialize["use_forwarders_for_subzones"] = o.UseForwardersForSubzones
	}
	if !IsNil(o.UseRootForwardersForLocalResolutionWithB1td) {
		toSerialize["use_root_forwarders_for_local_resolution_with_b1td"] = o.UseRootForwardersForLocalResolutionWithB1td
	}
	if !IsNil(o.ZoneAuthority) {
		toSerialize["zone_authority"] = o.ZoneAuthority
	}
	return toSerialize, nil
}

type NullableConfigGlobal struct {
	value *ConfigGlobal
	isSet bool
}

func (v NullableConfigGlobal) Get() *ConfigGlobal {
	return v.value
}

func (v *NullableConfigGlobal) Set(val *ConfigGlobal) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigGlobal) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigGlobal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigGlobal(val *ConfigGlobal) *NullableConfigGlobal {
	return &NullableConfigGlobal{value: val, isSet: true}
}

func (v NullableConfigGlobal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigGlobal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
