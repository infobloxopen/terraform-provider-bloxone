/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_config

import (
	"encoding/json"
)

// checks if the ConfigAuthZoneConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigAuthZoneConfig{}

// ConfigAuthZoneConfig struct for ConfigAuthZoneConfig
type ConfigAuthZoneConfig struct {
	// Optional. DNS primaries external to BloxOne DDI. Order is not significant.
	ExternalPrimaries []ConfigExternalPrimary `json:"external_primaries,omitempty"`
	// DNS secondaries external to BloxOne DDI. Order is not significant.
	ExternalSecondaries []ConfigExternalSecondary `json:"external_secondaries,omitempty"`
	// Optional. BloxOne DDI hosts acting as internal secondaries. Order is not significant.
	InternalSecondaries []ConfigInternalSecondary `json:"internal_secondaries,omitempty"`
	// The resource identifier.
	Nsgs []string `json:"nsgs,omitempty"`
}

// NewConfigAuthZoneConfig instantiates a new ConfigAuthZoneConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigAuthZoneConfig() *ConfigAuthZoneConfig {
	this := ConfigAuthZoneConfig{}
	return &this
}

// NewConfigAuthZoneConfigWithDefaults instantiates a new ConfigAuthZoneConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigAuthZoneConfigWithDefaults() *ConfigAuthZoneConfig {
	this := ConfigAuthZoneConfig{}
	return &this
}

// GetExternalPrimaries returns the ExternalPrimaries field value if set, zero value otherwise.
func (o *ConfigAuthZoneConfig) GetExternalPrimaries() []ConfigExternalPrimary {
	if o == nil || IsNil(o.ExternalPrimaries) {
		var ret []ConfigExternalPrimary
		return ret
	}
	return o.ExternalPrimaries
}

// GetExternalPrimariesOk returns a tuple with the ExternalPrimaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigAuthZoneConfig) GetExternalPrimariesOk() ([]ConfigExternalPrimary, bool) {
	if o == nil || IsNil(o.ExternalPrimaries) {
		return nil, false
	}
	return o.ExternalPrimaries, true
}

// HasExternalPrimaries returns a boolean if a field has been set.
func (o *ConfigAuthZoneConfig) HasExternalPrimaries() bool {
	if o != nil && !IsNil(o.ExternalPrimaries) {
		return true
	}

	return false
}

// SetExternalPrimaries gets a reference to the given []ConfigExternalPrimary and assigns it to the ExternalPrimaries field.
func (o *ConfigAuthZoneConfig) SetExternalPrimaries(v []ConfigExternalPrimary) {
	o.ExternalPrimaries = v
}

// GetExternalSecondaries returns the ExternalSecondaries field value if set, zero value otherwise.
func (o *ConfigAuthZoneConfig) GetExternalSecondaries() []ConfigExternalSecondary {
	if o == nil || IsNil(o.ExternalSecondaries) {
		var ret []ConfigExternalSecondary
		return ret
	}
	return o.ExternalSecondaries
}

// GetExternalSecondariesOk returns a tuple with the ExternalSecondaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigAuthZoneConfig) GetExternalSecondariesOk() ([]ConfigExternalSecondary, bool) {
	if o == nil || IsNil(o.ExternalSecondaries) {
		return nil, false
	}
	return o.ExternalSecondaries, true
}

// HasExternalSecondaries returns a boolean if a field has been set.
func (o *ConfigAuthZoneConfig) HasExternalSecondaries() bool {
	if o != nil && !IsNil(o.ExternalSecondaries) {
		return true
	}

	return false
}

// SetExternalSecondaries gets a reference to the given []ConfigExternalSecondary and assigns it to the ExternalSecondaries field.
func (o *ConfigAuthZoneConfig) SetExternalSecondaries(v []ConfigExternalSecondary) {
	o.ExternalSecondaries = v
}

// GetInternalSecondaries returns the InternalSecondaries field value if set, zero value otherwise.
func (o *ConfigAuthZoneConfig) GetInternalSecondaries() []ConfigInternalSecondary {
	if o == nil || IsNil(o.InternalSecondaries) {
		var ret []ConfigInternalSecondary
		return ret
	}
	return o.InternalSecondaries
}

// GetInternalSecondariesOk returns a tuple with the InternalSecondaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigAuthZoneConfig) GetInternalSecondariesOk() ([]ConfigInternalSecondary, bool) {
	if o == nil || IsNil(o.InternalSecondaries) {
		return nil, false
	}
	return o.InternalSecondaries, true
}

// HasInternalSecondaries returns a boolean if a field has been set.
func (o *ConfigAuthZoneConfig) HasInternalSecondaries() bool {
	if o != nil && !IsNil(o.InternalSecondaries) {
		return true
	}

	return false
}

// SetInternalSecondaries gets a reference to the given []ConfigInternalSecondary and assigns it to the InternalSecondaries field.
func (o *ConfigAuthZoneConfig) SetInternalSecondaries(v []ConfigInternalSecondary) {
	o.InternalSecondaries = v
}

// GetNsgs returns the Nsgs field value if set, zero value otherwise.
func (o *ConfigAuthZoneConfig) GetNsgs() []string {
	if o == nil || IsNil(o.Nsgs) {
		var ret []string
		return ret
	}
	return o.Nsgs
}

// GetNsgsOk returns a tuple with the Nsgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigAuthZoneConfig) GetNsgsOk() ([]string, bool) {
	if o == nil || IsNil(o.Nsgs) {
		return nil, false
	}
	return o.Nsgs, true
}

// HasNsgs returns a boolean if a field has been set.
func (o *ConfigAuthZoneConfig) HasNsgs() bool {
	if o != nil && !IsNil(o.Nsgs) {
		return true
	}

	return false
}

// SetNsgs gets a reference to the given []string and assigns it to the Nsgs field.
func (o *ConfigAuthZoneConfig) SetNsgs(v []string) {
	o.Nsgs = v
}

func (o ConfigAuthZoneConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigAuthZoneConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExternalPrimaries) {
		toSerialize["external_primaries"] = o.ExternalPrimaries
	}
	if !IsNil(o.ExternalSecondaries) {
		toSerialize["external_secondaries"] = o.ExternalSecondaries
	}
	if !IsNil(o.InternalSecondaries) {
		toSerialize["internal_secondaries"] = o.InternalSecondaries
	}
	if !IsNil(o.Nsgs) {
		toSerialize["nsgs"] = o.Nsgs
	}
	return toSerialize, nil
}

type NullableConfigAuthZoneConfig struct {
	value *ConfigAuthZoneConfig
	isSet bool
}

func (v NullableConfigAuthZoneConfig) Get() *ConfigAuthZoneConfig {
	return v.value
}

func (v *NullableConfigAuthZoneConfig) Set(val *ConfigAuthZoneConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigAuthZoneConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigAuthZoneConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigAuthZoneConfig(val *ConfigAuthZoneConfig) *NullableConfigAuthZoneConfig {
	return &NullableConfigAuthZoneConfig{value: val, isSet: true}
}

func (v NullableConfigAuthZoneConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigAuthZoneConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
