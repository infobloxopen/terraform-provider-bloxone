/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_config

import (
	"encoding/json"
)

// checks if the ConfigHost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigHost{}

// ConfigHost A DNS Host (_dns/host_) object associates DNS configuraton with hosts.   Automatically created and destroyed based on the hosts known to the platform.
type ConfigHost struct {
	// Host FQDN.
	AbsoluteName *string `json:"absolute_name,omitempty"`
	// Host's primary IP Address.
	Address *string `json:"address,omitempty"`
	// Anycast address configured to the host. Order is not significant.
	AnycastAddresses []string                    `json:"anycast_addresses,omitempty"`
	AssociatedServer *ConfigHostAssociatedServer `json:"associated_server,omitempty"`
	// Host description.
	Comment *string `json:"comment,omitempty"`
	// Host current version.
	CurrentVersion *string `json:"current_version,omitempty"`
	// Below _dfp_ field is deprecated and not supported anymore. The indication whether or not BloxOne DDI DNS and BloxOne TD DFP are both active on the host will be migrated into the new _dfp_service_ field.
	Dfp *bool `json:"dfp,omitempty"`
	// DFP service indicates whether or not BloxOne DDI DNS and BloxOne TD DFP are both active on the host. If so, BloxOne DDI DNS will augment recursive queries and forward them to BloxOne TD DFP. Allowed values:  * _unavailable_: BloxOne TD DFP application is not available,  * _enabled_: BloxOne TD DFP application is available and enabled,  * _disabled_: BloxOne TD DFP application is available but disabled.
	DfpService *string `json:"dfp_service,omitempty"`
	// The resource identifier.
	Id                 *string                `json:"id,omitempty"`
	InheritanceSources *ConfigHostInheritance `json:"inheritance_sources,omitempty"`
	// Optional. _kerberos_keys_ contains a list of keys for GSS-TSIG signed dynamic updates.  Defaults to empty.
	KerberosKeys []ConfigKerberosKey `json:"kerberos_keys,omitempty"`
	// Host display name.
	Name *string `json:"name,omitempty"`
	// On-Prem Host ID.
	Ophid *string `json:"ophid,omitempty"`
	// Host FQDN in punycode.
	ProtocolAbsoluteName *string `json:"protocol_absolute_name,omitempty"`
	// External provider identifier.
	ProviderId *string `json:"provider_id,omitempty"`
	// The resource identifier.
	Server *string `json:"server,omitempty"`
	// Host site ID.
	SiteId *string `json:"site_id,omitempty"`
	// Host tagging specifics.
	Tags map[string]interface{} `json:"tags,omitempty"`
	// Defines the type of host. Allowed values:  * _bloxone_ddi_: host type is BloxOne DDI,  * _microsoft_azure_: host type is Microsoft Azure,  * _amazon_web_service_: host type is Amazon Web Services,  * _microsoft_active_directory_: host type is Microsoft Active Directory,  * _google_cloud_platform_: host type is Google Cloud Platform.
	Type *string `json:"type,omitempty"`
}

// NewConfigHost instantiates a new ConfigHost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigHost() *ConfigHost {
	this := ConfigHost{}
	return &this
}

// NewConfigHostWithDefaults instantiates a new ConfigHost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigHostWithDefaults() *ConfigHost {
	this := ConfigHost{}
	return &this
}

// GetAbsoluteName returns the AbsoluteName field value if set, zero value otherwise.
func (o *ConfigHost) GetAbsoluteName() string {
	if o == nil || IsNil(o.AbsoluteName) {
		var ret string
		return ret
	}
	return *o.AbsoluteName
}

// GetAbsoluteNameOk returns a tuple with the AbsoluteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigHost) GetAbsoluteNameOk() (*string, bool) {
	if o == nil || IsNil(o.AbsoluteName) {
		return nil, false
	}
	return o.AbsoluteName, true
}

// HasAbsoluteName returns a boolean if a field has been set.
func (o *ConfigHost) HasAbsoluteName() bool {
	if o != nil && !IsNil(o.AbsoluteName) {
		return true
	}

	return false
}

// SetAbsoluteName gets a reference to the given string and assigns it to the AbsoluteName field.
func (o *ConfigHost) SetAbsoluteName(v string) {
	o.AbsoluteName = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *ConfigHost) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigHost) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *ConfigHost) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *ConfigHost) SetAddress(v string) {
	o.Address = &v
}

// GetAnycastAddresses returns the AnycastAddresses field value if set, zero value otherwise.
func (o *ConfigHost) GetAnycastAddresses() []string {
	if o == nil || IsNil(o.AnycastAddresses) {
		var ret []string
		return ret
	}
	return o.AnycastAddresses
}

// GetAnycastAddressesOk returns a tuple with the AnycastAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigHost) GetAnycastAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.AnycastAddresses) {
		return nil, false
	}
	return o.AnycastAddresses, true
}

// HasAnycastAddresses returns a boolean if a field has been set.
func (o *ConfigHost) HasAnycastAddresses() bool {
	if o != nil && !IsNil(o.AnycastAddresses) {
		return true
	}

	return false
}

// SetAnycastAddresses gets a reference to the given []string and assigns it to the AnycastAddresses field.
func (o *ConfigHost) SetAnycastAddresses(v []string) {
	o.AnycastAddresses = v
}

// GetAssociatedServer returns the AssociatedServer field value if set, zero value otherwise.
func (o *ConfigHost) GetAssociatedServer() ConfigHostAssociatedServer {
	if o == nil || IsNil(o.AssociatedServer) {
		var ret ConfigHostAssociatedServer
		return ret
	}
	return *o.AssociatedServer
}

// GetAssociatedServerOk returns a tuple with the AssociatedServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigHost) GetAssociatedServerOk() (*ConfigHostAssociatedServer, bool) {
	if o == nil || IsNil(o.AssociatedServer) {
		return nil, false
	}
	return o.AssociatedServer, true
}

// HasAssociatedServer returns a boolean if a field has been set.
func (o *ConfigHost) HasAssociatedServer() bool {
	if o != nil && !IsNil(o.AssociatedServer) {
		return true
	}

	return false
}

// SetAssociatedServer gets a reference to the given ConfigHostAssociatedServer and assigns it to the AssociatedServer field.
func (o *ConfigHost) SetAssociatedServer(v ConfigHostAssociatedServer) {
	o.AssociatedServer = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ConfigHost) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigHost) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ConfigHost) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ConfigHost) SetComment(v string) {
	o.Comment = &v
}

// GetCurrentVersion returns the CurrentVersion field value if set, zero value otherwise.
func (o *ConfigHost) GetCurrentVersion() string {
	if o == nil || IsNil(o.CurrentVersion) {
		var ret string
		return ret
	}
	return *o.CurrentVersion
}

// GetCurrentVersionOk returns a tuple with the CurrentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigHost) GetCurrentVersionOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentVersion) {
		return nil, false
	}
	return o.CurrentVersion, true
}

// HasCurrentVersion returns a boolean if a field has been set.
func (o *ConfigHost) HasCurrentVersion() bool {
	if o != nil && !IsNil(o.CurrentVersion) {
		return true
	}

	return false
}

// SetCurrentVersion gets a reference to the given string and assigns it to the CurrentVersion field.
func (o *ConfigHost) SetCurrentVersion(v string) {
	o.CurrentVersion = &v
}

// GetDfp returns the Dfp field value if set, zero value otherwise.
func (o *ConfigHost) GetDfp() bool {
	if o == nil || IsNil(o.Dfp) {
		var ret bool
		return ret
	}
	return *o.Dfp
}

// GetDfpOk returns a tuple with the Dfp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigHost) GetDfpOk() (*bool, bool) {
	if o == nil || IsNil(o.Dfp) {
		return nil, false
	}
	return o.Dfp, true
}

// HasDfp returns a boolean if a field has been set.
func (o *ConfigHost) HasDfp() bool {
	if o != nil && !IsNil(o.Dfp) {
		return true
	}

	return false
}

// SetDfp gets a reference to the given bool and assigns it to the Dfp field.
func (o *ConfigHost) SetDfp(v bool) {
	o.Dfp = &v
}

// GetDfpService returns the DfpService field value if set, zero value otherwise.
func (o *ConfigHost) GetDfpService() string {
	if o == nil || IsNil(o.DfpService) {
		var ret string
		return ret
	}
	return *o.DfpService
}

// GetDfpServiceOk returns a tuple with the DfpService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigHost) GetDfpServiceOk() (*string, bool) {
	if o == nil || IsNil(o.DfpService) {
		return nil, false
	}
	return o.DfpService, true
}

// HasDfpService returns a boolean if a field has been set.
func (o *ConfigHost) HasDfpService() bool {
	if o != nil && !IsNil(o.DfpService) {
		return true
	}

	return false
}

// SetDfpService gets a reference to the given string and assigns it to the DfpService field.
func (o *ConfigHost) SetDfpService(v string) {
	o.DfpService = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConfigHost) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigHost) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConfigHost) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConfigHost) SetId(v string) {
	o.Id = &v
}

// GetInheritanceSources returns the InheritanceSources field value if set, zero value otherwise.
func (o *ConfigHost) GetInheritanceSources() ConfigHostInheritance {
	if o == nil || IsNil(o.InheritanceSources) {
		var ret ConfigHostInheritance
		return ret
	}
	return *o.InheritanceSources
}

// GetInheritanceSourcesOk returns a tuple with the InheritanceSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigHost) GetInheritanceSourcesOk() (*ConfigHostInheritance, bool) {
	if o == nil || IsNil(o.InheritanceSources) {
		return nil, false
	}
	return o.InheritanceSources, true
}

// HasInheritanceSources returns a boolean if a field has been set.
func (o *ConfigHost) HasInheritanceSources() bool {
	if o != nil && !IsNil(o.InheritanceSources) {
		return true
	}

	return false
}

// SetInheritanceSources gets a reference to the given ConfigHostInheritance and assigns it to the InheritanceSources field.
func (o *ConfigHost) SetInheritanceSources(v ConfigHostInheritance) {
	o.InheritanceSources = &v
}

// GetKerberosKeys returns the KerberosKeys field value if set, zero value otherwise.
func (o *ConfigHost) GetKerberosKeys() []ConfigKerberosKey {
	if o == nil || IsNil(o.KerberosKeys) {
		var ret []ConfigKerberosKey
		return ret
	}
	return o.KerberosKeys
}

// GetKerberosKeysOk returns a tuple with the KerberosKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigHost) GetKerberosKeysOk() ([]ConfigKerberosKey, bool) {
	if o == nil || IsNil(o.KerberosKeys) {
		return nil, false
	}
	return o.KerberosKeys, true
}

// HasKerberosKeys returns a boolean if a field has been set.
func (o *ConfigHost) HasKerberosKeys() bool {
	if o != nil && !IsNil(o.KerberosKeys) {
		return true
	}

	return false
}

// SetKerberosKeys gets a reference to the given []ConfigKerberosKey and assigns it to the KerberosKeys field.
func (o *ConfigHost) SetKerberosKeys(v []ConfigKerberosKey) {
	o.KerberosKeys = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConfigHost) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigHost) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConfigHost) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConfigHost) SetName(v string) {
	o.Name = &v
}

// GetOphid returns the Ophid field value if set, zero value otherwise.
func (o *ConfigHost) GetOphid() string {
	if o == nil || IsNil(o.Ophid) {
		var ret string
		return ret
	}
	return *o.Ophid
}

// GetOphidOk returns a tuple with the Ophid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigHost) GetOphidOk() (*string, bool) {
	if o == nil || IsNil(o.Ophid) {
		return nil, false
	}
	return o.Ophid, true
}

// HasOphid returns a boolean if a field has been set.
func (o *ConfigHost) HasOphid() bool {
	if o != nil && !IsNil(o.Ophid) {
		return true
	}

	return false
}

// SetOphid gets a reference to the given string and assigns it to the Ophid field.
func (o *ConfigHost) SetOphid(v string) {
	o.Ophid = &v
}

// GetProtocolAbsoluteName returns the ProtocolAbsoluteName field value if set, zero value otherwise.
func (o *ConfigHost) GetProtocolAbsoluteName() string {
	if o == nil || IsNil(o.ProtocolAbsoluteName) {
		var ret string
		return ret
	}
	return *o.ProtocolAbsoluteName
}

// GetProtocolAbsoluteNameOk returns a tuple with the ProtocolAbsoluteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigHost) GetProtocolAbsoluteNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProtocolAbsoluteName) {
		return nil, false
	}
	return o.ProtocolAbsoluteName, true
}

// HasProtocolAbsoluteName returns a boolean if a field has been set.
func (o *ConfigHost) HasProtocolAbsoluteName() bool {
	if o != nil && !IsNil(o.ProtocolAbsoluteName) {
		return true
	}

	return false
}

// SetProtocolAbsoluteName gets a reference to the given string and assigns it to the ProtocolAbsoluteName field.
func (o *ConfigHost) SetProtocolAbsoluteName(v string) {
	o.ProtocolAbsoluteName = &v
}

// GetProviderId returns the ProviderId field value if set, zero value otherwise.
func (o *ConfigHost) GetProviderId() string {
	if o == nil || IsNil(o.ProviderId) {
		var ret string
		return ret
	}
	return *o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigHost) GetProviderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderId) {
		return nil, false
	}
	return o.ProviderId, true
}

// HasProviderId returns a boolean if a field has been set.
func (o *ConfigHost) HasProviderId() bool {
	if o != nil && !IsNil(o.ProviderId) {
		return true
	}

	return false
}

// SetProviderId gets a reference to the given string and assigns it to the ProviderId field.
func (o *ConfigHost) SetProviderId(v string) {
	o.ProviderId = &v
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *ConfigHost) GetServer() string {
	if o == nil || IsNil(o.Server) {
		var ret string
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigHost) GetServerOk() (*string, bool) {
	if o == nil || IsNil(o.Server) {
		return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *ConfigHost) HasServer() bool {
	if o != nil && !IsNil(o.Server) {
		return true
	}

	return false
}

// SetServer gets a reference to the given string and assigns it to the Server field.
func (o *ConfigHost) SetServer(v string) {
	o.Server = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *ConfigHost) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigHost) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *ConfigHost) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *ConfigHost) SetSiteId(v string) {
	o.SiteId = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ConfigHost) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigHost) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ConfigHost) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *ConfigHost) SetTags(v map[string]interface{}) {
	o.Tags = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConfigHost) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigHost) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConfigHost) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConfigHost) SetType(v string) {
	o.Type = &v
}

func (o ConfigHost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigHost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AbsoluteName) {
		toSerialize["absolute_name"] = o.AbsoluteName
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.AnycastAddresses) {
		toSerialize["anycast_addresses"] = o.AnycastAddresses
	}
	if !IsNil(o.AssociatedServer) {
		toSerialize["associated_server"] = o.AssociatedServer
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.CurrentVersion) {
		toSerialize["current_version"] = o.CurrentVersion
	}
	if !IsNil(o.Dfp) {
		toSerialize["dfp"] = o.Dfp
	}
	if !IsNil(o.DfpService) {
		toSerialize["dfp_service"] = o.DfpService
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InheritanceSources) {
		toSerialize["inheritance_sources"] = o.InheritanceSources
	}
	if !IsNil(o.KerberosKeys) {
		toSerialize["kerberos_keys"] = o.KerberosKeys
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Ophid) {
		toSerialize["ophid"] = o.Ophid
	}
	if !IsNil(o.ProtocolAbsoluteName) {
		toSerialize["protocol_absolute_name"] = o.ProtocolAbsoluteName
	}
	if !IsNil(o.ProviderId) {
		toSerialize["provider_id"] = o.ProviderId
	}
	if !IsNil(o.Server) {
		toSerialize["server"] = o.Server
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableConfigHost struct {
	value *ConfigHost
	isSet bool
}

func (v NullableConfigHost) Get() *ConfigHost {
	return v.value
}

func (v *NullableConfigHost) Set(val *ConfigHost) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigHost) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigHost(val *ConfigHost) *NullableConfigHost {
	return &NullableConfigHost{value: val, isSet: true}
}

func (v NullableConfigHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
