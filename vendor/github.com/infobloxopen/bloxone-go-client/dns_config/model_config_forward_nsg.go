/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_config

import (
	"encoding/json"
)

// checks if the ConfigForwardNSG type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigForwardNSG{}

// ConfigForwardNSG Forward DNS Server Group for forward zones.
type ConfigForwardNSG struct {
	// Optional. Comment for the object.
	Comment *string `json:"comment,omitempty"`
	// Optional. External DNS servers to forward to. Order is not significant.
	ExternalForwarders []ConfigForwarder `json:"external_forwarders,omitempty"`
	// Optional. _true_ to only forward.
	ForwardersOnly *bool `json:"forwarders_only,omitempty"`
	// The resource identifier.
	Hosts []string `json:"hosts,omitempty"`
	// The resource identifier.
	Id *string `json:"id,omitempty"`
	// The resource identifier.
	InternalForwarders []string `json:"internal_forwarders,omitempty"`
	// Name of the object.
	Name string `json:"name"`
	// The resource identifier.
	Nsgs []string `json:"nsgs,omitempty"`
	// Tagging specifics.
	Tags map[string]interface{} `json:"tags,omitempty"`
}

// NewConfigForwardNSG instantiates a new ConfigForwardNSG object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigForwardNSG(name string) *ConfigForwardNSG {
	this := ConfigForwardNSG{}
	this.Name = name
	return &this
}

// NewConfigForwardNSGWithDefaults instantiates a new ConfigForwardNSG object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigForwardNSGWithDefaults() *ConfigForwardNSG {
	this := ConfigForwardNSG{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ConfigForwardNSG) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigForwardNSG) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ConfigForwardNSG) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ConfigForwardNSG) SetComment(v string) {
	o.Comment = &v
}

// GetExternalForwarders returns the ExternalForwarders field value if set, zero value otherwise.
func (o *ConfigForwardNSG) GetExternalForwarders() []ConfigForwarder {
	if o == nil || IsNil(o.ExternalForwarders) {
		var ret []ConfigForwarder
		return ret
	}
	return o.ExternalForwarders
}

// GetExternalForwardersOk returns a tuple with the ExternalForwarders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigForwardNSG) GetExternalForwardersOk() ([]ConfigForwarder, bool) {
	if o == nil || IsNil(o.ExternalForwarders) {
		return nil, false
	}
	return o.ExternalForwarders, true
}

// HasExternalForwarders returns a boolean if a field has been set.
func (o *ConfigForwardNSG) HasExternalForwarders() bool {
	if o != nil && !IsNil(o.ExternalForwarders) {
		return true
	}

	return false
}

// SetExternalForwarders gets a reference to the given []ConfigForwarder and assigns it to the ExternalForwarders field.
func (o *ConfigForwardNSG) SetExternalForwarders(v []ConfigForwarder) {
	o.ExternalForwarders = v
}

// GetForwardersOnly returns the ForwardersOnly field value if set, zero value otherwise.
func (o *ConfigForwardNSG) GetForwardersOnly() bool {
	if o == nil || IsNil(o.ForwardersOnly) {
		var ret bool
		return ret
	}
	return *o.ForwardersOnly
}

// GetForwardersOnlyOk returns a tuple with the ForwardersOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigForwardNSG) GetForwardersOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ForwardersOnly) {
		return nil, false
	}
	return o.ForwardersOnly, true
}

// HasForwardersOnly returns a boolean if a field has been set.
func (o *ConfigForwardNSG) HasForwardersOnly() bool {
	if o != nil && !IsNil(o.ForwardersOnly) {
		return true
	}

	return false
}

// SetForwardersOnly gets a reference to the given bool and assigns it to the ForwardersOnly field.
func (o *ConfigForwardNSG) SetForwardersOnly(v bool) {
	o.ForwardersOnly = &v
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *ConfigForwardNSG) GetHosts() []string {
	if o == nil || IsNil(o.Hosts) {
		var ret []string
		return ret
	}
	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigForwardNSG) GetHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.Hosts) {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *ConfigForwardNSG) HasHosts() bool {
	if o != nil && !IsNil(o.Hosts) {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []string and assigns it to the Hosts field.
func (o *ConfigForwardNSG) SetHosts(v []string) {
	o.Hosts = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConfigForwardNSG) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigForwardNSG) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConfigForwardNSG) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConfigForwardNSG) SetId(v string) {
	o.Id = &v
}

// GetInternalForwarders returns the InternalForwarders field value if set, zero value otherwise.
func (o *ConfigForwardNSG) GetInternalForwarders() []string {
	if o == nil || IsNil(o.InternalForwarders) {
		var ret []string
		return ret
	}
	return o.InternalForwarders
}

// GetInternalForwardersOk returns a tuple with the InternalForwarders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigForwardNSG) GetInternalForwardersOk() ([]string, bool) {
	if o == nil || IsNil(o.InternalForwarders) {
		return nil, false
	}
	return o.InternalForwarders, true
}

// HasInternalForwarders returns a boolean if a field has been set.
func (o *ConfigForwardNSG) HasInternalForwarders() bool {
	if o != nil && !IsNil(o.InternalForwarders) {
		return true
	}

	return false
}

// SetInternalForwarders gets a reference to the given []string and assigns it to the InternalForwarders field.
func (o *ConfigForwardNSG) SetInternalForwarders(v []string) {
	o.InternalForwarders = v
}

// GetName returns the Name field value
func (o *ConfigForwardNSG) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConfigForwardNSG) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConfigForwardNSG) SetName(v string) {
	o.Name = v
}

// GetNsgs returns the Nsgs field value if set, zero value otherwise.
func (o *ConfigForwardNSG) GetNsgs() []string {
	if o == nil || IsNil(o.Nsgs) {
		var ret []string
		return ret
	}
	return o.Nsgs
}

// GetNsgsOk returns a tuple with the Nsgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigForwardNSG) GetNsgsOk() ([]string, bool) {
	if o == nil || IsNil(o.Nsgs) {
		return nil, false
	}
	return o.Nsgs, true
}

// HasNsgs returns a boolean if a field has been set.
func (o *ConfigForwardNSG) HasNsgs() bool {
	if o != nil && !IsNil(o.Nsgs) {
		return true
	}

	return false
}

// SetNsgs gets a reference to the given []string and assigns it to the Nsgs field.
func (o *ConfigForwardNSG) SetNsgs(v []string) {
	o.Nsgs = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ConfigForwardNSG) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigForwardNSG) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ConfigForwardNSG) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *ConfigForwardNSG) SetTags(v map[string]interface{}) {
	o.Tags = v
}

func (o ConfigForwardNSG) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigForwardNSG) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.ExternalForwarders) {
		toSerialize["external_forwarders"] = o.ExternalForwarders
	}
	if !IsNil(o.ForwardersOnly) {
		toSerialize["forwarders_only"] = o.ForwardersOnly
	}
	if !IsNil(o.Hosts) {
		toSerialize["hosts"] = o.Hosts
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InternalForwarders) {
		toSerialize["internal_forwarders"] = o.InternalForwarders
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Nsgs) {
		toSerialize["nsgs"] = o.Nsgs
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableConfigForwardNSG struct {
	value *ConfigForwardNSG
	isSet bool
}

func (v NullableConfigForwardNSG) Get() *ConfigForwardNSG {
	return v.value
}

func (v *NullableConfigForwardNSG) Set(val *ConfigForwardNSG) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigForwardNSG) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigForwardNSG) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigForwardNSG(val *ConfigForwardNSG) *NullableConfigForwardNSG {
	return &NullableConfigForwardNSG{value: val, isSet: true}
}

func (v NullableConfigForwardNSG) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigForwardNSG) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
