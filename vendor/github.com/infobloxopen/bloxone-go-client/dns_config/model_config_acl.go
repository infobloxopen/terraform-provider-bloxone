/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_config

import (
	"encoding/json"
)

// checks if the ConfigACL type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigACL{}

// ConfigACL Named ACL (Access Control List).
type ConfigACL struct {
	// Optional. Comment for ACL.
	Comment *string `json:"comment,omitempty"`
	// The resource identifier.
	Id *string `json:"id,omitempty"`
	// Optional. Ordered list of access control elements.  Elements are evaluated in order to determine access. If evaluation reaches the end of the list then access is denied.
	List []ConfigACLItem `json:"list,omitempty"`
	// ACL object name.
	Name string `json:"name"`
	// Tagging specifics.
	Tags map[string]interface{} `json:"tags,omitempty"`
}

// NewConfigACL instantiates a new ConfigACL object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigACL(name string) *ConfigACL {
	this := ConfigACL{}
	this.Name = name
	return &this
}

// NewConfigACLWithDefaults instantiates a new ConfigACL object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigACLWithDefaults() *ConfigACL {
	this := ConfigACL{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ConfigACL) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigACL) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ConfigACL) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ConfigACL) SetComment(v string) {
	o.Comment = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConfigACL) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigACL) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConfigACL) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConfigACL) SetId(v string) {
	o.Id = &v
}

// GetList returns the List field value if set, zero value otherwise.
func (o *ConfigACL) GetList() []ConfigACLItem {
	if o == nil || IsNil(o.List) {
		var ret []ConfigACLItem
		return ret
	}
	return o.List
}

// GetListOk returns a tuple with the List field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigACL) GetListOk() ([]ConfigACLItem, bool) {
	if o == nil || IsNil(o.List) {
		return nil, false
	}
	return o.List, true
}

// HasList returns a boolean if a field has been set.
func (o *ConfigACL) HasList() bool {
	if o != nil && !IsNil(o.List) {
		return true
	}

	return false
}

// SetList gets a reference to the given []ConfigACLItem and assigns it to the List field.
func (o *ConfigACL) SetList(v []ConfigACLItem) {
	o.List = v
}

// GetName returns the Name field value
func (o *ConfigACL) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConfigACL) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConfigACL) SetName(v string) {
	o.Name = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ConfigACL) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigACL) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ConfigACL) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *ConfigACL) SetTags(v map[string]interface{}) {
	o.Tags = v
}

func (o ConfigACL) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigACL) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.List) {
		toSerialize["list"] = o.List
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableConfigACL struct {
	value *ConfigACL
	isSet bool
}

func (v NullableConfigACL) Get() *ConfigACL {
	return v.value
}

func (v *NullableConfigACL) Set(val *ConfigACL) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigACL) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigACL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigACL(val *ConfigACL) *NullableConfigACL {
	return &NullableConfigACL{value: val, isSet: true}
}

func (v NullableConfigACL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigACL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
