/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_config

import (
	"encoding/json"
)

// checks if the ConfigCopyAuthZone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigCopyAuthZone{}

// ConfigCopyAuthZone struct for ConfigCopyAuthZone
type ConfigCopyAuthZone struct {
	// A comment of the (copied) _dns/auth_zone_ object.
	Comment *string `json:"comment,omitempty"`
	// DNS primaries external to BloxOne DDI. Order is not significant.
	ExternalPrimaries []ConfigExternalPrimary `json:"external_primaries,omitempty"`
	// DNS secondaries external to BloxOne DDI. Order is not significant.
	ExternalSecondaries []ConfigExternalSecondary `json:"external_secondaries,omitempty"`
	// The resource identifier.
	Id *string `json:"id,omitempty"`
	// BloxOne DDI hosts acting as internal secondaries. Order is not significant.
	InternalSecondaries []ConfigInternalSecondary `json:"internal_secondaries,omitempty"`
	// The resource identifier.
	Nsgs []string `json:"nsgs,omitempty"`
	// Indicates whether child objects should be copied or not.  Defaults to _false_. Reserved for future use.
	Recursive *bool `json:"recursive,omitempty"`
	// Indicates whether copying should skip object in case of error and continue with next, or abort copying in case of error.  Defaults to _false_.
	SkipOnError *bool `json:"skip_on_error,omitempty"`
	// The resource identifier.
	TargetView string `json:"target_view"`
}

// NewConfigCopyAuthZone instantiates a new ConfigCopyAuthZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigCopyAuthZone(targetView string) *ConfigCopyAuthZone {
	this := ConfigCopyAuthZone{}
	this.TargetView = targetView
	return &this
}

// NewConfigCopyAuthZoneWithDefaults instantiates a new ConfigCopyAuthZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigCopyAuthZoneWithDefaults() *ConfigCopyAuthZone {
	this := ConfigCopyAuthZone{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ConfigCopyAuthZone) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigCopyAuthZone) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ConfigCopyAuthZone) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ConfigCopyAuthZone) SetComment(v string) {
	o.Comment = &v
}

// GetExternalPrimaries returns the ExternalPrimaries field value if set, zero value otherwise.
func (o *ConfigCopyAuthZone) GetExternalPrimaries() []ConfigExternalPrimary {
	if o == nil || IsNil(o.ExternalPrimaries) {
		var ret []ConfigExternalPrimary
		return ret
	}
	return o.ExternalPrimaries
}

// GetExternalPrimariesOk returns a tuple with the ExternalPrimaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigCopyAuthZone) GetExternalPrimariesOk() ([]ConfigExternalPrimary, bool) {
	if o == nil || IsNil(o.ExternalPrimaries) {
		return nil, false
	}
	return o.ExternalPrimaries, true
}

// HasExternalPrimaries returns a boolean if a field has been set.
func (o *ConfigCopyAuthZone) HasExternalPrimaries() bool {
	if o != nil && !IsNil(o.ExternalPrimaries) {
		return true
	}

	return false
}

// SetExternalPrimaries gets a reference to the given []ConfigExternalPrimary and assigns it to the ExternalPrimaries field.
func (o *ConfigCopyAuthZone) SetExternalPrimaries(v []ConfigExternalPrimary) {
	o.ExternalPrimaries = v
}

// GetExternalSecondaries returns the ExternalSecondaries field value if set, zero value otherwise.
func (o *ConfigCopyAuthZone) GetExternalSecondaries() []ConfigExternalSecondary {
	if o == nil || IsNil(o.ExternalSecondaries) {
		var ret []ConfigExternalSecondary
		return ret
	}
	return o.ExternalSecondaries
}

// GetExternalSecondariesOk returns a tuple with the ExternalSecondaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigCopyAuthZone) GetExternalSecondariesOk() ([]ConfigExternalSecondary, bool) {
	if o == nil || IsNil(o.ExternalSecondaries) {
		return nil, false
	}
	return o.ExternalSecondaries, true
}

// HasExternalSecondaries returns a boolean if a field has been set.
func (o *ConfigCopyAuthZone) HasExternalSecondaries() bool {
	if o != nil && !IsNil(o.ExternalSecondaries) {
		return true
	}

	return false
}

// SetExternalSecondaries gets a reference to the given []ConfigExternalSecondary and assigns it to the ExternalSecondaries field.
func (o *ConfigCopyAuthZone) SetExternalSecondaries(v []ConfigExternalSecondary) {
	o.ExternalSecondaries = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConfigCopyAuthZone) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigCopyAuthZone) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConfigCopyAuthZone) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConfigCopyAuthZone) SetId(v string) {
	o.Id = &v
}

// GetInternalSecondaries returns the InternalSecondaries field value if set, zero value otherwise.
func (o *ConfigCopyAuthZone) GetInternalSecondaries() []ConfigInternalSecondary {
	if o == nil || IsNil(o.InternalSecondaries) {
		var ret []ConfigInternalSecondary
		return ret
	}
	return o.InternalSecondaries
}

// GetInternalSecondariesOk returns a tuple with the InternalSecondaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigCopyAuthZone) GetInternalSecondariesOk() ([]ConfigInternalSecondary, bool) {
	if o == nil || IsNil(o.InternalSecondaries) {
		return nil, false
	}
	return o.InternalSecondaries, true
}

// HasInternalSecondaries returns a boolean if a field has been set.
func (o *ConfigCopyAuthZone) HasInternalSecondaries() bool {
	if o != nil && !IsNil(o.InternalSecondaries) {
		return true
	}

	return false
}

// SetInternalSecondaries gets a reference to the given []ConfigInternalSecondary and assigns it to the InternalSecondaries field.
func (o *ConfigCopyAuthZone) SetInternalSecondaries(v []ConfigInternalSecondary) {
	o.InternalSecondaries = v
}

// GetNsgs returns the Nsgs field value if set, zero value otherwise.
func (o *ConfigCopyAuthZone) GetNsgs() []string {
	if o == nil || IsNil(o.Nsgs) {
		var ret []string
		return ret
	}
	return o.Nsgs
}

// GetNsgsOk returns a tuple with the Nsgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigCopyAuthZone) GetNsgsOk() ([]string, bool) {
	if o == nil || IsNil(o.Nsgs) {
		return nil, false
	}
	return o.Nsgs, true
}

// HasNsgs returns a boolean if a field has been set.
func (o *ConfigCopyAuthZone) HasNsgs() bool {
	if o != nil && !IsNil(o.Nsgs) {
		return true
	}

	return false
}

// SetNsgs gets a reference to the given []string and assigns it to the Nsgs field.
func (o *ConfigCopyAuthZone) SetNsgs(v []string) {
	o.Nsgs = v
}

// GetRecursive returns the Recursive field value if set, zero value otherwise.
func (o *ConfigCopyAuthZone) GetRecursive() bool {
	if o == nil || IsNil(o.Recursive) {
		var ret bool
		return ret
	}
	return *o.Recursive
}

// GetRecursiveOk returns a tuple with the Recursive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigCopyAuthZone) GetRecursiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Recursive) {
		return nil, false
	}
	return o.Recursive, true
}

// HasRecursive returns a boolean if a field has been set.
func (o *ConfigCopyAuthZone) HasRecursive() bool {
	if o != nil && !IsNil(o.Recursive) {
		return true
	}

	return false
}

// SetRecursive gets a reference to the given bool and assigns it to the Recursive field.
func (o *ConfigCopyAuthZone) SetRecursive(v bool) {
	o.Recursive = &v
}

// GetSkipOnError returns the SkipOnError field value if set, zero value otherwise.
func (o *ConfigCopyAuthZone) GetSkipOnError() bool {
	if o == nil || IsNil(o.SkipOnError) {
		var ret bool
		return ret
	}
	return *o.SkipOnError
}

// GetSkipOnErrorOk returns a tuple with the SkipOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigCopyAuthZone) GetSkipOnErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipOnError) {
		return nil, false
	}
	return o.SkipOnError, true
}

// HasSkipOnError returns a boolean if a field has been set.
func (o *ConfigCopyAuthZone) HasSkipOnError() bool {
	if o != nil && !IsNil(o.SkipOnError) {
		return true
	}

	return false
}

// SetSkipOnError gets a reference to the given bool and assigns it to the SkipOnError field.
func (o *ConfigCopyAuthZone) SetSkipOnError(v bool) {
	o.SkipOnError = &v
}

// GetTargetView returns the TargetView field value
func (o *ConfigCopyAuthZone) GetTargetView() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetView
}

// GetTargetViewOk returns a tuple with the TargetView field value
// and a boolean to check if the value has been set.
func (o *ConfigCopyAuthZone) GetTargetViewOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetView, true
}

// SetTargetView sets field value
func (o *ConfigCopyAuthZone) SetTargetView(v string) {
	o.TargetView = v
}

func (o ConfigCopyAuthZone) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigCopyAuthZone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.ExternalPrimaries) {
		toSerialize["external_primaries"] = o.ExternalPrimaries
	}
	if !IsNil(o.ExternalSecondaries) {
		toSerialize["external_secondaries"] = o.ExternalSecondaries
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InternalSecondaries) {
		toSerialize["internal_secondaries"] = o.InternalSecondaries
	}
	if !IsNil(o.Nsgs) {
		toSerialize["nsgs"] = o.Nsgs
	}
	if !IsNil(o.Recursive) {
		toSerialize["recursive"] = o.Recursive
	}
	if !IsNil(o.SkipOnError) {
		toSerialize["skip_on_error"] = o.SkipOnError
	}
	toSerialize["target_view"] = o.TargetView
	return toSerialize, nil
}

type NullableConfigCopyAuthZone struct {
	value *ConfigCopyAuthZone
	isSet bool
}

func (v NullableConfigCopyAuthZone) Get() *ConfigCopyAuthZone {
	return v.value
}

func (v *NullableConfigCopyAuthZone) Set(val *ConfigCopyAuthZone) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigCopyAuthZone) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigCopyAuthZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigCopyAuthZone(val *ConfigCopyAuthZone) *NullableConfigCopyAuthZone {
	return &NullableConfigCopyAuthZone{value: val, isSet: true}
}

func (v NullableConfigCopyAuthZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigCopyAuthZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
