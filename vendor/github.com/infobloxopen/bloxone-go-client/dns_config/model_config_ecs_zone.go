/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_config

import (
	"encoding/json"
)

// checks if the ConfigECSZone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigECSZone{}

// ConfigECSZone EDNS Client Subnet zone.
type ConfigECSZone struct {
	// Access control for zone.  Allowed values: * _allow_, * _deny_.
	Access string `json:"access"`
	// Zone FQDN.
	Fqdn string `json:"fqdn"`
	// Zone FQDN in punycode.
	ProtocolFqdn *string `json:"protocol_fqdn,omitempty"`
}

// NewConfigECSZone instantiates a new ConfigECSZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigECSZone(access string, fqdn string) *ConfigECSZone {
	this := ConfigECSZone{}
	this.Access = access
	this.Fqdn = fqdn
	return &this
}

// NewConfigECSZoneWithDefaults instantiates a new ConfigECSZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigECSZoneWithDefaults() *ConfigECSZone {
	this := ConfigECSZone{}
	return &this
}

// GetAccess returns the Access field value
func (o *ConfigECSZone) GetAccess() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Access
}

// GetAccessOk returns a tuple with the Access field value
// and a boolean to check if the value has been set.
func (o *ConfigECSZone) GetAccessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Access, true
}

// SetAccess sets field value
func (o *ConfigECSZone) SetAccess(v string) {
	o.Access = v
}

// GetFqdn returns the Fqdn field value
func (o *ConfigECSZone) GetFqdn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value
// and a boolean to check if the value has been set.
func (o *ConfigECSZone) GetFqdnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fqdn, true
}

// SetFqdn sets field value
func (o *ConfigECSZone) SetFqdn(v string) {
	o.Fqdn = v
}

// GetProtocolFqdn returns the ProtocolFqdn field value if set, zero value otherwise.
func (o *ConfigECSZone) GetProtocolFqdn() string {
	if o == nil || IsNil(o.ProtocolFqdn) {
		var ret string
		return ret
	}
	return *o.ProtocolFqdn
}

// GetProtocolFqdnOk returns a tuple with the ProtocolFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigECSZone) GetProtocolFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.ProtocolFqdn) {
		return nil, false
	}
	return o.ProtocolFqdn, true
}

// HasProtocolFqdn returns a boolean if a field has been set.
func (o *ConfigECSZone) HasProtocolFqdn() bool {
	if o != nil && !IsNil(o.ProtocolFqdn) {
		return true
	}

	return false
}

// SetProtocolFqdn gets a reference to the given string and assigns it to the ProtocolFqdn field.
func (o *ConfigECSZone) SetProtocolFqdn(v string) {
	o.ProtocolFqdn = &v
}

func (o ConfigECSZone) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigECSZone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access"] = o.Access
	toSerialize["fqdn"] = o.Fqdn
	if !IsNil(o.ProtocolFqdn) {
		toSerialize["protocol_fqdn"] = o.ProtocolFqdn
	}
	return toSerialize, nil
}

type NullableConfigECSZone struct {
	value *ConfigECSZone
	isSet bool
}

func (v NullableConfigECSZone) Get() *ConfigECSZone {
	return v.value
}

func (v *NullableConfigECSZone) Set(val *ConfigECSZone) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigECSZone) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigECSZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigECSZone(val *ConfigECSZone) *NullableConfigECSZone {
	return &NullableConfigECSZone{value: val, isSet: true}
}

func (v NullableConfigECSZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigECSZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
