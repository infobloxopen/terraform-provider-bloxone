/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_config

import (
	"encoding/json"
)

// checks if the ConfigListViewResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigListViewResponse{}

// ConfigListViewResponse The View object list response format.
type ConfigListViewResponse struct {
	// List of View objects.
	Results []ConfigView `json:"results,omitempty"`
}

// NewConfigListViewResponse instantiates a new ConfigListViewResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigListViewResponse() *ConfigListViewResponse {
	this := ConfigListViewResponse{}
	return &this
}

// NewConfigListViewResponseWithDefaults instantiates a new ConfigListViewResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigListViewResponseWithDefaults() *ConfigListViewResponse {
	this := ConfigListViewResponse{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *ConfigListViewResponse) GetResults() []ConfigView {
	if o == nil || IsNil(o.Results) {
		var ret []ConfigView
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigListViewResponse) GetResultsOk() ([]ConfigView, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *ConfigListViewResponse) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []ConfigView and assigns it to the Results field.
func (o *ConfigListViewResponse) SetResults(v []ConfigView) {
	o.Results = v
}

func (o ConfigListViewResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigListViewResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullableConfigListViewResponse struct {
	value *ConfigListViewResponse
	isSet bool
}

func (v NullableConfigListViewResponse) Get() *ConfigListViewResponse {
	return v.value
}

func (v *NullableConfigListViewResponse) Set(val *ConfigListViewResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigListViewResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigListViewResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigListViewResponse(val *ConfigListViewResponse) *NullableConfigListViewResponse {
	return &NullableConfigListViewResponse{value: val, isSet: true}
}

func (v NullableConfigListViewResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigListViewResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
