/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_config

import (
	"encoding/json"
)

// checks if the ConfigTrustAnchor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigTrustAnchor{}

// ConfigTrustAnchor DNSSEC trust anchor.
type ConfigTrustAnchor struct {
	Algorithm int64 `json:"algorithm"`
	// Zone FQDN in punycode.
	ProtocolZone *string `json:"protocol_zone,omitempty"`
	// DNSSEC key data. Non-empty, valid base64 string.
	PublicKey string `json:"public_key"`
	// Optional. Secure Entry Point flag.  Defaults to _true_.
	Sep *bool `json:"sep,omitempty"`
	// Zone FQDN.
	Zone string `json:"zone"`
}

// NewConfigTrustAnchor instantiates a new ConfigTrustAnchor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigTrustAnchor(algorithm int64, publicKey string, zone string) *ConfigTrustAnchor {
	this := ConfigTrustAnchor{}
	this.Algorithm = algorithm
	this.PublicKey = publicKey
	this.Zone = zone
	return &this
}

// NewConfigTrustAnchorWithDefaults instantiates a new ConfigTrustAnchor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigTrustAnchorWithDefaults() *ConfigTrustAnchor {
	this := ConfigTrustAnchor{}
	return &this
}

// GetAlgorithm returns the Algorithm field value
func (o *ConfigTrustAnchor) GetAlgorithm() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value
// and a boolean to check if the value has been set.
func (o *ConfigTrustAnchor) GetAlgorithmOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Algorithm, true
}

// SetAlgorithm sets field value
func (o *ConfigTrustAnchor) SetAlgorithm(v int64) {
	o.Algorithm = v
}

// GetProtocolZone returns the ProtocolZone field value if set, zero value otherwise.
func (o *ConfigTrustAnchor) GetProtocolZone() string {
	if o == nil || IsNil(o.ProtocolZone) {
		var ret string
		return ret
	}
	return *o.ProtocolZone
}

// GetProtocolZoneOk returns a tuple with the ProtocolZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTrustAnchor) GetProtocolZoneOk() (*string, bool) {
	if o == nil || IsNil(o.ProtocolZone) {
		return nil, false
	}
	return o.ProtocolZone, true
}

// HasProtocolZone returns a boolean if a field has been set.
func (o *ConfigTrustAnchor) HasProtocolZone() bool {
	if o != nil && !IsNil(o.ProtocolZone) {
		return true
	}

	return false
}

// SetProtocolZone gets a reference to the given string and assigns it to the ProtocolZone field.
func (o *ConfigTrustAnchor) SetProtocolZone(v string) {
	o.ProtocolZone = &v
}

// GetPublicKey returns the PublicKey field value
func (o *ConfigTrustAnchor) GetPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *ConfigTrustAnchor) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *ConfigTrustAnchor) SetPublicKey(v string) {
	o.PublicKey = v
}

// GetSep returns the Sep field value if set, zero value otherwise.
func (o *ConfigTrustAnchor) GetSep() bool {
	if o == nil || IsNil(o.Sep) {
		var ret bool
		return ret
	}
	return *o.Sep
}

// GetSepOk returns a tuple with the Sep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTrustAnchor) GetSepOk() (*bool, bool) {
	if o == nil || IsNil(o.Sep) {
		return nil, false
	}
	return o.Sep, true
}

// HasSep returns a boolean if a field has been set.
func (o *ConfigTrustAnchor) HasSep() bool {
	if o != nil && !IsNil(o.Sep) {
		return true
	}

	return false
}

// SetSep gets a reference to the given bool and assigns it to the Sep field.
func (o *ConfigTrustAnchor) SetSep(v bool) {
	o.Sep = &v
}

// GetZone returns the Zone field value
func (o *ConfigTrustAnchor) GetZone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Zone
}

// GetZoneOk returns a tuple with the Zone field value
// and a boolean to check if the value has been set.
func (o *ConfigTrustAnchor) GetZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Zone, true
}

// SetZone sets field value
func (o *ConfigTrustAnchor) SetZone(v string) {
	o.Zone = v
}

func (o ConfigTrustAnchor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigTrustAnchor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["algorithm"] = o.Algorithm
	if !IsNil(o.ProtocolZone) {
		toSerialize["protocol_zone"] = o.ProtocolZone
	}
	toSerialize["public_key"] = o.PublicKey
	if !IsNil(o.Sep) {
		toSerialize["sep"] = o.Sep
	}
	toSerialize["zone"] = o.Zone
	return toSerialize, nil
}

type NullableConfigTrustAnchor struct {
	value *ConfigTrustAnchor
	isSet bool
}

func (v NullableConfigTrustAnchor) Get() *ConfigTrustAnchor {
	return v.value
}

func (v *NullableConfigTrustAnchor) Set(val *ConfigTrustAnchor) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigTrustAnchor) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigTrustAnchor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigTrustAnchor(val *ConfigTrustAnchor) *NullableConfigTrustAnchor {
	return &NullableConfigTrustAnchor{value: val, isSet: true}
}

func (v NullableConfigTrustAnchor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigTrustAnchor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
