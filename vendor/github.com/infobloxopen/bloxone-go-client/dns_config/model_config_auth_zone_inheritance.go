/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_config

import (
	"encoding/json"
)

// checks if the ConfigAuthZoneInheritance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigAuthZoneInheritance{}

// ConfigAuthZoneInheritance struct for ConfigAuthZoneInheritance
type ConfigAuthZoneInheritance struct {
	GssTsigEnabled           *Inheritance2InheritedBool    `json:"gss_tsig_enabled,omitempty"`
	Notify                   *Inheritance2InheritedBool    `json:"notify,omitempty"`
	QueryAcl                 *ConfigInheritedACLItems      `json:"query_acl,omitempty"`
	TransferAcl              *ConfigInheritedACLItems      `json:"transfer_acl,omitempty"`
	UpdateAcl                *ConfigInheritedACLItems      `json:"update_acl,omitempty"`
	UseForwardersForSubzones *Inheritance2InheritedBool    `json:"use_forwarders_for_subzones,omitempty"`
	ZoneAuthority            *ConfigInheritedZoneAuthority `json:"zone_authority,omitempty"`
}

// NewConfigAuthZoneInheritance instantiates a new ConfigAuthZoneInheritance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigAuthZoneInheritance() *ConfigAuthZoneInheritance {
	this := ConfigAuthZoneInheritance{}
	return &this
}

// NewConfigAuthZoneInheritanceWithDefaults instantiates a new ConfigAuthZoneInheritance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigAuthZoneInheritanceWithDefaults() *ConfigAuthZoneInheritance {
	this := ConfigAuthZoneInheritance{}
	return &this
}

// GetGssTsigEnabled returns the GssTsigEnabled field value if set, zero value otherwise.
func (o *ConfigAuthZoneInheritance) GetGssTsigEnabled() Inheritance2InheritedBool {
	if o == nil || IsNil(o.GssTsigEnabled) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.GssTsigEnabled
}

// GetGssTsigEnabledOk returns a tuple with the GssTsigEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigAuthZoneInheritance) GetGssTsigEnabledOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.GssTsigEnabled) {
		return nil, false
	}
	return o.GssTsigEnabled, true
}

// HasGssTsigEnabled returns a boolean if a field has been set.
func (o *ConfigAuthZoneInheritance) HasGssTsigEnabled() bool {
	if o != nil && !IsNil(o.GssTsigEnabled) {
		return true
	}

	return false
}

// SetGssTsigEnabled gets a reference to the given Inheritance2InheritedBool and assigns it to the GssTsigEnabled field.
func (o *ConfigAuthZoneInheritance) SetGssTsigEnabled(v Inheritance2InheritedBool) {
	o.GssTsigEnabled = &v
}

// GetNotify returns the Notify field value if set, zero value otherwise.
func (o *ConfigAuthZoneInheritance) GetNotify() Inheritance2InheritedBool {
	if o == nil || IsNil(o.Notify) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.Notify
}

// GetNotifyOk returns a tuple with the Notify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigAuthZoneInheritance) GetNotifyOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.Notify) {
		return nil, false
	}
	return o.Notify, true
}

// HasNotify returns a boolean if a field has been set.
func (o *ConfigAuthZoneInheritance) HasNotify() bool {
	if o != nil && !IsNil(o.Notify) {
		return true
	}

	return false
}

// SetNotify gets a reference to the given Inheritance2InheritedBool and assigns it to the Notify field.
func (o *ConfigAuthZoneInheritance) SetNotify(v Inheritance2InheritedBool) {
	o.Notify = &v
}

// GetQueryAcl returns the QueryAcl field value if set, zero value otherwise.
func (o *ConfigAuthZoneInheritance) GetQueryAcl() ConfigInheritedACLItems {
	if o == nil || IsNil(o.QueryAcl) {
		var ret ConfigInheritedACLItems
		return ret
	}
	return *o.QueryAcl
}

// GetQueryAclOk returns a tuple with the QueryAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigAuthZoneInheritance) GetQueryAclOk() (*ConfigInheritedACLItems, bool) {
	if o == nil || IsNil(o.QueryAcl) {
		return nil, false
	}
	return o.QueryAcl, true
}

// HasQueryAcl returns a boolean if a field has been set.
func (o *ConfigAuthZoneInheritance) HasQueryAcl() bool {
	if o != nil && !IsNil(o.QueryAcl) {
		return true
	}

	return false
}

// SetQueryAcl gets a reference to the given ConfigInheritedACLItems and assigns it to the QueryAcl field.
func (o *ConfigAuthZoneInheritance) SetQueryAcl(v ConfigInheritedACLItems) {
	o.QueryAcl = &v
}

// GetTransferAcl returns the TransferAcl field value if set, zero value otherwise.
func (o *ConfigAuthZoneInheritance) GetTransferAcl() ConfigInheritedACLItems {
	if o == nil || IsNil(o.TransferAcl) {
		var ret ConfigInheritedACLItems
		return ret
	}
	return *o.TransferAcl
}

// GetTransferAclOk returns a tuple with the TransferAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigAuthZoneInheritance) GetTransferAclOk() (*ConfigInheritedACLItems, bool) {
	if o == nil || IsNil(o.TransferAcl) {
		return nil, false
	}
	return o.TransferAcl, true
}

// HasTransferAcl returns a boolean if a field has been set.
func (o *ConfigAuthZoneInheritance) HasTransferAcl() bool {
	if o != nil && !IsNil(o.TransferAcl) {
		return true
	}

	return false
}

// SetTransferAcl gets a reference to the given ConfigInheritedACLItems and assigns it to the TransferAcl field.
func (o *ConfigAuthZoneInheritance) SetTransferAcl(v ConfigInheritedACLItems) {
	o.TransferAcl = &v
}

// GetUpdateAcl returns the UpdateAcl field value if set, zero value otherwise.
func (o *ConfigAuthZoneInheritance) GetUpdateAcl() ConfigInheritedACLItems {
	if o == nil || IsNil(o.UpdateAcl) {
		var ret ConfigInheritedACLItems
		return ret
	}
	return *o.UpdateAcl
}

// GetUpdateAclOk returns a tuple with the UpdateAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigAuthZoneInheritance) GetUpdateAclOk() (*ConfigInheritedACLItems, bool) {
	if o == nil || IsNil(o.UpdateAcl) {
		return nil, false
	}
	return o.UpdateAcl, true
}

// HasUpdateAcl returns a boolean if a field has been set.
func (o *ConfigAuthZoneInheritance) HasUpdateAcl() bool {
	if o != nil && !IsNil(o.UpdateAcl) {
		return true
	}

	return false
}

// SetUpdateAcl gets a reference to the given ConfigInheritedACLItems and assigns it to the UpdateAcl field.
func (o *ConfigAuthZoneInheritance) SetUpdateAcl(v ConfigInheritedACLItems) {
	o.UpdateAcl = &v
}

// GetUseForwardersForSubzones returns the UseForwardersForSubzones field value if set, zero value otherwise.
func (o *ConfigAuthZoneInheritance) GetUseForwardersForSubzones() Inheritance2InheritedBool {
	if o == nil || IsNil(o.UseForwardersForSubzones) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.UseForwardersForSubzones
}

// GetUseForwardersForSubzonesOk returns a tuple with the UseForwardersForSubzones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigAuthZoneInheritance) GetUseForwardersForSubzonesOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.UseForwardersForSubzones) {
		return nil, false
	}
	return o.UseForwardersForSubzones, true
}

// HasUseForwardersForSubzones returns a boolean if a field has been set.
func (o *ConfigAuthZoneInheritance) HasUseForwardersForSubzones() bool {
	if o != nil && !IsNil(o.UseForwardersForSubzones) {
		return true
	}

	return false
}

// SetUseForwardersForSubzones gets a reference to the given Inheritance2InheritedBool and assigns it to the UseForwardersForSubzones field.
func (o *ConfigAuthZoneInheritance) SetUseForwardersForSubzones(v Inheritance2InheritedBool) {
	o.UseForwardersForSubzones = &v
}

// GetZoneAuthority returns the ZoneAuthority field value if set, zero value otherwise.
func (o *ConfigAuthZoneInheritance) GetZoneAuthority() ConfigInheritedZoneAuthority {
	if o == nil || IsNil(o.ZoneAuthority) {
		var ret ConfigInheritedZoneAuthority
		return ret
	}
	return *o.ZoneAuthority
}

// GetZoneAuthorityOk returns a tuple with the ZoneAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigAuthZoneInheritance) GetZoneAuthorityOk() (*ConfigInheritedZoneAuthority, bool) {
	if o == nil || IsNil(o.ZoneAuthority) {
		return nil, false
	}
	return o.ZoneAuthority, true
}

// HasZoneAuthority returns a boolean if a field has been set.
func (o *ConfigAuthZoneInheritance) HasZoneAuthority() bool {
	if o != nil && !IsNil(o.ZoneAuthority) {
		return true
	}

	return false
}

// SetZoneAuthority gets a reference to the given ConfigInheritedZoneAuthority and assigns it to the ZoneAuthority field.
func (o *ConfigAuthZoneInheritance) SetZoneAuthority(v ConfigInheritedZoneAuthority) {
	o.ZoneAuthority = &v
}

func (o ConfigAuthZoneInheritance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigAuthZoneInheritance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GssTsigEnabled) {
		toSerialize["gss_tsig_enabled"] = o.GssTsigEnabled
	}
	if !IsNil(o.Notify) {
		toSerialize["notify"] = o.Notify
	}
	if !IsNil(o.QueryAcl) {
		toSerialize["query_acl"] = o.QueryAcl
	}
	if !IsNil(o.TransferAcl) {
		toSerialize["transfer_acl"] = o.TransferAcl
	}
	if !IsNil(o.UpdateAcl) {
		toSerialize["update_acl"] = o.UpdateAcl
	}
	if !IsNil(o.UseForwardersForSubzones) {
		toSerialize["use_forwarders_for_subzones"] = o.UseForwardersForSubzones
	}
	if !IsNil(o.ZoneAuthority) {
		toSerialize["zone_authority"] = o.ZoneAuthority
	}
	return toSerialize, nil
}

type NullableConfigAuthZoneInheritance struct {
	value *ConfigAuthZoneInheritance
	isSet bool
}

func (v NullableConfigAuthZoneInheritance) Get() *ConfigAuthZoneInheritance {
	return v.value
}

func (v *NullableConfigAuthZoneInheritance) Set(val *ConfigAuthZoneInheritance) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigAuthZoneInheritance) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigAuthZoneInheritance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigAuthZoneInheritance(val *ConfigAuthZoneInheritance) *NullableConfigAuthZoneInheritance {
	return &NullableConfigAuthZoneInheritance{value: val, isSet: true}
}

func (v NullableConfigAuthZoneInheritance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigAuthZoneInheritance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
