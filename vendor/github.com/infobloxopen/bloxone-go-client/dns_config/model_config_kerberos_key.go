/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_config

import (
	"encoding/json"
)

// checks if the ConfigKerberosKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigKerberosKey{}

// ConfigKerberosKey A __KerberosKey__ object (_keys/kerberos_) represents a Kerberos key.
type ConfigKerberosKey struct {
	// Encryption algorithm of the key in accordance with RFC 3961.
	Algorithm *string `json:"algorithm,omitempty"`
	// Kerberos realm of the principal.
	Domain *string `json:"domain,omitempty"`
	// The resource identifier.
	Key string `json:"key"`
	// Kerberos principal associated with key.
	Principal *string `json:"principal,omitempty"`
	// Upload time for the key.
	UploadedAt *string `json:"uploaded_at,omitempty"`
	// The version number (KVNO) of the key.
	Version *int64 `json:"version,omitempty"`
}

// NewConfigKerberosKey instantiates a new ConfigKerberosKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigKerberosKey(key string) *ConfigKerberosKey {
	this := ConfigKerberosKey{}
	this.Key = key
	return &this
}

// NewConfigKerberosKeyWithDefaults instantiates a new ConfigKerberosKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigKerberosKeyWithDefaults() *ConfigKerberosKey {
	this := ConfigKerberosKey{}
	return &this
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *ConfigKerberosKey) GetAlgorithm() string {
	if o == nil || IsNil(o.Algorithm) {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigKerberosKey) GetAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.Algorithm) {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *ConfigKerberosKey) HasAlgorithm() bool {
	if o != nil && !IsNil(o.Algorithm) {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *ConfigKerberosKey) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *ConfigKerberosKey) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigKerberosKey) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *ConfigKerberosKey) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *ConfigKerberosKey) SetDomain(v string) {
	o.Domain = &v
}

// GetKey returns the Key field value
func (o *ConfigKerberosKey) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ConfigKerberosKey) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ConfigKerberosKey) SetKey(v string) {
	o.Key = v
}

// GetPrincipal returns the Principal field value if set, zero value otherwise.
func (o *ConfigKerberosKey) GetPrincipal() string {
	if o == nil || IsNil(o.Principal) {
		var ret string
		return ret
	}
	return *o.Principal
}

// GetPrincipalOk returns a tuple with the Principal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigKerberosKey) GetPrincipalOk() (*string, bool) {
	if o == nil || IsNil(o.Principal) {
		return nil, false
	}
	return o.Principal, true
}

// HasPrincipal returns a boolean if a field has been set.
func (o *ConfigKerberosKey) HasPrincipal() bool {
	if o != nil && !IsNil(o.Principal) {
		return true
	}

	return false
}

// SetPrincipal gets a reference to the given string and assigns it to the Principal field.
func (o *ConfigKerberosKey) SetPrincipal(v string) {
	o.Principal = &v
}

// GetUploadedAt returns the UploadedAt field value if set, zero value otherwise.
func (o *ConfigKerberosKey) GetUploadedAt() string {
	if o == nil || IsNil(o.UploadedAt) {
		var ret string
		return ret
	}
	return *o.UploadedAt
}

// GetUploadedAtOk returns a tuple with the UploadedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigKerberosKey) GetUploadedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UploadedAt) {
		return nil, false
	}
	return o.UploadedAt, true
}

// HasUploadedAt returns a boolean if a field has been set.
func (o *ConfigKerberosKey) HasUploadedAt() bool {
	if o != nil && !IsNil(o.UploadedAt) {
		return true
	}

	return false
}

// SetUploadedAt gets a reference to the given string and assigns it to the UploadedAt field.
func (o *ConfigKerberosKey) SetUploadedAt(v string) {
	o.UploadedAt = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ConfigKerberosKey) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigKerberosKey) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ConfigKerberosKey) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *ConfigKerberosKey) SetVersion(v int64) {
	o.Version = &v
}

func (o ConfigKerberosKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigKerberosKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Algorithm) {
		toSerialize["algorithm"] = o.Algorithm
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	toSerialize["key"] = o.Key
	if !IsNil(o.Principal) {
		toSerialize["principal"] = o.Principal
	}
	if !IsNil(o.UploadedAt) {
		toSerialize["uploaded_at"] = o.UploadedAt
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableConfigKerberosKey struct {
	value *ConfigKerberosKey
	isSet bool
}

func (v NullableConfigKerberosKey) Get() *ConfigKerberosKey {
	return v.value
}

func (v *NullableConfigKerberosKey) Set(val *ConfigKerberosKey) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigKerberosKey) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigKerberosKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigKerberosKey(val *ConfigKerberosKey) *NullableConfigKerberosKey {
	return &NullableConfigKerberosKey{value: val, isSet: true}
}

func (v NullableConfigKerberosKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigKerberosKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
