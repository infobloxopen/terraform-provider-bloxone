/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_config

import (
	"encoding/json"
)

// checks if the ConfigECSBlock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigECSBlock{}

// ConfigECSBlock Block for fields: _ecs_enabled_, _ecs_forwarding_, _ecs_prefix_v4_, _ecs_prefix_v6_, _ecs_zones_.
type ConfigECSBlock struct {
	// Optional. Field config for _ecs_enabled_ field.
	EcsEnabled *bool `json:"ecs_enabled,omitempty"`
	// Optional. Field config for _ecs_forwarding_ field.
	EcsForwarding *bool `json:"ecs_forwarding,omitempty"`
	// Optional. Field config for _ecs_prefix_v4_ field.
	EcsPrefixV4 *int64 `json:"ecs_prefix_v4,omitempty"`
	// Optional. Field config for _ecs_prefix_v6_ field.
	EcsPrefixV6 *int64 `json:"ecs_prefix_v6,omitempty"`
	// Optional. Field config for _ecs_zones_ field.
	EcsZones []ConfigECSZone `json:"ecs_zones,omitempty"`
}

// NewConfigECSBlock instantiates a new ConfigECSBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigECSBlock() *ConfigECSBlock {
	this := ConfigECSBlock{}
	return &this
}

// NewConfigECSBlockWithDefaults instantiates a new ConfigECSBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigECSBlockWithDefaults() *ConfigECSBlock {
	this := ConfigECSBlock{}
	return &this
}

// GetEcsEnabled returns the EcsEnabled field value if set, zero value otherwise.
func (o *ConfigECSBlock) GetEcsEnabled() bool {
	if o == nil || IsNil(o.EcsEnabled) {
		var ret bool
		return ret
	}
	return *o.EcsEnabled
}

// GetEcsEnabledOk returns a tuple with the EcsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigECSBlock) GetEcsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EcsEnabled) {
		return nil, false
	}
	return o.EcsEnabled, true
}

// HasEcsEnabled returns a boolean if a field has been set.
func (o *ConfigECSBlock) HasEcsEnabled() bool {
	if o != nil && !IsNil(o.EcsEnabled) {
		return true
	}

	return false
}

// SetEcsEnabled gets a reference to the given bool and assigns it to the EcsEnabled field.
func (o *ConfigECSBlock) SetEcsEnabled(v bool) {
	o.EcsEnabled = &v
}

// GetEcsForwarding returns the EcsForwarding field value if set, zero value otherwise.
func (o *ConfigECSBlock) GetEcsForwarding() bool {
	if o == nil || IsNil(o.EcsForwarding) {
		var ret bool
		return ret
	}
	return *o.EcsForwarding
}

// GetEcsForwardingOk returns a tuple with the EcsForwarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigECSBlock) GetEcsForwardingOk() (*bool, bool) {
	if o == nil || IsNil(o.EcsForwarding) {
		return nil, false
	}
	return o.EcsForwarding, true
}

// HasEcsForwarding returns a boolean if a field has been set.
func (o *ConfigECSBlock) HasEcsForwarding() bool {
	if o != nil && !IsNil(o.EcsForwarding) {
		return true
	}

	return false
}

// SetEcsForwarding gets a reference to the given bool and assigns it to the EcsForwarding field.
func (o *ConfigECSBlock) SetEcsForwarding(v bool) {
	o.EcsForwarding = &v
}

// GetEcsPrefixV4 returns the EcsPrefixV4 field value if set, zero value otherwise.
func (o *ConfigECSBlock) GetEcsPrefixV4() int64 {
	if o == nil || IsNil(o.EcsPrefixV4) {
		var ret int64
		return ret
	}
	return *o.EcsPrefixV4
}

// GetEcsPrefixV4Ok returns a tuple with the EcsPrefixV4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigECSBlock) GetEcsPrefixV4Ok() (*int64, bool) {
	if o == nil || IsNil(o.EcsPrefixV4) {
		return nil, false
	}
	return o.EcsPrefixV4, true
}

// HasEcsPrefixV4 returns a boolean if a field has been set.
func (o *ConfigECSBlock) HasEcsPrefixV4() bool {
	if o != nil && !IsNil(o.EcsPrefixV4) {
		return true
	}

	return false
}

// SetEcsPrefixV4 gets a reference to the given int64 and assigns it to the EcsPrefixV4 field.
func (o *ConfigECSBlock) SetEcsPrefixV4(v int64) {
	o.EcsPrefixV4 = &v
}

// GetEcsPrefixV6 returns the EcsPrefixV6 field value if set, zero value otherwise.
func (o *ConfigECSBlock) GetEcsPrefixV6() int64 {
	if o == nil || IsNil(o.EcsPrefixV6) {
		var ret int64
		return ret
	}
	return *o.EcsPrefixV6
}

// GetEcsPrefixV6Ok returns a tuple with the EcsPrefixV6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigECSBlock) GetEcsPrefixV6Ok() (*int64, bool) {
	if o == nil || IsNil(o.EcsPrefixV6) {
		return nil, false
	}
	return o.EcsPrefixV6, true
}

// HasEcsPrefixV6 returns a boolean if a field has been set.
func (o *ConfigECSBlock) HasEcsPrefixV6() bool {
	if o != nil && !IsNil(o.EcsPrefixV6) {
		return true
	}

	return false
}

// SetEcsPrefixV6 gets a reference to the given int64 and assigns it to the EcsPrefixV6 field.
func (o *ConfigECSBlock) SetEcsPrefixV6(v int64) {
	o.EcsPrefixV6 = &v
}

// GetEcsZones returns the EcsZones field value if set, zero value otherwise.
func (o *ConfigECSBlock) GetEcsZones() []ConfigECSZone {
	if o == nil || IsNil(o.EcsZones) {
		var ret []ConfigECSZone
		return ret
	}
	return o.EcsZones
}

// GetEcsZonesOk returns a tuple with the EcsZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigECSBlock) GetEcsZonesOk() ([]ConfigECSZone, bool) {
	if o == nil || IsNil(o.EcsZones) {
		return nil, false
	}
	return o.EcsZones, true
}

// HasEcsZones returns a boolean if a field has been set.
func (o *ConfigECSBlock) HasEcsZones() bool {
	if o != nil && !IsNil(o.EcsZones) {
		return true
	}

	return false
}

// SetEcsZones gets a reference to the given []ConfigECSZone and assigns it to the EcsZones field.
func (o *ConfigECSBlock) SetEcsZones(v []ConfigECSZone) {
	o.EcsZones = v
}

func (o ConfigECSBlock) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigECSBlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EcsEnabled) {
		toSerialize["ecs_enabled"] = o.EcsEnabled
	}
	if !IsNil(o.EcsForwarding) {
		toSerialize["ecs_forwarding"] = o.EcsForwarding
	}
	if !IsNil(o.EcsPrefixV4) {
		toSerialize["ecs_prefix_v4"] = o.EcsPrefixV4
	}
	if !IsNil(o.EcsPrefixV6) {
		toSerialize["ecs_prefix_v6"] = o.EcsPrefixV6
	}
	if !IsNil(o.EcsZones) {
		toSerialize["ecs_zones"] = o.EcsZones
	}
	return toSerialize, nil
}

type NullableConfigECSBlock struct {
	value *ConfigECSBlock
	isSet bool
}

func (v NullableConfigECSBlock) Get() *ConfigECSBlock {
	return v.value
}

func (v *NullableConfigECSBlock) Set(val *ConfigECSBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigECSBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigECSBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigECSBlock(val *ConfigECSBlock) *NullableConfigECSBlock {
	return &NullableConfigECSBlock{value: val, isSet: true}
}

func (v NullableConfigECSBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigECSBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
