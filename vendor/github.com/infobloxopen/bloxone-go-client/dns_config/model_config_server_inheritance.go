/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_config

import (
	"encoding/json"
)

// checks if the ConfigServerInheritance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigServerInheritance{}

// ConfigServerInheritance Inheritance configuration specifies how and which fields _Server_ object inherits from _Global_ parent.
type ConfigServerInheritance struct {
	AddEdnsOptionInOutgoingQuery      *Inheritance2InheritedBool            `json:"add_edns_option_in_outgoing_query,omitempty"`
	CustomRootNsBlock                 *ConfigInheritedCustomRootNSBlock     `json:"custom_root_ns_block,omitempty"`
	DnssecValidationBlock             *ConfigInheritedDNSSECValidationBlock `json:"dnssec_validation_block,omitempty"`
	EcsBlock                          *ConfigInheritedECSBlock              `json:"ecs_block,omitempty"`
	FilterAaaaAcl                     *ConfigInheritedACLItems              `json:"filter_aaaa_acl,omitempty"`
	FilterAaaaOnV4                    *Inheritance2InheritedString          `json:"filter_aaaa_on_v4,omitempty"`
	ForwardersBlock                   *ConfigInheritedForwardersBlock       `json:"forwarders_block,omitempty"`
	GssTsigEnabled                    *Inheritance2InheritedBool            `json:"gss_tsig_enabled,omitempty"`
	KerberosKeys                      *ConfigInheritedKerberosKeys          `json:"kerberos_keys,omitempty"`
	LameTtl                           *Inheritance2InheritedUInt32          `json:"lame_ttl,omitempty"`
	LogQueryResponse                  *Inheritance2InheritedBool            `json:"log_query_response,omitempty"`
	MatchRecursiveOnly                *Inheritance2InheritedBool            `json:"match_recursive_only,omitempty"`
	MaxCacheTtl                       *Inheritance2InheritedUInt32          `json:"max_cache_ttl,omitempty"`
	MaxNegativeTtl                    *Inheritance2InheritedUInt32          `json:"max_negative_ttl,omitempty"`
	MinimalResponses                  *Inheritance2InheritedBool            `json:"minimal_responses,omitempty"`
	Notify                            *Inheritance2InheritedBool            `json:"notify,omitempty"`
	QueryAcl                          *ConfigInheritedACLItems              `json:"query_acl,omitempty"`
	QueryPort                         *Inheritance2InheritedUInt32          `json:"query_port,omitempty"`
	RecursionAcl                      *ConfigInheritedACLItems              `json:"recursion_acl,omitempty"`
	RecursionEnabled                  *Inheritance2InheritedBool            `json:"recursion_enabled,omitempty"`
	RecursiveClients                  *Inheritance2InheritedUInt32          `json:"recursive_clients,omitempty"`
	ResolverQueryTimeout              *Inheritance2InheritedUInt32          `json:"resolver_query_timeout,omitempty"`
	SecondaryAxfrQueryLimit           *Inheritance2InheritedUInt32          `json:"secondary_axfr_query_limit,omitempty"`
	SecondarySoaQueryLimit            *Inheritance2InheritedUInt32          `json:"secondary_soa_query_limit,omitempty"`
	SortList                          *ConfigInheritedSortListItems         `json:"sort_list,omitempty"`
	SynthesizeAddressRecordsFromHttps *Inheritance2InheritedBool            `json:"synthesize_address_records_from_https,omitempty"`
	TransferAcl                       *ConfigInheritedACLItems              `json:"transfer_acl,omitempty"`
	UpdateAcl                         *ConfigInheritedACLItems              `json:"update_acl,omitempty"`
	UseForwardersForSubzones          *Inheritance2InheritedBool            `json:"use_forwarders_for_subzones,omitempty"`
}

// NewConfigServerInheritance instantiates a new ConfigServerInheritance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigServerInheritance() *ConfigServerInheritance {
	this := ConfigServerInheritance{}
	return &this
}

// NewConfigServerInheritanceWithDefaults instantiates a new ConfigServerInheritance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigServerInheritanceWithDefaults() *ConfigServerInheritance {
	this := ConfigServerInheritance{}
	return &this
}

// GetAddEdnsOptionInOutgoingQuery returns the AddEdnsOptionInOutgoingQuery field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetAddEdnsOptionInOutgoingQuery() Inheritance2InheritedBool {
	if o == nil || IsNil(o.AddEdnsOptionInOutgoingQuery) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.AddEdnsOptionInOutgoingQuery
}

// GetAddEdnsOptionInOutgoingQueryOk returns a tuple with the AddEdnsOptionInOutgoingQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetAddEdnsOptionInOutgoingQueryOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.AddEdnsOptionInOutgoingQuery) {
		return nil, false
	}
	return o.AddEdnsOptionInOutgoingQuery, true
}

// HasAddEdnsOptionInOutgoingQuery returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasAddEdnsOptionInOutgoingQuery() bool {
	if o != nil && !IsNil(o.AddEdnsOptionInOutgoingQuery) {
		return true
	}

	return false
}

// SetAddEdnsOptionInOutgoingQuery gets a reference to the given Inheritance2InheritedBool and assigns it to the AddEdnsOptionInOutgoingQuery field.
func (o *ConfigServerInheritance) SetAddEdnsOptionInOutgoingQuery(v Inheritance2InheritedBool) {
	o.AddEdnsOptionInOutgoingQuery = &v
}

// GetCustomRootNsBlock returns the CustomRootNsBlock field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetCustomRootNsBlock() ConfigInheritedCustomRootNSBlock {
	if o == nil || IsNil(o.CustomRootNsBlock) {
		var ret ConfigInheritedCustomRootNSBlock
		return ret
	}
	return *o.CustomRootNsBlock
}

// GetCustomRootNsBlockOk returns a tuple with the CustomRootNsBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetCustomRootNsBlockOk() (*ConfigInheritedCustomRootNSBlock, bool) {
	if o == nil || IsNil(o.CustomRootNsBlock) {
		return nil, false
	}
	return o.CustomRootNsBlock, true
}

// HasCustomRootNsBlock returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasCustomRootNsBlock() bool {
	if o != nil && !IsNil(o.CustomRootNsBlock) {
		return true
	}

	return false
}

// SetCustomRootNsBlock gets a reference to the given ConfigInheritedCustomRootNSBlock and assigns it to the CustomRootNsBlock field.
func (o *ConfigServerInheritance) SetCustomRootNsBlock(v ConfigInheritedCustomRootNSBlock) {
	o.CustomRootNsBlock = &v
}

// GetDnssecValidationBlock returns the DnssecValidationBlock field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetDnssecValidationBlock() ConfigInheritedDNSSECValidationBlock {
	if o == nil || IsNil(o.DnssecValidationBlock) {
		var ret ConfigInheritedDNSSECValidationBlock
		return ret
	}
	return *o.DnssecValidationBlock
}

// GetDnssecValidationBlockOk returns a tuple with the DnssecValidationBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetDnssecValidationBlockOk() (*ConfigInheritedDNSSECValidationBlock, bool) {
	if o == nil || IsNil(o.DnssecValidationBlock) {
		return nil, false
	}
	return o.DnssecValidationBlock, true
}

// HasDnssecValidationBlock returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasDnssecValidationBlock() bool {
	if o != nil && !IsNil(o.DnssecValidationBlock) {
		return true
	}

	return false
}

// SetDnssecValidationBlock gets a reference to the given ConfigInheritedDNSSECValidationBlock and assigns it to the DnssecValidationBlock field.
func (o *ConfigServerInheritance) SetDnssecValidationBlock(v ConfigInheritedDNSSECValidationBlock) {
	o.DnssecValidationBlock = &v
}

// GetEcsBlock returns the EcsBlock field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetEcsBlock() ConfigInheritedECSBlock {
	if o == nil || IsNil(o.EcsBlock) {
		var ret ConfigInheritedECSBlock
		return ret
	}
	return *o.EcsBlock
}

// GetEcsBlockOk returns a tuple with the EcsBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetEcsBlockOk() (*ConfigInheritedECSBlock, bool) {
	if o == nil || IsNil(o.EcsBlock) {
		return nil, false
	}
	return o.EcsBlock, true
}

// HasEcsBlock returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasEcsBlock() bool {
	if o != nil && !IsNil(o.EcsBlock) {
		return true
	}

	return false
}

// SetEcsBlock gets a reference to the given ConfigInheritedECSBlock and assigns it to the EcsBlock field.
func (o *ConfigServerInheritance) SetEcsBlock(v ConfigInheritedECSBlock) {
	o.EcsBlock = &v
}

// GetFilterAaaaAcl returns the FilterAaaaAcl field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetFilterAaaaAcl() ConfigInheritedACLItems {
	if o == nil || IsNil(o.FilterAaaaAcl) {
		var ret ConfigInheritedACLItems
		return ret
	}
	return *o.FilterAaaaAcl
}

// GetFilterAaaaAclOk returns a tuple with the FilterAaaaAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetFilterAaaaAclOk() (*ConfigInheritedACLItems, bool) {
	if o == nil || IsNil(o.FilterAaaaAcl) {
		return nil, false
	}
	return o.FilterAaaaAcl, true
}

// HasFilterAaaaAcl returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasFilterAaaaAcl() bool {
	if o != nil && !IsNil(o.FilterAaaaAcl) {
		return true
	}

	return false
}

// SetFilterAaaaAcl gets a reference to the given ConfigInheritedACLItems and assigns it to the FilterAaaaAcl field.
func (o *ConfigServerInheritance) SetFilterAaaaAcl(v ConfigInheritedACLItems) {
	o.FilterAaaaAcl = &v
}

// GetFilterAaaaOnV4 returns the FilterAaaaOnV4 field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetFilterAaaaOnV4() Inheritance2InheritedString {
	if o == nil || IsNil(o.FilterAaaaOnV4) {
		var ret Inheritance2InheritedString
		return ret
	}
	return *o.FilterAaaaOnV4
}

// GetFilterAaaaOnV4Ok returns a tuple with the FilterAaaaOnV4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetFilterAaaaOnV4Ok() (*Inheritance2InheritedString, bool) {
	if o == nil || IsNil(o.FilterAaaaOnV4) {
		return nil, false
	}
	return o.FilterAaaaOnV4, true
}

// HasFilterAaaaOnV4 returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasFilterAaaaOnV4() bool {
	if o != nil && !IsNil(o.FilterAaaaOnV4) {
		return true
	}

	return false
}

// SetFilterAaaaOnV4 gets a reference to the given Inheritance2InheritedString and assigns it to the FilterAaaaOnV4 field.
func (o *ConfigServerInheritance) SetFilterAaaaOnV4(v Inheritance2InheritedString) {
	o.FilterAaaaOnV4 = &v
}

// GetForwardersBlock returns the ForwardersBlock field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetForwardersBlock() ConfigInheritedForwardersBlock {
	if o == nil || IsNil(o.ForwardersBlock) {
		var ret ConfigInheritedForwardersBlock
		return ret
	}
	return *o.ForwardersBlock
}

// GetForwardersBlockOk returns a tuple with the ForwardersBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetForwardersBlockOk() (*ConfigInheritedForwardersBlock, bool) {
	if o == nil || IsNil(o.ForwardersBlock) {
		return nil, false
	}
	return o.ForwardersBlock, true
}

// HasForwardersBlock returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasForwardersBlock() bool {
	if o != nil && !IsNil(o.ForwardersBlock) {
		return true
	}

	return false
}

// SetForwardersBlock gets a reference to the given ConfigInheritedForwardersBlock and assigns it to the ForwardersBlock field.
func (o *ConfigServerInheritance) SetForwardersBlock(v ConfigInheritedForwardersBlock) {
	o.ForwardersBlock = &v
}

// GetGssTsigEnabled returns the GssTsigEnabled field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetGssTsigEnabled() Inheritance2InheritedBool {
	if o == nil || IsNil(o.GssTsigEnabled) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.GssTsigEnabled
}

// GetGssTsigEnabledOk returns a tuple with the GssTsigEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetGssTsigEnabledOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.GssTsigEnabled) {
		return nil, false
	}
	return o.GssTsigEnabled, true
}

// HasGssTsigEnabled returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasGssTsigEnabled() bool {
	if o != nil && !IsNil(o.GssTsigEnabled) {
		return true
	}

	return false
}

// SetGssTsigEnabled gets a reference to the given Inheritance2InheritedBool and assigns it to the GssTsigEnabled field.
func (o *ConfigServerInheritance) SetGssTsigEnabled(v Inheritance2InheritedBool) {
	o.GssTsigEnabled = &v
}

// GetKerberosKeys returns the KerberosKeys field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetKerberosKeys() ConfigInheritedKerberosKeys {
	if o == nil || IsNil(o.KerberosKeys) {
		var ret ConfigInheritedKerberosKeys
		return ret
	}
	return *o.KerberosKeys
}

// GetKerberosKeysOk returns a tuple with the KerberosKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetKerberosKeysOk() (*ConfigInheritedKerberosKeys, bool) {
	if o == nil || IsNil(o.KerberosKeys) {
		return nil, false
	}
	return o.KerberosKeys, true
}

// HasKerberosKeys returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasKerberosKeys() bool {
	if o != nil && !IsNil(o.KerberosKeys) {
		return true
	}

	return false
}

// SetKerberosKeys gets a reference to the given ConfigInheritedKerberosKeys and assigns it to the KerberosKeys field.
func (o *ConfigServerInheritance) SetKerberosKeys(v ConfigInheritedKerberosKeys) {
	o.KerberosKeys = &v
}

// GetLameTtl returns the LameTtl field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetLameTtl() Inheritance2InheritedUInt32 {
	if o == nil || IsNil(o.LameTtl) {
		var ret Inheritance2InheritedUInt32
		return ret
	}
	return *o.LameTtl
}

// GetLameTtlOk returns a tuple with the LameTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetLameTtlOk() (*Inheritance2InheritedUInt32, bool) {
	if o == nil || IsNil(o.LameTtl) {
		return nil, false
	}
	return o.LameTtl, true
}

// HasLameTtl returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasLameTtl() bool {
	if o != nil && !IsNil(o.LameTtl) {
		return true
	}

	return false
}

// SetLameTtl gets a reference to the given Inheritance2InheritedUInt32 and assigns it to the LameTtl field.
func (o *ConfigServerInheritance) SetLameTtl(v Inheritance2InheritedUInt32) {
	o.LameTtl = &v
}

// GetLogQueryResponse returns the LogQueryResponse field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetLogQueryResponse() Inheritance2InheritedBool {
	if o == nil || IsNil(o.LogQueryResponse) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.LogQueryResponse
}

// GetLogQueryResponseOk returns a tuple with the LogQueryResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetLogQueryResponseOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.LogQueryResponse) {
		return nil, false
	}
	return o.LogQueryResponse, true
}

// HasLogQueryResponse returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasLogQueryResponse() bool {
	if o != nil && !IsNil(o.LogQueryResponse) {
		return true
	}

	return false
}

// SetLogQueryResponse gets a reference to the given Inheritance2InheritedBool and assigns it to the LogQueryResponse field.
func (o *ConfigServerInheritance) SetLogQueryResponse(v Inheritance2InheritedBool) {
	o.LogQueryResponse = &v
}

// GetMatchRecursiveOnly returns the MatchRecursiveOnly field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetMatchRecursiveOnly() Inheritance2InheritedBool {
	if o == nil || IsNil(o.MatchRecursiveOnly) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.MatchRecursiveOnly
}

// GetMatchRecursiveOnlyOk returns a tuple with the MatchRecursiveOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetMatchRecursiveOnlyOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.MatchRecursiveOnly) {
		return nil, false
	}
	return o.MatchRecursiveOnly, true
}

// HasMatchRecursiveOnly returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasMatchRecursiveOnly() bool {
	if o != nil && !IsNil(o.MatchRecursiveOnly) {
		return true
	}

	return false
}

// SetMatchRecursiveOnly gets a reference to the given Inheritance2InheritedBool and assigns it to the MatchRecursiveOnly field.
func (o *ConfigServerInheritance) SetMatchRecursiveOnly(v Inheritance2InheritedBool) {
	o.MatchRecursiveOnly = &v
}

// GetMaxCacheTtl returns the MaxCacheTtl field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetMaxCacheTtl() Inheritance2InheritedUInt32 {
	if o == nil || IsNil(o.MaxCacheTtl) {
		var ret Inheritance2InheritedUInt32
		return ret
	}
	return *o.MaxCacheTtl
}

// GetMaxCacheTtlOk returns a tuple with the MaxCacheTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetMaxCacheTtlOk() (*Inheritance2InheritedUInt32, bool) {
	if o == nil || IsNil(o.MaxCacheTtl) {
		return nil, false
	}
	return o.MaxCacheTtl, true
}

// HasMaxCacheTtl returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasMaxCacheTtl() bool {
	if o != nil && !IsNil(o.MaxCacheTtl) {
		return true
	}

	return false
}

// SetMaxCacheTtl gets a reference to the given Inheritance2InheritedUInt32 and assigns it to the MaxCacheTtl field.
func (o *ConfigServerInheritance) SetMaxCacheTtl(v Inheritance2InheritedUInt32) {
	o.MaxCacheTtl = &v
}

// GetMaxNegativeTtl returns the MaxNegativeTtl field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetMaxNegativeTtl() Inheritance2InheritedUInt32 {
	if o == nil || IsNil(o.MaxNegativeTtl) {
		var ret Inheritance2InheritedUInt32
		return ret
	}
	return *o.MaxNegativeTtl
}

// GetMaxNegativeTtlOk returns a tuple with the MaxNegativeTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetMaxNegativeTtlOk() (*Inheritance2InheritedUInt32, bool) {
	if o == nil || IsNil(o.MaxNegativeTtl) {
		return nil, false
	}
	return o.MaxNegativeTtl, true
}

// HasMaxNegativeTtl returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasMaxNegativeTtl() bool {
	if o != nil && !IsNil(o.MaxNegativeTtl) {
		return true
	}

	return false
}

// SetMaxNegativeTtl gets a reference to the given Inheritance2InheritedUInt32 and assigns it to the MaxNegativeTtl field.
func (o *ConfigServerInheritance) SetMaxNegativeTtl(v Inheritance2InheritedUInt32) {
	o.MaxNegativeTtl = &v
}

// GetMinimalResponses returns the MinimalResponses field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetMinimalResponses() Inheritance2InheritedBool {
	if o == nil || IsNil(o.MinimalResponses) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.MinimalResponses
}

// GetMinimalResponsesOk returns a tuple with the MinimalResponses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetMinimalResponsesOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.MinimalResponses) {
		return nil, false
	}
	return o.MinimalResponses, true
}

// HasMinimalResponses returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasMinimalResponses() bool {
	if o != nil && !IsNil(o.MinimalResponses) {
		return true
	}

	return false
}

// SetMinimalResponses gets a reference to the given Inheritance2InheritedBool and assigns it to the MinimalResponses field.
func (o *ConfigServerInheritance) SetMinimalResponses(v Inheritance2InheritedBool) {
	o.MinimalResponses = &v
}

// GetNotify returns the Notify field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetNotify() Inheritance2InheritedBool {
	if o == nil || IsNil(o.Notify) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.Notify
}

// GetNotifyOk returns a tuple with the Notify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetNotifyOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.Notify) {
		return nil, false
	}
	return o.Notify, true
}

// HasNotify returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasNotify() bool {
	if o != nil && !IsNil(o.Notify) {
		return true
	}

	return false
}

// SetNotify gets a reference to the given Inheritance2InheritedBool and assigns it to the Notify field.
func (o *ConfigServerInheritance) SetNotify(v Inheritance2InheritedBool) {
	o.Notify = &v
}

// GetQueryAcl returns the QueryAcl field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetQueryAcl() ConfigInheritedACLItems {
	if o == nil || IsNil(o.QueryAcl) {
		var ret ConfigInheritedACLItems
		return ret
	}
	return *o.QueryAcl
}

// GetQueryAclOk returns a tuple with the QueryAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetQueryAclOk() (*ConfigInheritedACLItems, bool) {
	if o == nil || IsNil(o.QueryAcl) {
		return nil, false
	}
	return o.QueryAcl, true
}

// HasQueryAcl returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasQueryAcl() bool {
	if o != nil && !IsNil(o.QueryAcl) {
		return true
	}

	return false
}

// SetQueryAcl gets a reference to the given ConfigInheritedACLItems and assigns it to the QueryAcl field.
func (o *ConfigServerInheritance) SetQueryAcl(v ConfigInheritedACLItems) {
	o.QueryAcl = &v
}

// GetQueryPort returns the QueryPort field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetQueryPort() Inheritance2InheritedUInt32 {
	if o == nil || IsNil(o.QueryPort) {
		var ret Inheritance2InheritedUInt32
		return ret
	}
	return *o.QueryPort
}

// GetQueryPortOk returns a tuple with the QueryPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetQueryPortOk() (*Inheritance2InheritedUInt32, bool) {
	if o == nil || IsNil(o.QueryPort) {
		return nil, false
	}
	return o.QueryPort, true
}

// HasQueryPort returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasQueryPort() bool {
	if o != nil && !IsNil(o.QueryPort) {
		return true
	}

	return false
}

// SetQueryPort gets a reference to the given Inheritance2InheritedUInt32 and assigns it to the QueryPort field.
func (o *ConfigServerInheritance) SetQueryPort(v Inheritance2InheritedUInt32) {
	o.QueryPort = &v
}

// GetRecursionAcl returns the RecursionAcl field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetRecursionAcl() ConfigInheritedACLItems {
	if o == nil || IsNil(o.RecursionAcl) {
		var ret ConfigInheritedACLItems
		return ret
	}
	return *o.RecursionAcl
}

// GetRecursionAclOk returns a tuple with the RecursionAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetRecursionAclOk() (*ConfigInheritedACLItems, bool) {
	if o == nil || IsNil(o.RecursionAcl) {
		return nil, false
	}
	return o.RecursionAcl, true
}

// HasRecursionAcl returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasRecursionAcl() bool {
	if o != nil && !IsNil(o.RecursionAcl) {
		return true
	}

	return false
}

// SetRecursionAcl gets a reference to the given ConfigInheritedACLItems and assigns it to the RecursionAcl field.
func (o *ConfigServerInheritance) SetRecursionAcl(v ConfigInheritedACLItems) {
	o.RecursionAcl = &v
}

// GetRecursionEnabled returns the RecursionEnabled field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetRecursionEnabled() Inheritance2InheritedBool {
	if o == nil || IsNil(o.RecursionEnabled) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.RecursionEnabled
}

// GetRecursionEnabledOk returns a tuple with the RecursionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetRecursionEnabledOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.RecursionEnabled) {
		return nil, false
	}
	return o.RecursionEnabled, true
}

// HasRecursionEnabled returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasRecursionEnabled() bool {
	if o != nil && !IsNil(o.RecursionEnabled) {
		return true
	}

	return false
}

// SetRecursionEnabled gets a reference to the given Inheritance2InheritedBool and assigns it to the RecursionEnabled field.
func (o *ConfigServerInheritance) SetRecursionEnabled(v Inheritance2InheritedBool) {
	o.RecursionEnabled = &v
}

// GetRecursiveClients returns the RecursiveClients field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetRecursiveClients() Inheritance2InheritedUInt32 {
	if o == nil || IsNil(o.RecursiveClients) {
		var ret Inheritance2InheritedUInt32
		return ret
	}
	return *o.RecursiveClients
}

// GetRecursiveClientsOk returns a tuple with the RecursiveClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetRecursiveClientsOk() (*Inheritance2InheritedUInt32, bool) {
	if o == nil || IsNil(o.RecursiveClients) {
		return nil, false
	}
	return o.RecursiveClients, true
}

// HasRecursiveClients returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasRecursiveClients() bool {
	if o != nil && !IsNil(o.RecursiveClients) {
		return true
	}

	return false
}

// SetRecursiveClients gets a reference to the given Inheritance2InheritedUInt32 and assigns it to the RecursiveClients field.
func (o *ConfigServerInheritance) SetRecursiveClients(v Inheritance2InheritedUInt32) {
	o.RecursiveClients = &v
}

// GetResolverQueryTimeout returns the ResolverQueryTimeout field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetResolverQueryTimeout() Inheritance2InheritedUInt32 {
	if o == nil || IsNil(o.ResolverQueryTimeout) {
		var ret Inheritance2InheritedUInt32
		return ret
	}
	return *o.ResolverQueryTimeout
}

// GetResolverQueryTimeoutOk returns a tuple with the ResolverQueryTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetResolverQueryTimeoutOk() (*Inheritance2InheritedUInt32, bool) {
	if o == nil || IsNil(o.ResolverQueryTimeout) {
		return nil, false
	}
	return o.ResolverQueryTimeout, true
}

// HasResolverQueryTimeout returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasResolverQueryTimeout() bool {
	if o != nil && !IsNil(o.ResolverQueryTimeout) {
		return true
	}

	return false
}

// SetResolverQueryTimeout gets a reference to the given Inheritance2InheritedUInt32 and assigns it to the ResolverQueryTimeout field.
func (o *ConfigServerInheritance) SetResolverQueryTimeout(v Inheritance2InheritedUInt32) {
	o.ResolverQueryTimeout = &v
}

// GetSecondaryAxfrQueryLimit returns the SecondaryAxfrQueryLimit field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetSecondaryAxfrQueryLimit() Inheritance2InheritedUInt32 {
	if o == nil || IsNil(o.SecondaryAxfrQueryLimit) {
		var ret Inheritance2InheritedUInt32
		return ret
	}
	return *o.SecondaryAxfrQueryLimit
}

// GetSecondaryAxfrQueryLimitOk returns a tuple with the SecondaryAxfrQueryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetSecondaryAxfrQueryLimitOk() (*Inheritance2InheritedUInt32, bool) {
	if o == nil || IsNil(o.SecondaryAxfrQueryLimit) {
		return nil, false
	}
	return o.SecondaryAxfrQueryLimit, true
}

// HasSecondaryAxfrQueryLimit returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasSecondaryAxfrQueryLimit() bool {
	if o != nil && !IsNil(o.SecondaryAxfrQueryLimit) {
		return true
	}

	return false
}

// SetSecondaryAxfrQueryLimit gets a reference to the given Inheritance2InheritedUInt32 and assigns it to the SecondaryAxfrQueryLimit field.
func (o *ConfigServerInheritance) SetSecondaryAxfrQueryLimit(v Inheritance2InheritedUInt32) {
	o.SecondaryAxfrQueryLimit = &v
}

// GetSecondarySoaQueryLimit returns the SecondarySoaQueryLimit field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetSecondarySoaQueryLimit() Inheritance2InheritedUInt32 {
	if o == nil || IsNil(o.SecondarySoaQueryLimit) {
		var ret Inheritance2InheritedUInt32
		return ret
	}
	return *o.SecondarySoaQueryLimit
}

// GetSecondarySoaQueryLimitOk returns a tuple with the SecondarySoaQueryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetSecondarySoaQueryLimitOk() (*Inheritance2InheritedUInt32, bool) {
	if o == nil || IsNil(o.SecondarySoaQueryLimit) {
		return nil, false
	}
	return o.SecondarySoaQueryLimit, true
}

// HasSecondarySoaQueryLimit returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasSecondarySoaQueryLimit() bool {
	if o != nil && !IsNil(o.SecondarySoaQueryLimit) {
		return true
	}

	return false
}

// SetSecondarySoaQueryLimit gets a reference to the given Inheritance2InheritedUInt32 and assigns it to the SecondarySoaQueryLimit field.
func (o *ConfigServerInheritance) SetSecondarySoaQueryLimit(v Inheritance2InheritedUInt32) {
	o.SecondarySoaQueryLimit = &v
}

// GetSortList returns the SortList field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetSortList() ConfigInheritedSortListItems {
	if o == nil || IsNil(o.SortList) {
		var ret ConfigInheritedSortListItems
		return ret
	}
	return *o.SortList
}

// GetSortListOk returns a tuple with the SortList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetSortListOk() (*ConfigInheritedSortListItems, bool) {
	if o == nil || IsNil(o.SortList) {
		return nil, false
	}
	return o.SortList, true
}

// HasSortList returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasSortList() bool {
	if o != nil && !IsNil(o.SortList) {
		return true
	}

	return false
}

// SetSortList gets a reference to the given ConfigInheritedSortListItems and assigns it to the SortList field.
func (o *ConfigServerInheritance) SetSortList(v ConfigInheritedSortListItems) {
	o.SortList = &v
}

// GetSynthesizeAddressRecordsFromHttps returns the SynthesizeAddressRecordsFromHttps field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetSynthesizeAddressRecordsFromHttps() Inheritance2InheritedBool {
	if o == nil || IsNil(o.SynthesizeAddressRecordsFromHttps) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.SynthesizeAddressRecordsFromHttps
}

// GetSynthesizeAddressRecordsFromHttpsOk returns a tuple with the SynthesizeAddressRecordsFromHttps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetSynthesizeAddressRecordsFromHttpsOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.SynthesizeAddressRecordsFromHttps) {
		return nil, false
	}
	return o.SynthesizeAddressRecordsFromHttps, true
}

// HasSynthesizeAddressRecordsFromHttps returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasSynthesizeAddressRecordsFromHttps() bool {
	if o != nil && !IsNil(o.SynthesizeAddressRecordsFromHttps) {
		return true
	}

	return false
}

// SetSynthesizeAddressRecordsFromHttps gets a reference to the given Inheritance2InheritedBool and assigns it to the SynthesizeAddressRecordsFromHttps field.
func (o *ConfigServerInheritance) SetSynthesizeAddressRecordsFromHttps(v Inheritance2InheritedBool) {
	o.SynthesizeAddressRecordsFromHttps = &v
}

// GetTransferAcl returns the TransferAcl field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetTransferAcl() ConfigInheritedACLItems {
	if o == nil || IsNil(o.TransferAcl) {
		var ret ConfigInheritedACLItems
		return ret
	}
	return *o.TransferAcl
}

// GetTransferAclOk returns a tuple with the TransferAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetTransferAclOk() (*ConfigInheritedACLItems, bool) {
	if o == nil || IsNil(o.TransferAcl) {
		return nil, false
	}
	return o.TransferAcl, true
}

// HasTransferAcl returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasTransferAcl() bool {
	if o != nil && !IsNil(o.TransferAcl) {
		return true
	}

	return false
}

// SetTransferAcl gets a reference to the given ConfigInheritedACLItems and assigns it to the TransferAcl field.
func (o *ConfigServerInheritance) SetTransferAcl(v ConfigInheritedACLItems) {
	o.TransferAcl = &v
}

// GetUpdateAcl returns the UpdateAcl field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetUpdateAcl() ConfigInheritedACLItems {
	if o == nil || IsNil(o.UpdateAcl) {
		var ret ConfigInheritedACLItems
		return ret
	}
	return *o.UpdateAcl
}

// GetUpdateAclOk returns a tuple with the UpdateAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetUpdateAclOk() (*ConfigInheritedACLItems, bool) {
	if o == nil || IsNil(o.UpdateAcl) {
		return nil, false
	}
	return o.UpdateAcl, true
}

// HasUpdateAcl returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasUpdateAcl() bool {
	if o != nil && !IsNil(o.UpdateAcl) {
		return true
	}

	return false
}

// SetUpdateAcl gets a reference to the given ConfigInheritedACLItems and assigns it to the UpdateAcl field.
func (o *ConfigServerInheritance) SetUpdateAcl(v ConfigInheritedACLItems) {
	o.UpdateAcl = &v
}

// GetUseForwardersForSubzones returns the UseForwardersForSubzones field value if set, zero value otherwise.
func (o *ConfigServerInheritance) GetUseForwardersForSubzones() Inheritance2InheritedBool {
	if o == nil || IsNil(o.UseForwardersForSubzones) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.UseForwardersForSubzones
}

// GetUseForwardersForSubzonesOk returns a tuple with the UseForwardersForSubzones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigServerInheritance) GetUseForwardersForSubzonesOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.UseForwardersForSubzones) {
		return nil, false
	}
	return o.UseForwardersForSubzones, true
}

// HasUseForwardersForSubzones returns a boolean if a field has been set.
func (o *ConfigServerInheritance) HasUseForwardersForSubzones() bool {
	if o != nil && !IsNil(o.UseForwardersForSubzones) {
		return true
	}

	return false
}

// SetUseForwardersForSubzones gets a reference to the given Inheritance2InheritedBool and assigns it to the UseForwardersForSubzones field.
func (o *ConfigServerInheritance) SetUseForwardersForSubzones(v Inheritance2InheritedBool) {
	o.UseForwardersForSubzones = &v
}

func (o ConfigServerInheritance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigServerInheritance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddEdnsOptionInOutgoingQuery) {
		toSerialize["add_edns_option_in_outgoing_query"] = o.AddEdnsOptionInOutgoingQuery
	}
	if !IsNil(o.CustomRootNsBlock) {
		toSerialize["custom_root_ns_block"] = o.CustomRootNsBlock
	}
	if !IsNil(o.DnssecValidationBlock) {
		toSerialize["dnssec_validation_block"] = o.DnssecValidationBlock
	}
	if !IsNil(o.EcsBlock) {
		toSerialize["ecs_block"] = o.EcsBlock
	}
	if !IsNil(o.FilterAaaaAcl) {
		toSerialize["filter_aaaa_acl"] = o.FilterAaaaAcl
	}
	if !IsNil(o.FilterAaaaOnV4) {
		toSerialize["filter_aaaa_on_v4"] = o.FilterAaaaOnV4
	}
	if !IsNil(o.ForwardersBlock) {
		toSerialize["forwarders_block"] = o.ForwardersBlock
	}
	if !IsNil(o.GssTsigEnabled) {
		toSerialize["gss_tsig_enabled"] = o.GssTsigEnabled
	}
	if !IsNil(o.KerberosKeys) {
		toSerialize["kerberos_keys"] = o.KerberosKeys
	}
	if !IsNil(o.LameTtl) {
		toSerialize["lame_ttl"] = o.LameTtl
	}
	if !IsNil(o.LogQueryResponse) {
		toSerialize["log_query_response"] = o.LogQueryResponse
	}
	if !IsNil(o.MatchRecursiveOnly) {
		toSerialize["match_recursive_only"] = o.MatchRecursiveOnly
	}
	if !IsNil(o.MaxCacheTtl) {
		toSerialize["max_cache_ttl"] = o.MaxCacheTtl
	}
	if !IsNil(o.MaxNegativeTtl) {
		toSerialize["max_negative_ttl"] = o.MaxNegativeTtl
	}
	if !IsNil(o.MinimalResponses) {
		toSerialize["minimal_responses"] = o.MinimalResponses
	}
	if !IsNil(o.Notify) {
		toSerialize["notify"] = o.Notify
	}
	if !IsNil(o.QueryAcl) {
		toSerialize["query_acl"] = o.QueryAcl
	}
	if !IsNil(o.QueryPort) {
		toSerialize["query_port"] = o.QueryPort
	}
	if !IsNil(o.RecursionAcl) {
		toSerialize["recursion_acl"] = o.RecursionAcl
	}
	if !IsNil(o.RecursionEnabled) {
		toSerialize["recursion_enabled"] = o.RecursionEnabled
	}
	if !IsNil(o.RecursiveClients) {
		toSerialize["recursive_clients"] = o.RecursiveClients
	}
	if !IsNil(o.ResolverQueryTimeout) {
		toSerialize["resolver_query_timeout"] = o.ResolverQueryTimeout
	}
	if !IsNil(o.SecondaryAxfrQueryLimit) {
		toSerialize["secondary_axfr_query_limit"] = o.SecondaryAxfrQueryLimit
	}
	if !IsNil(o.SecondarySoaQueryLimit) {
		toSerialize["secondary_soa_query_limit"] = o.SecondarySoaQueryLimit
	}
	if !IsNil(o.SortList) {
		toSerialize["sort_list"] = o.SortList
	}
	if !IsNil(o.SynthesizeAddressRecordsFromHttps) {
		toSerialize["synthesize_address_records_from_https"] = o.SynthesizeAddressRecordsFromHttps
	}
	if !IsNil(o.TransferAcl) {
		toSerialize["transfer_acl"] = o.TransferAcl
	}
	if !IsNil(o.UpdateAcl) {
		toSerialize["update_acl"] = o.UpdateAcl
	}
	if !IsNil(o.UseForwardersForSubzones) {
		toSerialize["use_forwarders_for_subzones"] = o.UseForwardersForSubzones
	}
	return toSerialize, nil
}

type NullableConfigServerInheritance struct {
	value *ConfigServerInheritance
	isSet bool
}

func (v NullableConfigServerInheritance) Get() *ConfigServerInheritance {
	return v.value
}

func (v *NullableConfigServerInheritance) Set(val *ConfigServerInheritance) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigServerInheritance) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigServerInheritance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigServerInheritance(val *ConfigServerInheritance) *NullableConfigServerInheritance {
	return &NullableConfigServerInheritance{value: val, isSet: true}
}

func (v NullableConfigServerInheritance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigServerInheritance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
