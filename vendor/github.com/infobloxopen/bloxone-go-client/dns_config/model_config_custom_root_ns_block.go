/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_config

import (
	"encoding/json"
)

// checks if the ConfigCustomRootNSBlock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigCustomRootNSBlock{}

// ConfigCustomRootNSBlock Block for fields: _custom_root_ns_enabled_, _custom_root_ns_.
type ConfigCustomRootNSBlock struct {
	// Optional. Field config for _custom_root_ns_ field.
	CustomRootNs []ConfigRootNS `json:"custom_root_ns,omitempty"`
	// Optional. Field config for _custom_root_ns_enabled_ field.
	CustomRootNsEnabled *bool `json:"custom_root_ns_enabled,omitempty"`
}

// NewConfigCustomRootNSBlock instantiates a new ConfigCustomRootNSBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigCustomRootNSBlock() *ConfigCustomRootNSBlock {
	this := ConfigCustomRootNSBlock{}
	return &this
}

// NewConfigCustomRootNSBlockWithDefaults instantiates a new ConfigCustomRootNSBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigCustomRootNSBlockWithDefaults() *ConfigCustomRootNSBlock {
	this := ConfigCustomRootNSBlock{}
	return &this
}

// GetCustomRootNs returns the CustomRootNs field value if set, zero value otherwise.
func (o *ConfigCustomRootNSBlock) GetCustomRootNs() []ConfigRootNS {
	if o == nil || IsNil(o.CustomRootNs) {
		var ret []ConfigRootNS
		return ret
	}
	return o.CustomRootNs
}

// GetCustomRootNsOk returns a tuple with the CustomRootNs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigCustomRootNSBlock) GetCustomRootNsOk() ([]ConfigRootNS, bool) {
	if o == nil || IsNil(o.CustomRootNs) {
		return nil, false
	}
	return o.CustomRootNs, true
}

// HasCustomRootNs returns a boolean if a field has been set.
func (o *ConfigCustomRootNSBlock) HasCustomRootNs() bool {
	if o != nil && !IsNil(o.CustomRootNs) {
		return true
	}

	return false
}

// SetCustomRootNs gets a reference to the given []ConfigRootNS and assigns it to the CustomRootNs field.
func (o *ConfigCustomRootNSBlock) SetCustomRootNs(v []ConfigRootNS) {
	o.CustomRootNs = v
}

// GetCustomRootNsEnabled returns the CustomRootNsEnabled field value if set, zero value otherwise.
func (o *ConfigCustomRootNSBlock) GetCustomRootNsEnabled() bool {
	if o == nil || IsNil(o.CustomRootNsEnabled) {
		var ret bool
		return ret
	}
	return *o.CustomRootNsEnabled
}

// GetCustomRootNsEnabledOk returns a tuple with the CustomRootNsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigCustomRootNSBlock) GetCustomRootNsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CustomRootNsEnabled) {
		return nil, false
	}
	return o.CustomRootNsEnabled, true
}

// HasCustomRootNsEnabled returns a boolean if a field has been set.
func (o *ConfigCustomRootNSBlock) HasCustomRootNsEnabled() bool {
	if o != nil && !IsNil(o.CustomRootNsEnabled) {
		return true
	}

	return false
}

// SetCustomRootNsEnabled gets a reference to the given bool and assigns it to the CustomRootNsEnabled field.
func (o *ConfigCustomRootNSBlock) SetCustomRootNsEnabled(v bool) {
	o.CustomRootNsEnabled = &v
}

func (o ConfigCustomRootNSBlock) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigCustomRootNSBlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomRootNs) {
		toSerialize["custom_root_ns"] = o.CustomRootNs
	}
	if !IsNil(o.CustomRootNsEnabled) {
		toSerialize["custom_root_ns_enabled"] = o.CustomRootNsEnabled
	}
	return toSerialize, nil
}

type NullableConfigCustomRootNSBlock struct {
	value *ConfigCustomRootNSBlock
	isSet bool
}

func (v NullableConfigCustomRootNSBlock) Get() *ConfigCustomRootNSBlock {
	return v.value
}

func (v *NullableConfigCustomRootNSBlock) Set(val *ConfigCustomRootNSBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigCustomRootNSBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigCustomRootNSBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigCustomRootNSBlock(val *ConfigCustomRootNSBlock) *NullableConfigCustomRootNSBlock {
	return &NullableConfigCustomRootNSBlock{value: val, isSet: true}
}

func (v NullableConfigCustomRootNSBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigCustomRootNSBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
