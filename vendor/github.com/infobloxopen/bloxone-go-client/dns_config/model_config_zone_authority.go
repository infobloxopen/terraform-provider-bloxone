/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_config

import (
	"encoding/json"
)

// checks if the ConfigZoneAuthority type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigZoneAuthority{}

// ConfigZoneAuthority Construct for fields: _refresh_, _retry_, _expire_, _default_ttl_, _negative_ttl_, _rname_, _protocol_rname_, _mname_, _protocol_mname_, _use_default_mname_.
type ConfigZoneAuthority struct {
	// Optional. ZoneAuthority default ttl for resource records in zone (value in seconds).  Defaults to 28800.
	DefaultTtl *int64 `json:"default_ttl,omitempty"`
	// Optional. ZoneAuthority expire time in seconds.  Defaults to 2419200.
	Expire *int64 `json:"expire,omitempty"`
	// Defaults to empty.
	Mname *string `json:"mname,omitempty"`
	// Optional. ZoneAuthority negative caching (minimum) ttl in seconds.  Defaults to 900.
	NegativeTtl *int64 `json:"negative_ttl,omitempty"`
	// Optional. ZoneAuthority master name server in punycode.  Defaults to empty.
	ProtocolMname *string `json:"protocol_mname,omitempty"`
	// Optional. A domain name which specifies the mailbox of the person responsible for this zone.  Defaults to empty.
	ProtocolRname *string `json:"protocol_rname,omitempty"`
	// Optional. ZoneAuthority refresh.  Defaults to 10800.
	Refresh *int64 `json:"refresh,omitempty"`
	// Optional. ZoneAuthority retry.  Defaults to 3600.
	Retry *int64 `json:"retry,omitempty"`
	// Optional. ZoneAuthority rname.  Defaults to empty.
	Rname *string `json:"rname,omitempty"`
	// Optional. Use default value for master name server.  Defaults to true.
	UseDefaultMname *bool `json:"use_default_mname,omitempty"`
}

// NewConfigZoneAuthority instantiates a new ConfigZoneAuthority object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigZoneAuthority() *ConfigZoneAuthority {
	this := ConfigZoneAuthority{}
	return &this
}

// NewConfigZoneAuthorityWithDefaults instantiates a new ConfigZoneAuthority object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigZoneAuthorityWithDefaults() *ConfigZoneAuthority {
	this := ConfigZoneAuthority{}
	return &this
}

// GetDefaultTtl returns the DefaultTtl field value if set, zero value otherwise.
func (o *ConfigZoneAuthority) GetDefaultTtl() int64 {
	if o == nil || IsNil(o.DefaultTtl) {
		var ret int64
		return ret
	}
	return *o.DefaultTtl
}

// GetDefaultTtlOk returns a tuple with the DefaultTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigZoneAuthority) GetDefaultTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.DefaultTtl) {
		return nil, false
	}
	return o.DefaultTtl, true
}

// HasDefaultTtl returns a boolean if a field has been set.
func (o *ConfigZoneAuthority) HasDefaultTtl() bool {
	if o != nil && !IsNil(o.DefaultTtl) {
		return true
	}

	return false
}

// SetDefaultTtl gets a reference to the given int64 and assigns it to the DefaultTtl field.
func (o *ConfigZoneAuthority) SetDefaultTtl(v int64) {
	o.DefaultTtl = &v
}

// GetExpire returns the Expire field value if set, zero value otherwise.
func (o *ConfigZoneAuthority) GetExpire() int64 {
	if o == nil || IsNil(o.Expire) {
		var ret int64
		return ret
	}
	return *o.Expire
}

// GetExpireOk returns a tuple with the Expire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigZoneAuthority) GetExpireOk() (*int64, bool) {
	if o == nil || IsNil(o.Expire) {
		return nil, false
	}
	return o.Expire, true
}

// HasExpire returns a boolean if a field has been set.
func (o *ConfigZoneAuthority) HasExpire() bool {
	if o != nil && !IsNil(o.Expire) {
		return true
	}

	return false
}

// SetExpire gets a reference to the given int64 and assigns it to the Expire field.
func (o *ConfigZoneAuthority) SetExpire(v int64) {
	o.Expire = &v
}

// GetMname returns the Mname field value if set, zero value otherwise.
func (o *ConfigZoneAuthority) GetMname() string {
	if o == nil || IsNil(o.Mname) {
		var ret string
		return ret
	}
	return *o.Mname
}

// GetMnameOk returns a tuple with the Mname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigZoneAuthority) GetMnameOk() (*string, bool) {
	if o == nil || IsNil(o.Mname) {
		return nil, false
	}
	return o.Mname, true
}

// HasMname returns a boolean if a field has been set.
func (o *ConfigZoneAuthority) HasMname() bool {
	if o != nil && !IsNil(o.Mname) {
		return true
	}

	return false
}

// SetMname gets a reference to the given string and assigns it to the Mname field.
func (o *ConfigZoneAuthority) SetMname(v string) {
	o.Mname = &v
}

// GetNegativeTtl returns the NegativeTtl field value if set, zero value otherwise.
func (o *ConfigZoneAuthority) GetNegativeTtl() int64 {
	if o == nil || IsNil(o.NegativeTtl) {
		var ret int64
		return ret
	}
	return *o.NegativeTtl
}

// GetNegativeTtlOk returns a tuple with the NegativeTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigZoneAuthority) GetNegativeTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.NegativeTtl) {
		return nil, false
	}
	return o.NegativeTtl, true
}

// HasNegativeTtl returns a boolean if a field has been set.
func (o *ConfigZoneAuthority) HasNegativeTtl() bool {
	if o != nil && !IsNil(o.NegativeTtl) {
		return true
	}

	return false
}

// SetNegativeTtl gets a reference to the given int64 and assigns it to the NegativeTtl field.
func (o *ConfigZoneAuthority) SetNegativeTtl(v int64) {
	o.NegativeTtl = &v
}

// GetProtocolMname returns the ProtocolMname field value if set, zero value otherwise.
func (o *ConfigZoneAuthority) GetProtocolMname() string {
	if o == nil || IsNil(o.ProtocolMname) {
		var ret string
		return ret
	}
	return *o.ProtocolMname
}

// GetProtocolMnameOk returns a tuple with the ProtocolMname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigZoneAuthority) GetProtocolMnameOk() (*string, bool) {
	if o == nil || IsNil(o.ProtocolMname) {
		return nil, false
	}
	return o.ProtocolMname, true
}

// HasProtocolMname returns a boolean if a field has been set.
func (o *ConfigZoneAuthority) HasProtocolMname() bool {
	if o != nil && !IsNil(o.ProtocolMname) {
		return true
	}

	return false
}

// SetProtocolMname gets a reference to the given string and assigns it to the ProtocolMname field.
func (o *ConfigZoneAuthority) SetProtocolMname(v string) {
	o.ProtocolMname = &v
}

// GetProtocolRname returns the ProtocolRname field value if set, zero value otherwise.
func (o *ConfigZoneAuthority) GetProtocolRname() string {
	if o == nil || IsNil(o.ProtocolRname) {
		var ret string
		return ret
	}
	return *o.ProtocolRname
}

// GetProtocolRnameOk returns a tuple with the ProtocolRname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigZoneAuthority) GetProtocolRnameOk() (*string, bool) {
	if o == nil || IsNil(o.ProtocolRname) {
		return nil, false
	}
	return o.ProtocolRname, true
}

// HasProtocolRname returns a boolean if a field has been set.
func (o *ConfigZoneAuthority) HasProtocolRname() bool {
	if o != nil && !IsNil(o.ProtocolRname) {
		return true
	}

	return false
}

// SetProtocolRname gets a reference to the given string and assigns it to the ProtocolRname field.
func (o *ConfigZoneAuthority) SetProtocolRname(v string) {
	o.ProtocolRname = &v
}

// GetRefresh returns the Refresh field value if set, zero value otherwise.
func (o *ConfigZoneAuthority) GetRefresh() int64 {
	if o == nil || IsNil(o.Refresh) {
		var ret int64
		return ret
	}
	return *o.Refresh
}

// GetRefreshOk returns a tuple with the Refresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigZoneAuthority) GetRefreshOk() (*int64, bool) {
	if o == nil || IsNil(o.Refresh) {
		return nil, false
	}
	return o.Refresh, true
}

// HasRefresh returns a boolean if a field has been set.
func (o *ConfigZoneAuthority) HasRefresh() bool {
	if o != nil && !IsNil(o.Refresh) {
		return true
	}

	return false
}

// SetRefresh gets a reference to the given int64 and assigns it to the Refresh field.
func (o *ConfigZoneAuthority) SetRefresh(v int64) {
	o.Refresh = &v
}

// GetRetry returns the Retry field value if set, zero value otherwise.
func (o *ConfigZoneAuthority) GetRetry() int64 {
	if o == nil || IsNil(o.Retry) {
		var ret int64
		return ret
	}
	return *o.Retry
}

// GetRetryOk returns a tuple with the Retry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigZoneAuthority) GetRetryOk() (*int64, bool) {
	if o == nil || IsNil(o.Retry) {
		return nil, false
	}
	return o.Retry, true
}

// HasRetry returns a boolean if a field has been set.
func (o *ConfigZoneAuthority) HasRetry() bool {
	if o != nil && !IsNil(o.Retry) {
		return true
	}

	return false
}

// SetRetry gets a reference to the given int64 and assigns it to the Retry field.
func (o *ConfigZoneAuthority) SetRetry(v int64) {
	o.Retry = &v
}

// GetRname returns the Rname field value if set, zero value otherwise.
func (o *ConfigZoneAuthority) GetRname() string {
	if o == nil || IsNil(o.Rname) {
		var ret string
		return ret
	}
	return *o.Rname
}

// GetRnameOk returns a tuple with the Rname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigZoneAuthority) GetRnameOk() (*string, bool) {
	if o == nil || IsNil(o.Rname) {
		return nil, false
	}
	return o.Rname, true
}

// HasRname returns a boolean if a field has been set.
func (o *ConfigZoneAuthority) HasRname() bool {
	if o != nil && !IsNil(o.Rname) {
		return true
	}

	return false
}

// SetRname gets a reference to the given string and assigns it to the Rname field.
func (o *ConfigZoneAuthority) SetRname(v string) {
	o.Rname = &v
}

// GetUseDefaultMname returns the UseDefaultMname field value if set, zero value otherwise.
func (o *ConfigZoneAuthority) GetUseDefaultMname() bool {
	if o == nil || IsNil(o.UseDefaultMname) {
		var ret bool
		return ret
	}
	return *o.UseDefaultMname
}

// GetUseDefaultMnameOk returns a tuple with the UseDefaultMname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigZoneAuthority) GetUseDefaultMnameOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDefaultMname) {
		return nil, false
	}
	return o.UseDefaultMname, true
}

// HasUseDefaultMname returns a boolean if a field has been set.
func (o *ConfigZoneAuthority) HasUseDefaultMname() bool {
	if o != nil && !IsNil(o.UseDefaultMname) {
		return true
	}

	return false
}

// SetUseDefaultMname gets a reference to the given bool and assigns it to the UseDefaultMname field.
func (o *ConfigZoneAuthority) SetUseDefaultMname(v bool) {
	o.UseDefaultMname = &v
}

func (o ConfigZoneAuthority) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigZoneAuthority) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultTtl) {
		toSerialize["default_ttl"] = o.DefaultTtl
	}
	if !IsNil(o.Expire) {
		toSerialize["expire"] = o.Expire
	}
	if !IsNil(o.Mname) {
		toSerialize["mname"] = o.Mname
	}
	if !IsNil(o.NegativeTtl) {
		toSerialize["negative_ttl"] = o.NegativeTtl
	}
	if !IsNil(o.ProtocolMname) {
		toSerialize["protocol_mname"] = o.ProtocolMname
	}
	if !IsNil(o.ProtocolRname) {
		toSerialize["protocol_rname"] = o.ProtocolRname
	}
	if !IsNil(o.Refresh) {
		toSerialize["refresh"] = o.Refresh
	}
	if !IsNil(o.Retry) {
		toSerialize["retry"] = o.Retry
	}
	if !IsNil(o.Rname) {
		toSerialize["rname"] = o.Rname
	}
	if !IsNil(o.UseDefaultMname) {
		toSerialize["use_default_mname"] = o.UseDefaultMname
	}
	return toSerialize, nil
}

type NullableConfigZoneAuthority struct {
	value *ConfigZoneAuthority
	isSet bool
}

func (v NullableConfigZoneAuthority) Get() *ConfigZoneAuthority {
	return v.value
}

func (v *NullableConfigZoneAuthority) Set(val *ConfigZoneAuthority) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigZoneAuthority) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigZoneAuthority) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigZoneAuthority(val *ConfigZoneAuthority) *NullableConfigZoneAuthority {
	return &NullableConfigZoneAuthority{value: val, isSet: true}
}

func (v NullableConfigZoneAuthority) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigZoneAuthority) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
