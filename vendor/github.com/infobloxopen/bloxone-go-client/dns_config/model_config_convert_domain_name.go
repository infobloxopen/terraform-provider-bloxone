/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_config

import (
	"encoding/json"
)

// checks if the ConfigConvertDomainName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigConvertDomainName{}

// ConfigConvertDomainName Used to convert between Internationalized Domain Name (IDN) and ASCII domain name (Punycode).
type ConfigConvertDomainName struct {
	// IDN domain name representation.
	Idn *string `json:"idn,omitempty"`
	// punycode domain name representation.
	Punycode *string `json:"punycode,omitempty"`
}

// NewConfigConvertDomainName instantiates a new ConfigConvertDomainName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigConvertDomainName() *ConfigConvertDomainName {
	this := ConfigConvertDomainName{}
	return &this
}

// NewConfigConvertDomainNameWithDefaults instantiates a new ConfigConvertDomainName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigConvertDomainNameWithDefaults() *ConfigConvertDomainName {
	this := ConfigConvertDomainName{}
	return &this
}

// GetIdn returns the Idn field value if set, zero value otherwise.
func (o *ConfigConvertDomainName) GetIdn() string {
	if o == nil || IsNil(o.Idn) {
		var ret string
		return ret
	}
	return *o.Idn
}

// GetIdnOk returns a tuple with the Idn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigConvertDomainName) GetIdnOk() (*string, bool) {
	if o == nil || IsNil(o.Idn) {
		return nil, false
	}
	return o.Idn, true
}

// HasIdn returns a boolean if a field has been set.
func (o *ConfigConvertDomainName) HasIdn() bool {
	if o != nil && !IsNil(o.Idn) {
		return true
	}

	return false
}

// SetIdn gets a reference to the given string and assigns it to the Idn field.
func (o *ConfigConvertDomainName) SetIdn(v string) {
	o.Idn = &v
}

// GetPunycode returns the Punycode field value if set, zero value otherwise.
func (o *ConfigConvertDomainName) GetPunycode() string {
	if o == nil || IsNil(o.Punycode) {
		var ret string
		return ret
	}
	return *o.Punycode
}

// GetPunycodeOk returns a tuple with the Punycode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigConvertDomainName) GetPunycodeOk() (*string, bool) {
	if o == nil || IsNil(o.Punycode) {
		return nil, false
	}
	return o.Punycode, true
}

// HasPunycode returns a boolean if a field has been set.
func (o *ConfigConvertDomainName) HasPunycode() bool {
	if o != nil && !IsNil(o.Punycode) {
		return true
	}

	return false
}

// SetPunycode gets a reference to the given string and assigns it to the Punycode field.
func (o *ConfigConvertDomainName) SetPunycode(v string) {
	o.Punycode = &v
}

func (o ConfigConvertDomainName) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigConvertDomainName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Idn) {
		toSerialize["idn"] = o.Idn
	}
	if !IsNil(o.Punycode) {
		toSerialize["punycode"] = o.Punycode
	}
	return toSerialize, nil
}

type NullableConfigConvertDomainName struct {
	value *ConfigConvertDomainName
	isSet bool
}

func (v NullableConfigConvertDomainName) Get() *ConfigConvertDomainName {
	return v.value
}

func (v *NullableConfigConvertDomainName) Set(val *ConfigConvertDomainName) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigConvertDomainName) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigConvertDomainName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigConvertDomainName(val *ConfigConvertDomainName) *NullableConfigConvertDomainName {
	return &NullableConfigConvertDomainName{value: val, isSet: true}
}

func (v NullableConfigConvertDomainName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigConvertDomainName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
