/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_config

import (
	"encoding/json"
)

// checks if the ConfigTTLInheritance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigTTLInheritance{}

// ConfigTTLInheritance The inheritance configuration specifies how the object inherits the _ttl_ field.
type ConfigTTLInheritance struct {
	Ttl *Inheritance2InheritedUInt32 `json:"ttl,omitempty"`
}

// NewConfigTTLInheritance instantiates a new ConfigTTLInheritance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigTTLInheritance() *ConfigTTLInheritance {
	this := ConfigTTLInheritance{}
	return &this
}

// NewConfigTTLInheritanceWithDefaults instantiates a new ConfigTTLInheritance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigTTLInheritanceWithDefaults() *ConfigTTLInheritance {
	this := ConfigTTLInheritance{}
	return &this
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *ConfigTTLInheritance) GetTtl() Inheritance2InheritedUInt32 {
	if o == nil || IsNil(o.Ttl) {
		var ret Inheritance2InheritedUInt32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTTLInheritance) GetTtlOk() (*Inheritance2InheritedUInt32, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *ConfigTTLInheritance) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given Inheritance2InheritedUInt32 and assigns it to the Ttl field.
func (o *ConfigTTLInheritance) SetTtl(v Inheritance2InheritedUInt32) {
	o.Ttl = &v
}

func (o ConfigTTLInheritance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigTTLInheritance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	return toSerialize, nil
}

type NullableConfigTTLInheritance struct {
	value *ConfigTTLInheritance
	isSet bool
}

func (v NullableConfigTTLInheritance) Get() *ConfigTTLInheritance {
	return v.value
}

func (v *NullableConfigTTLInheritance) Set(val *ConfigTTLInheritance) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigTTLInheritance) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigTTLInheritance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigTTLInheritance(val *ConfigTTLInheritance) *NullableConfigTTLInheritance {
	return &NullableConfigTTLInheritance{value: val, isSet: true}
}

func (v NullableConfigTTLInheritance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigTTLInheritance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
