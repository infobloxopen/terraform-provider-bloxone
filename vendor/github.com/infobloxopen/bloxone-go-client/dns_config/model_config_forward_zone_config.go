/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_config

import (
	"encoding/json"
)

// checks if the ConfigForwardZoneConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigForwardZoneConfig{}

// ConfigForwardZoneConfig struct for ConfigForwardZoneConfig
type ConfigForwardZoneConfig struct {
	// Optional. External DNS servers to forward to. Order is not significant.
	ExternalForwarders []ConfigForwarder `json:"external_forwarders,omitempty"`
	// The resource identifier.
	Hosts []string `json:"hosts,omitempty"`
	// The resource identifier.
	InternalForwarders []string `json:"internal_forwarders,omitempty"`
	// The resource identifier.
	Nsgs []string `json:"nsgs,omitempty"`
}

// NewConfigForwardZoneConfig instantiates a new ConfigForwardZoneConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigForwardZoneConfig() *ConfigForwardZoneConfig {
	this := ConfigForwardZoneConfig{}
	return &this
}

// NewConfigForwardZoneConfigWithDefaults instantiates a new ConfigForwardZoneConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigForwardZoneConfigWithDefaults() *ConfigForwardZoneConfig {
	this := ConfigForwardZoneConfig{}
	return &this
}

// GetExternalForwarders returns the ExternalForwarders field value if set, zero value otherwise.
func (o *ConfigForwardZoneConfig) GetExternalForwarders() []ConfigForwarder {
	if o == nil || IsNil(o.ExternalForwarders) {
		var ret []ConfigForwarder
		return ret
	}
	return o.ExternalForwarders
}

// GetExternalForwardersOk returns a tuple with the ExternalForwarders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigForwardZoneConfig) GetExternalForwardersOk() ([]ConfigForwarder, bool) {
	if o == nil || IsNil(o.ExternalForwarders) {
		return nil, false
	}
	return o.ExternalForwarders, true
}

// HasExternalForwarders returns a boolean if a field has been set.
func (o *ConfigForwardZoneConfig) HasExternalForwarders() bool {
	if o != nil && !IsNil(o.ExternalForwarders) {
		return true
	}

	return false
}

// SetExternalForwarders gets a reference to the given []ConfigForwarder and assigns it to the ExternalForwarders field.
func (o *ConfigForwardZoneConfig) SetExternalForwarders(v []ConfigForwarder) {
	o.ExternalForwarders = v
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *ConfigForwardZoneConfig) GetHosts() []string {
	if o == nil || IsNil(o.Hosts) {
		var ret []string
		return ret
	}
	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigForwardZoneConfig) GetHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.Hosts) {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *ConfigForwardZoneConfig) HasHosts() bool {
	if o != nil && !IsNil(o.Hosts) {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []string and assigns it to the Hosts field.
func (o *ConfigForwardZoneConfig) SetHosts(v []string) {
	o.Hosts = v
}

// GetInternalForwarders returns the InternalForwarders field value if set, zero value otherwise.
func (o *ConfigForwardZoneConfig) GetInternalForwarders() []string {
	if o == nil || IsNil(o.InternalForwarders) {
		var ret []string
		return ret
	}
	return o.InternalForwarders
}

// GetInternalForwardersOk returns a tuple with the InternalForwarders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigForwardZoneConfig) GetInternalForwardersOk() ([]string, bool) {
	if o == nil || IsNil(o.InternalForwarders) {
		return nil, false
	}
	return o.InternalForwarders, true
}

// HasInternalForwarders returns a boolean if a field has been set.
func (o *ConfigForwardZoneConfig) HasInternalForwarders() bool {
	if o != nil && !IsNil(o.InternalForwarders) {
		return true
	}

	return false
}

// SetInternalForwarders gets a reference to the given []string and assigns it to the InternalForwarders field.
func (o *ConfigForwardZoneConfig) SetInternalForwarders(v []string) {
	o.InternalForwarders = v
}

// GetNsgs returns the Nsgs field value if set, zero value otherwise.
func (o *ConfigForwardZoneConfig) GetNsgs() []string {
	if o == nil || IsNil(o.Nsgs) {
		var ret []string
		return ret
	}
	return o.Nsgs
}

// GetNsgsOk returns a tuple with the Nsgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigForwardZoneConfig) GetNsgsOk() ([]string, bool) {
	if o == nil || IsNil(o.Nsgs) {
		return nil, false
	}
	return o.Nsgs, true
}

// HasNsgs returns a boolean if a field has been set.
func (o *ConfigForwardZoneConfig) HasNsgs() bool {
	if o != nil && !IsNil(o.Nsgs) {
		return true
	}

	return false
}

// SetNsgs gets a reference to the given []string and assigns it to the Nsgs field.
func (o *ConfigForwardZoneConfig) SetNsgs(v []string) {
	o.Nsgs = v
}

func (o ConfigForwardZoneConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigForwardZoneConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExternalForwarders) {
		toSerialize["external_forwarders"] = o.ExternalForwarders
	}
	if !IsNil(o.Hosts) {
		toSerialize["hosts"] = o.Hosts
	}
	if !IsNil(o.InternalForwarders) {
		toSerialize["internal_forwarders"] = o.InternalForwarders
	}
	if !IsNil(o.Nsgs) {
		toSerialize["nsgs"] = o.Nsgs
	}
	return toSerialize, nil
}

type NullableConfigForwardZoneConfig struct {
	value *ConfigForwardZoneConfig
	isSet bool
}

func (v NullableConfigForwardZoneConfig) Get() *ConfigForwardZoneConfig {
	return v.value
}

func (v *NullableConfigForwardZoneConfig) Set(val *ConfigForwardZoneConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigForwardZoneConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigForwardZoneConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigForwardZoneConfig(val *ConfigForwardZoneConfig) *NullableConfigForwardZoneConfig {
	return &NullableConfigForwardZoneConfig{value: val, isSet: true}
}

func (v NullableConfigForwardZoneConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigForwardZoneConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
