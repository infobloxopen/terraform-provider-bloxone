/*
Infrastructure Management API

The **Infrastructure Management API** provides a RESTful interface to manage Infrastructure Hosts and Services objects.  The following is a list of the different Services and their string types (the string types are to be used with the APIs for the `service_type` field):  | Service name | Service type |   | ------ | ------ |   | Access Authentication | authn |   | Anycast | anycast |   | Data Connector | cdc |   | DHCP | dhcp |   | DNS | dns |   | DNS Forwarding Proxy | dfp |   | NIOS Grid Connector | orpheus |   | MS AD Sync | msad |   | NTP | ntp |   | BGP | bgp |   | RIP | rip |   | OSPF | ospf |    ---   ### Hosts API  The Hosts API is used to manage the Infrastructure Host resources. These include various operations related to hosts such as viewing, creating, updating, replacing, disconnecting, and deleting Hosts. Management of Hosts is done from the Cloud Services Portal (CSP) by navigating to the Manage -> Infrastructure -> Hosts tab.  ---   ### Services API  The Services API is used to manage the Infrastructure Service resources (a.k.a. BloxOne applications). These include various operations related to hosts such as viewing, creating, updating, starting/stopping, configuring, and deleting Services. Management of Services is done from the Cloud Services Portal (CSP) by navigating to the Manage -> Infrastructure -> Services tab.  ---   ### Detail APIs  The Detail APIs are read-only APIs used to list all the Infrastructure resources (Hosts and Services). Each resource record returned also contains information about its other associated resources and the status information for itself and the associated resource(s) (i.e., Host/Service status).  ---

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infra_mgmt

import (
	"encoding/json"
)

// checks if the ApiPageInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiPageInfo{}

// ApiPageInfo PageInfo represents both server-driven and client-driven pagination response. Server-driven pagination is a model in which the server returns some amount of data along with an token indicating there is more data and where subsequent queries can get the next page of data. Client-driven pagination is a model in which rows are addressable by offset and page size (limit).
type ApiPageInfo struct {
	// The service may optionally include the offset of the next page of resources. A null value indicates no more pages.
	Offset *int32 `json:"offset,omitempty"`
	// The service response should contain a string to indicate the next page of resources. A null value indicates no more pages.
	PageToken *string `json:"page_token,omitempty"`
	// The service may optionally include the total number of resources being paged.
	Size *int32 `json:"size,omitempty"`
}

// NewApiPageInfo instantiates a new ApiPageInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiPageInfo() *ApiPageInfo {
	this := ApiPageInfo{}
	return &this
}

// NewApiPageInfoWithDefaults instantiates a new ApiPageInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiPageInfoWithDefaults() *ApiPageInfo {
	this := ApiPageInfo{}
	return &this
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *ApiPageInfo) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiPageInfo) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *ApiPageInfo) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *ApiPageInfo) SetOffset(v int32) {
	o.Offset = &v
}

// GetPageToken returns the PageToken field value if set, zero value otherwise.
func (o *ApiPageInfo) GetPageToken() string {
	if o == nil || IsNil(o.PageToken) {
		var ret string
		return ret
	}
	return *o.PageToken
}

// GetPageTokenOk returns a tuple with the PageToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiPageInfo) GetPageTokenOk() (*string, bool) {
	if o == nil || IsNil(o.PageToken) {
		return nil, false
	}
	return o.PageToken, true
}

// HasPageToken returns a boolean if a field has been set.
func (o *ApiPageInfo) HasPageToken() bool {
	if o != nil && !IsNil(o.PageToken) {
		return true
	}

	return false
}

// SetPageToken gets a reference to the given string and assigns it to the PageToken field.
func (o *ApiPageInfo) SetPageToken(v string) {
	o.PageToken = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ApiPageInfo) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiPageInfo) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ApiPageInfo) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *ApiPageInfo) SetSize(v int32) {
	o.Size = &v
}

func (o ApiPageInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiPageInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.PageToken) {
		toSerialize["page_token"] = o.PageToken
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return toSerialize, nil
}

type NullableApiPageInfo struct {
	value *ApiPageInfo
	isSet bool
}

func (v NullableApiPageInfo) Get() *ApiPageInfo {
	return v.value
}

func (v *NullableApiPageInfo) Set(val *ApiPageInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableApiPageInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableApiPageInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiPageInfo(val *ApiPageInfo) *NullableApiPageInfo {
	return &NullableApiPageInfo{value: val, isSet: true}
}

func (v NullableApiPageInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiPageInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
