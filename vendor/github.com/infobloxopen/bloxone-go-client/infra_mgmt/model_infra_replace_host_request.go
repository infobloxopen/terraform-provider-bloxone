/*
Infrastructure Management API

The **Infrastructure Management API** provides a RESTful interface to manage Infrastructure Hosts and Services objects.  The following is a list of the different Services and their string types (the string types are to be used with the APIs for the `service_type` field):  | Service name | Service type |   | ------ | ------ |   | Access Authentication | authn |   | Anycast | anycast |   | Data Connector | cdc |   | DHCP | dhcp |   | DNS | dns |   | DNS Forwarding Proxy | dfp |   | NIOS Grid Connector | orpheus |   | MS AD Sync | msad |   | NTP | ntp |   | BGP | bgp |   | RIP | rip |   | OSPF | ospf |    ---   ### Hosts API  The Hosts API is used to manage the Infrastructure Host resources. These include various operations related to hosts such as viewing, creating, updating, replacing, disconnecting, and deleting Hosts. Management of Hosts is done from the Cloud Services Portal (CSP) by navigating to the Manage -> Infrastructure -> Hosts tab.  ---   ### Services API  The Services API is used to manage the Infrastructure Service resources (a.k.a. BloxOne applications). These include various operations related to hosts such as viewing, creating, updating, starting/stopping, configuring, and deleting Services. Management of Services is done from the Cloud Services Portal (CSP) by navigating to the Manage -> Infrastructure -> Services tab.  ---   ### Detail APIs  The Detail APIs are read-only APIs used to list all the Infrastructure resources (Hosts and Services). Each resource record returned also contains information about its other associated resources and the status information for itself and the associated resource(s) (i.e., Host/Service status).  ---

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infra_mgmt

import (
	"encoding/json"
)

// checks if the InfraReplaceHostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfraReplaceHostRequest{}

// InfraReplaceHostRequest struct for InfraReplaceHostRequest
type InfraReplaceHostRequest struct {
	// The resource identifier.
	From *string `json:"from,omitempty"`
	// The resource identifier.
	To *string `json:"to,omitempty"`
}

// NewInfraReplaceHostRequest instantiates a new InfraReplaceHostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfraReplaceHostRequest() *InfraReplaceHostRequest {
	this := InfraReplaceHostRequest{}
	return &this
}

// NewInfraReplaceHostRequestWithDefaults instantiates a new InfraReplaceHostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfraReplaceHostRequestWithDefaults() *InfraReplaceHostRequest {
	this := InfraReplaceHostRequest{}
	return &this
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *InfraReplaceHostRequest) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraReplaceHostRequest) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *InfraReplaceHostRequest) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *InfraReplaceHostRequest) SetFrom(v string) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *InfraReplaceHostRequest) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraReplaceHostRequest) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *InfraReplaceHostRequest) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *InfraReplaceHostRequest) SetTo(v string) {
	o.To = &v
}

func (o InfraReplaceHostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfraReplaceHostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	return toSerialize, nil
}

type NullableInfraReplaceHostRequest struct {
	value *InfraReplaceHostRequest
	isSet bool
}

func (v NullableInfraReplaceHostRequest) Get() *InfraReplaceHostRequest {
	return v.value
}

func (v *NullableInfraReplaceHostRequest) Set(val *InfraReplaceHostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInfraReplaceHostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInfraReplaceHostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfraReplaceHostRequest(val *InfraReplaceHostRequest) *NullableInfraReplaceHostRequest {
	return &NullableInfraReplaceHostRequest{value: val, isSet: true}
}

func (v NullableInfraReplaceHostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfraReplaceHostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
