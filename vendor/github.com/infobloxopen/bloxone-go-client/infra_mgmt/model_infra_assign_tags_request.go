/*
Infrastructure Management API

The **Infrastructure Management API** provides a RESTful interface to manage Infrastructure Hosts and Services objects.  The following is a list of the different Services and their string types (the string types are to be used with the APIs for the `service_type` field):  | Service name | Service type |   | ------ | ------ |   | Access Authentication | authn |   | Anycast | anycast |   | Data Connector | cdc |   | DHCP | dhcp |   | DNS | dns |   | DNS Forwarding Proxy | dfp |   | NIOS Grid Connector | orpheus |   | MS AD Sync | msad |   | NTP | ntp |   | BGP | bgp |   | RIP | rip |   | OSPF | ospf |    ---   ### Hosts API  The Hosts API is used to manage the Infrastructure Host resources. These include various operations related to hosts such as viewing, creating, updating, replacing, disconnecting, and deleting Hosts. Management of Hosts is done from the Cloud Services Portal (CSP) by navigating to the Manage -> Infrastructure -> Hosts tab.  ---   ### Services API  The Services API is used to manage the Infrastructure Service resources (a.k.a. BloxOne applications). These include various operations related to hosts such as viewing, creating, updating, starting/stopping, configuring, and deleting Services. Management of Services is done from the Cloud Services Portal (CSP) by navigating to the Manage -> Infrastructure -> Services tab.  ---   ### Detail APIs  The Detail APIs are read-only APIs used to list all the Infrastructure resources (Hosts and Services). Each resource record returned also contains information about its other associated resources and the status information for itself and the associated resource(s) (i.e., Host/Service status).  ---

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infra_mgmt

import (
	"encoding/json"
)

// checks if the InfraAssignTagsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfraAssignTagsRequest{}

// InfraAssignTagsRequest struct for InfraAssignTagsRequest
type InfraAssignTagsRequest struct {
	// The resource identifier.
	Ids      []string               `json:"ids,omitempty"`
	Override *bool                  `json:"override,omitempty"`
	Tags     map[string]interface{} `json:"tags,omitempty"`
}

// NewInfraAssignTagsRequest instantiates a new InfraAssignTagsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfraAssignTagsRequest() *InfraAssignTagsRequest {
	this := InfraAssignTagsRequest{}
	return &this
}

// NewInfraAssignTagsRequestWithDefaults instantiates a new InfraAssignTagsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfraAssignTagsRequestWithDefaults() *InfraAssignTagsRequest {
	this := InfraAssignTagsRequest{}
	return &this
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *InfraAssignTagsRequest) GetIds() []string {
	if o == nil || IsNil(o.Ids) {
		var ret []string
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraAssignTagsRequest) GetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *InfraAssignTagsRequest) HasIds() bool {
	if o != nil && !IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *InfraAssignTagsRequest) SetIds(v []string) {
	o.Ids = v
}

// GetOverride returns the Override field value if set, zero value otherwise.
func (o *InfraAssignTagsRequest) GetOverride() bool {
	if o == nil || IsNil(o.Override) {
		var ret bool
		return ret
	}
	return *o.Override
}

// GetOverrideOk returns a tuple with the Override field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraAssignTagsRequest) GetOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.Override) {
		return nil, false
	}
	return o.Override, true
}

// HasOverride returns a boolean if a field has been set.
func (o *InfraAssignTagsRequest) HasOverride() bool {
	if o != nil && !IsNil(o.Override) {
		return true
	}

	return false
}

// SetOverride gets a reference to the given bool and assigns it to the Override field.
func (o *InfraAssignTagsRequest) SetOverride(v bool) {
	o.Override = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *InfraAssignTagsRequest) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraAssignTagsRequest) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *InfraAssignTagsRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *InfraAssignTagsRequest) SetTags(v map[string]interface{}) {
	o.Tags = v
}

func (o InfraAssignTagsRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfraAssignTagsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ids) {
		toSerialize["ids"] = o.Ids
	}
	if !IsNil(o.Override) {
		toSerialize["override"] = o.Override
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableInfraAssignTagsRequest struct {
	value *InfraAssignTagsRequest
	isSet bool
}

func (v NullableInfraAssignTagsRequest) Get() *InfraAssignTagsRequest {
	return v.value
}

func (v *NullableInfraAssignTagsRequest) Set(val *InfraAssignTagsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInfraAssignTagsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInfraAssignTagsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfraAssignTagsRequest(val *InfraAssignTagsRequest) *NullableInfraAssignTagsRequest {
	return &NullableInfraAssignTagsRequest{value: val, isSet: true}
}

func (v NullableInfraAssignTagsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfraAssignTagsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
