/*
Infrastructure Management API

The **Infrastructure Management API** provides a RESTful interface to manage Infrastructure Hosts and Services objects.  The following is a list of the different Services and their string types (the string types are to be used with the APIs for the `service_type` field):  | Service name | Service type |   | ------ | ------ |   | Access Authentication | authn |   | Anycast | anycast |   | Data Connector | cdc |   | DHCP | dhcp |   | DNS | dns |   | DNS Forwarding Proxy | dfp |   | NIOS Grid Connector | orpheus |   | MS AD Sync | msad |   | NTP | ntp |   | BGP | bgp |   | RIP | rip |   | OSPF | ospf |    ---   ### Hosts API  The Hosts API is used to manage the Infrastructure Host resources. These include various operations related to hosts such as viewing, creating, updating, replacing, disconnecting, and deleting Hosts. Management of Hosts is done from the Cloud Services Portal (CSP) by navigating to the Manage -> Infrastructure -> Hosts tab.  ---   ### Services API  The Services API is used to manage the Infrastructure Service resources (a.k.a. BloxOne applications). These include various operations related to hosts such as viewing, creating, updating, starting/stopping, configuring, and deleting Services. Management of Services is done from the Cloud Services Portal (CSP) by navigating to the Manage -> Infrastructure -> Services tab.  ---   ### Detail APIs  The Detail APIs are read-only APIs used to list all the Infrastructure resources (Hosts and Services). Each resource record returned also contains information about its other associated resources and the status information for itself and the associated resource(s) (i.e., Host/Service status).  ---

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infra_mgmt

import (
	"encoding/json"
	"time"
)

// checks if the InfraDetailHostServiceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfraDetailHostServiceConfig{}

// InfraDetailHostServiceConfig struct for InfraDetailHostServiceConfig
type InfraDetailHostServiceConfig struct {
	// The current version of the Service deployed on the Host.
	CurrentVersion *string `json:"current_version,omitempty"`
	// The resource identifier.
	ServiceId *string `json:"service_id,omitempty"`
	// The name of the Service.
	ServiceName *string `json:"service_name,omitempty"`
	// The type of the Service deployed on the Host (`dns`, `cdc`, etc.).
	ServiceType *string                  `json:"service_type,omitempty"`
	Status      *InfraShortServiceStatus `json:"status,omitempty"`
	// The timestamp of the latest upgrade of the Host-specific Service configuration.
	UpgradedAt *time.Time `json:"upgraded_at,omitempty"`
}

// NewInfraDetailHostServiceConfig instantiates a new InfraDetailHostServiceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfraDetailHostServiceConfig() *InfraDetailHostServiceConfig {
	this := InfraDetailHostServiceConfig{}
	return &this
}

// NewInfraDetailHostServiceConfigWithDefaults instantiates a new InfraDetailHostServiceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfraDetailHostServiceConfigWithDefaults() *InfraDetailHostServiceConfig {
	this := InfraDetailHostServiceConfig{}
	return &this
}

// GetCurrentVersion returns the CurrentVersion field value if set, zero value otherwise.
func (o *InfraDetailHostServiceConfig) GetCurrentVersion() string {
	if o == nil || IsNil(o.CurrentVersion) {
		var ret string
		return ret
	}
	return *o.CurrentVersion
}

// GetCurrentVersionOk returns a tuple with the CurrentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraDetailHostServiceConfig) GetCurrentVersionOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentVersion) {
		return nil, false
	}
	return o.CurrentVersion, true
}

// HasCurrentVersion returns a boolean if a field has been set.
func (o *InfraDetailHostServiceConfig) HasCurrentVersion() bool {
	if o != nil && !IsNil(o.CurrentVersion) {
		return true
	}

	return false
}

// SetCurrentVersion gets a reference to the given string and assigns it to the CurrentVersion field.
func (o *InfraDetailHostServiceConfig) SetCurrentVersion(v string) {
	o.CurrentVersion = &v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *InfraDetailHostServiceConfig) GetServiceId() string {
	if o == nil || IsNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraDetailHostServiceConfig) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *InfraDetailHostServiceConfig) HasServiceId() bool {
	if o != nil && !IsNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *InfraDetailHostServiceConfig) SetServiceId(v string) {
	o.ServiceId = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *InfraDetailHostServiceConfig) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraDetailHostServiceConfig) GetServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *InfraDetailHostServiceConfig) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *InfraDetailHostServiceConfig) SetServiceName(v string) {
	o.ServiceName = &v
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise.
func (o *InfraDetailHostServiceConfig) GetServiceType() string {
	if o == nil || IsNil(o.ServiceType) {
		var ret string
		return ret
	}
	return *o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraDetailHostServiceConfig) GetServiceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceType) {
		return nil, false
	}
	return o.ServiceType, true
}

// HasServiceType returns a boolean if a field has been set.
func (o *InfraDetailHostServiceConfig) HasServiceType() bool {
	if o != nil && !IsNil(o.ServiceType) {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given string and assigns it to the ServiceType field.
func (o *InfraDetailHostServiceConfig) SetServiceType(v string) {
	o.ServiceType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *InfraDetailHostServiceConfig) GetStatus() InfraShortServiceStatus {
	if o == nil || IsNil(o.Status) {
		var ret InfraShortServiceStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraDetailHostServiceConfig) GetStatusOk() (*InfraShortServiceStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *InfraDetailHostServiceConfig) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given InfraShortServiceStatus and assigns it to the Status field.
func (o *InfraDetailHostServiceConfig) SetStatus(v InfraShortServiceStatus) {
	o.Status = &v
}

// GetUpgradedAt returns the UpgradedAt field value if set, zero value otherwise.
func (o *InfraDetailHostServiceConfig) GetUpgradedAt() time.Time {
	if o == nil || IsNil(o.UpgradedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpgradedAt
}

// GetUpgradedAtOk returns a tuple with the UpgradedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraDetailHostServiceConfig) GetUpgradedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpgradedAt) {
		return nil, false
	}
	return o.UpgradedAt, true
}

// HasUpgradedAt returns a boolean if a field has been set.
func (o *InfraDetailHostServiceConfig) HasUpgradedAt() bool {
	if o != nil && !IsNil(o.UpgradedAt) {
		return true
	}

	return false
}

// SetUpgradedAt gets a reference to the given time.Time and assigns it to the UpgradedAt field.
func (o *InfraDetailHostServiceConfig) SetUpgradedAt(v time.Time) {
	o.UpgradedAt = &v
}

func (o InfraDetailHostServiceConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfraDetailHostServiceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrentVersion) {
		toSerialize["current_version"] = o.CurrentVersion
	}
	if !IsNil(o.ServiceId) {
		toSerialize["service_id"] = o.ServiceId
	}
	if !IsNil(o.ServiceName) {
		toSerialize["service_name"] = o.ServiceName
	}
	if !IsNil(o.ServiceType) {
		toSerialize["service_type"] = o.ServiceType
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.UpgradedAt) {
		toSerialize["upgraded_at"] = o.UpgradedAt
	}
	return toSerialize, nil
}

type NullableInfraDetailHostServiceConfig struct {
	value *InfraDetailHostServiceConfig
	isSet bool
}

func (v NullableInfraDetailHostServiceConfig) Get() *InfraDetailHostServiceConfig {
	return v.value
}

func (v *NullableInfraDetailHostServiceConfig) Set(val *InfraDetailHostServiceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableInfraDetailHostServiceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableInfraDetailHostServiceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfraDetailHostServiceConfig(val *InfraDetailHostServiceConfig) *NullableInfraDetailHostServiceConfig {
	return &NullableInfraDetailHostServiceConfig{value: val, isSet: true}
}

func (v NullableInfraDetailHostServiceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfraDetailHostServiceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
