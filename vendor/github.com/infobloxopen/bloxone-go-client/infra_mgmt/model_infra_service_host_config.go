/*
Infrastructure Management API

The **Infrastructure Management API** provides a RESTful interface to manage Infrastructure Hosts and Services objects.  The following is a list of the different Services and their string types (the string types are to be used with the APIs for the `service_type` field):  | Service name | Service type |   | ------ | ------ |   | Access Authentication | authn |   | Anycast | anycast |   | Data Connector | cdc |   | DHCP | dhcp |   | DNS | dns |   | DNS Forwarding Proxy | dfp |   | NIOS Grid Connector | orpheus |   | MS AD Sync | msad |   | NTP | ntp |   | BGP | bgp |   | RIP | rip |   | OSPF | ospf |    ---   ### Hosts API  The Hosts API is used to manage the Infrastructure Host resources. These include various operations related to hosts such as viewing, creating, updating, replacing, disconnecting, and deleting Hosts. Management of Hosts is done from the Cloud Services Portal (CSP) by navigating to the Manage -> Infrastructure -> Hosts tab.  ---   ### Services API  The Services API is used to manage the Infrastructure Service resources (a.k.a. BloxOne applications). These include various operations related to hosts such as viewing, creating, updating, starting/stopping, configuring, and deleting Services. Management of Services is done from the Cloud Services Portal (CSP) by navigating to the Manage -> Infrastructure -> Services tab.  ---   ### Detail APIs  The Detail APIs are read-only APIs used to list all the Infrastructure resources (Hosts and Services). Each resource record returned also contains information about its other associated resources and the status information for itself and the associated resource(s) (i.e., Host/Service status).  ---

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infra_mgmt

import (
	"encoding/json"
	"time"
)

// checks if the InfraServiceHostConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfraServiceHostConfig{}

// InfraServiceHostConfig ServiceHostConfig is the specific configuration for each Service deployed on a Host
type InfraServiceHostConfig struct {
	// The current version of the Service deployed on the Host.
	CurrentVersion *string `json:"current_version,omitempty"`
	// The field to carry any extra data specific to this configuration.
	ExtraData *string `json:"extra_data,omitempty"`
	// The resource identifier.
	HostId *string `json:"host_id,omitempty"`
	// The resource identifier.
	Id *string `json:"id,omitempty"`
	// The resource identifier.
	ServiceId *string `json:"service_id,omitempty"`
	// The type of the Service deployed on the Host (`dns`, `cdc`, etc.).
	ServiceType *string `json:"service_type,omitempty"`
	// The timestamp of the latest upgrade of the Host-specific Service configuration.
	UpgradedAt *time.Time `json:"upgraded_at,omitempty"`
}

// NewInfraServiceHostConfig instantiates a new InfraServiceHostConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfraServiceHostConfig() *InfraServiceHostConfig {
	this := InfraServiceHostConfig{}
	return &this
}

// NewInfraServiceHostConfigWithDefaults instantiates a new InfraServiceHostConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfraServiceHostConfigWithDefaults() *InfraServiceHostConfig {
	this := InfraServiceHostConfig{}
	return &this
}

// GetCurrentVersion returns the CurrentVersion field value if set, zero value otherwise.
func (o *InfraServiceHostConfig) GetCurrentVersion() string {
	if o == nil || IsNil(o.CurrentVersion) {
		var ret string
		return ret
	}
	return *o.CurrentVersion
}

// GetCurrentVersionOk returns a tuple with the CurrentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraServiceHostConfig) GetCurrentVersionOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentVersion) {
		return nil, false
	}
	return o.CurrentVersion, true
}

// HasCurrentVersion returns a boolean if a field has been set.
func (o *InfraServiceHostConfig) HasCurrentVersion() bool {
	if o != nil && !IsNil(o.CurrentVersion) {
		return true
	}

	return false
}

// SetCurrentVersion gets a reference to the given string and assigns it to the CurrentVersion field.
func (o *InfraServiceHostConfig) SetCurrentVersion(v string) {
	o.CurrentVersion = &v
}

// GetExtraData returns the ExtraData field value if set, zero value otherwise.
func (o *InfraServiceHostConfig) GetExtraData() string {
	if o == nil || IsNil(o.ExtraData) {
		var ret string
		return ret
	}
	return *o.ExtraData
}

// GetExtraDataOk returns a tuple with the ExtraData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraServiceHostConfig) GetExtraDataOk() (*string, bool) {
	if o == nil || IsNil(o.ExtraData) {
		return nil, false
	}
	return o.ExtraData, true
}

// HasExtraData returns a boolean if a field has been set.
func (o *InfraServiceHostConfig) HasExtraData() bool {
	if o != nil && !IsNil(o.ExtraData) {
		return true
	}

	return false
}

// SetExtraData gets a reference to the given string and assigns it to the ExtraData field.
func (o *InfraServiceHostConfig) SetExtraData(v string) {
	o.ExtraData = &v
}

// GetHostId returns the HostId field value if set, zero value otherwise.
func (o *InfraServiceHostConfig) GetHostId() string {
	if o == nil || IsNil(o.HostId) {
		var ret string
		return ret
	}
	return *o.HostId
}

// GetHostIdOk returns a tuple with the HostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraServiceHostConfig) GetHostIdOk() (*string, bool) {
	if o == nil || IsNil(o.HostId) {
		return nil, false
	}
	return o.HostId, true
}

// HasHostId returns a boolean if a field has been set.
func (o *InfraServiceHostConfig) HasHostId() bool {
	if o != nil && !IsNil(o.HostId) {
		return true
	}

	return false
}

// SetHostId gets a reference to the given string and assigns it to the HostId field.
func (o *InfraServiceHostConfig) SetHostId(v string) {
	o.HostId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InfraServiceHostConfig) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraServiceHostConfig) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InfraServiceHostConfig) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InfraServiceHostConfig) SetId(v string) {
	o.Id = &v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *InfraServiceHostConfig) GetServiceId() string {
	if o == nil || IsNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraServiceHostConfig) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *InfraServiceHostConfig) HasServiceId() bool {
	if o != nil && !IsNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *InfraServiceHostConfig) SetServiceId(v string) {
	o.ServiceId = &v
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise.
func (o *InfraServiceHostConfig) GetServiceType() string {
	if o == nil || IsNil(o.ServiceType) {
		var ret string
		return ret
	}
	return *o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraServiceHostConfig) GetServiceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceType) {
		return nil, false
	}
	return o.ServiceType, true
}

// HasServiceType returns a boolean if a field has been set.
func (o *InfraServiceHostConfig) HasServiceType() bool {
	if o != nil && !IsNil(o.ServiceType) {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given string and assigns it to the ServiceType field.
func (o *InfraServiceHostConfig) SetServiceType(v string) {
	o.ServiceType = &v
}

// GetUpgradedAt returns the UpgradedAt field value if set, zero value otherwise.
func (o *InfraServiceHostConfig) GetUpgradedAt() time.Time {
	if o == nil || IsNil(o.UpgradedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpgradedAt
}

// GetUpgradedAtOk returns a tuple with the UpgradedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraServiceHostConfig) GetUpgradedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpgradedAt) {
		return nil, false
	}
	return o.UpgradedAt, true
}

// HasUpgradedAt returns a boolean if a field has been set.
func (o *InfraServiceHostConfig) HasUpgradedAt() bool {
	if o != nil && !IsNil(o.UpgradedAt) {
		return true
	}

	return false
}

// SetUpgradedAt gets a reference to the given time.Time and assigns it to the UpgradedAt field.
func (o *InfraServiceHostConfig) SetUpgradedAt(v time.Time) {
	o.UpgradedAt = &v
}

func (o InfraServiceHostConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfraServiceHostConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrentVersion) {
		toSerialize["current_version"] = o.CurrentVersion
	}
	if !IsNil(o.ExtraData) {
		toSerialize["extra_data"] = o.ExtraData
	}
	if !IsNil(o.HostId) {
		toSerialize["host_id"] = o.HostId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ServiceId) {
		toSerialize["service_id"] = o.ServiceId
	}
	if !IsNil(o.ServiceType) {
		toSerialize["service_type"] = o.ServiceType
	}
	if !IsNil(o.UpgradedAt) {
		toSerialize["upgraded_at"] = o.UpgradedAt
	}
	return toSerialize, nil
}

type NullableInfraServiceHostConfig struct {
	value *InfraServiceHostConfig
	isSet bool
}

func (v NullableInfraServiceHostConfig) Get() *InfraServiceHostConfig {
	return v.value
}

func (v *NullableInfraServiceHostConfig) Set(val *InfraServiceHostConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableInfraServiceHostConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableInfraServiceHostConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfraServiceHostConfig(val *InfraServiceHostConfig) *NullableInfraServiceHostConfig {
	return &NullableInfraServiceHostConfig{value: val, isSet: true}
}

func (v NullableInfraServiceHostConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfraServiceHostConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
