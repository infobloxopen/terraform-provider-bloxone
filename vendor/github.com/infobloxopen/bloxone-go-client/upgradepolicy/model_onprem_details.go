/*
Schedule Software/Config Updates

Infoblox by default does automatic software updates when they become available. Updates are applied to all on-prem hosts, physical or virtual. However, you can override and schedule the software updates. You can also defer the updates to a later date and time. You can configure up to a total of 50 deferrals (scheduled and deferred software updates), which means you have the flexibility to create up to 50 update groups across different on-prem hosts by mapping with appropriate tags. Tags are be used to associate deferrals (scheduled or deferred) with a specific or group of onprem-hosts. Apart from software update deferrals, config update deferrals also can be configured using these overrides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package upgradepolicy

import (
	"encoding/json"
)

// checks if the OnpremDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnpremDetails{}

// OnpremDetails struct for OnpremDetails
type OnpremDetails struct {
	Hostid               *string `json:"hostid,omitempty"`
	Ophid                *string `json:"ophid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OnpremDetails OnpremDetails

// NewOnpremDetails instantiates a new OnpremDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnpremDetails() *OnpremDetails {
	this := OnpremDetails{}
	return &this
}

// NewOnpremDetailsWithDefaults instantiates a new OnpremDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnpremDetailsWithDefaults() *OnpremDetails {
	this := OnpremDetails{}
	return &this
}

// GetHostid returns the Hostid field value if set, zero value otherwise.
func (o *OnpremDetails) GetHostid() string {
	if o == nil || IsNil(o.Hostid) {
		var ret string
		return ret
	}
	return *o.Hostid
}

// GetHostidOk returns a tuple with the Hostid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnpremDetails) GetHostidOk() (*string, bool) {
	if o == nil || IsNil(o.Hostid) {
		return nil, false
	}
	return o.Hostid, true
}

// HasHostid returns a boolean if a field has been set.
func (o *OnpremDetails) HasHostid() bool {
	if o != nil && !IsNil(o.Hostid) {
		return true
	}

	return false
}

// SetHostid gets a reference to the given string and assigns it to the Hostid field.
func (o *OnpremDetails) SetHostid(v string) {
	o.Hostid = &v
}

// GetOphid returns the Ophid field value if set, zero value otherwise.
func (o *OnpremDetails) GetOphid() string {
	if o == nil || IsNil(o.Ophid) {
		var ret string
		return ret
	}
	return *o.Ophid
}

// GetOphidOk returns a tuple with the Ophid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnpremDetails) GetOphidOk() (*string, bool) {
	if o == nil || IsNil(o.Ophid) {
		return nil, false
	}
	return o.Ophid, true
}

// HasOphid returns a boolean if a field has been set.
func (o *OnpremDetails) HasOphid() bool {
	if o != nil && !IsNil(o.Ophid) {
		return true
	}

	return false
}

// SetOphid gets a reference to the given string and assigns it to the Ophid field.
func (o *OnpremDetails) SetOphid(v string) {
	o.Ophid = &v
}

func (o OnpremDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnpremDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hostid) {
		toSerialize["hostid"] = o.Hostid
	}
	if !IsNil(o.Ophid) {
		toSerialize["ophid"] = o.Ophid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OnpremDetails) UnmarshalJSON(data []byte) (err error) {
	varOnpremDetails := _OnpremDetails{}

	err = json.Unmarshal(data, &varOnpremDetails)

	if err != nil {
		return err
	}

	*o = OnpremDetails(varOnpremDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "hostid")
		delete(additionalProperties, "ophid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOnpremDetails struct {
	value *OnpremDetails
	isSet bool
}

func (v NullableOnpremDetails) Get() *OnpremDetails {
	return v.value
}

func (v *NullableOnpremDetails) Set(val *OnpremDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableOnpremDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableOnpremDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnpremDetails(val *OnpremDetails) *NullableOnpremDetails {
	return &NullableOnpremDetails{value: val, isSet: true}
}

func (v NullableOnpremDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnpremDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
