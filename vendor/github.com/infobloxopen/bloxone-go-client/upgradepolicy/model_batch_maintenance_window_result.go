/*
Schedule Software/Config Updates

Infoblox by default does automatic software updates when they become available. Updates are applied to all on-prem hosts, physical or virtual. However, you can override and schedule the software updates. You can also defer the updates to a later date and time. You can configure up to a total of 50 deferrals (scheduled and deferred software updates), which means you have the flexibility to create up to 50 update groups across different on-prem hosts by mapping with appropriate tags. Tags are be used to associate deferrals (scheduled or deferred) with a specific or group of onprem-hosts. Apart from software update deferrals, config update deferrals also can be configured using these overrides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package upgradepolicy

import (
	"encoding/json"
)

// checks if the BatchMaintenanceWindowResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchMaintenanceWindowResult{}

// BatchMaintenanceWindowResult struct for BatchMaintenanceWindowResult
type BatchMaintenanceWindowResult struct {
	CreatedIds           []string            `json:"created_ids,omitempty"`
	UpdatedMws           []MaintenanceWindow `json:"updated_mws,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BatchMaintenanceWindowResult BatchMaintenanceWindowResult

// NewBatchMaintenanceWindowResult instantiates a new BatchMaintenanceWindowResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchMaintenanceWindowResult() *BatchMaintenanceWindowResult {
	this := BatchMaintenanceWindowResult{}
	return &this
}

// NewBatchMaintenanceWindowResultWithDefaults instantiates a new BatchMaintenanceWindowResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchMaintenanceWindowResultWithDefaults() *BatchMaintenanceWindowResult {
	this := BatchMaintenanceWindowResult{}
	return &this
}

// GetCreatedIds returns the CreatedIds field value if set, zero value otherwise.
func (o *BatchMaintenanceWindowResult) GetCreatedIds() []string {
	if o == nil || IsNil(o.CreatedIds) {
		var ret []string
		return ret
	}
	return o.CreatedIds
}

// GetCreatedIdsOk returns a tuple with the CreatedIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchMaintenanceWindowResult) GetCreatedIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.CreatedIds) {
		return nil, false
	}
	return o.CreatedIds, true
}

// HasCreatedIds returns a boolean if a field has been set.
func (o *BatchMaintenanceWindowResult) HasCreatedIds() bool {
	if o != nil && !IsNil(o.CreatedIds) {
		return true
	}

	return false
}

// SetCreatedIds gets a reference to the given []string and assigns it to the CreatedIds field.
func (o *BatchMaintenanceWindowResult) SetCreatedIds(v []string) {
	o.CreatedIds = v
}

// GetUpdatedMws returns the UpdatedMws field value if set, zero value otherwise.
func (o *BatchMaintenanceWindowResult) GetUpdatedMws() []MaintenanceWindow {
	if o == nil || IsNil(o.UpdatedMws) {
		var ret []MaintenanceWindow
		return ret
	}
	return o.UpdatedMws
}

// GetUpdatedMwsOk returns a tuple with the UpdatedMws field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchMaintenanceWindowResult) GetUpdatedMwsOk() ([]MaintenanceWindow, bool) {
	if o == nil || IsNil(o.UpdatedMws) {
		return nil, false
	}
	return o.UpdatedMws, true
}

// HasUpdatedMws returns a boolean if a field has been set.
func (o *BatchMaintenanceWindowResult) HasUpdatedMws() bool {
	if o != nil && !IsNil(o.UpdatedMws) {
		return true
	}

	return false
}

// SetUpdatedMws gets a reference to the given []MaintenanceWindow and assigns it to the UpdatedMws field.
func (o *BatchMaintenanceWindowResult) SetUpdatedMws(v []MaintenanceWindow) {
	o.UpdatedMws = v
}

func (o BatchMaintenanceWindowResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchMaintenanceWindowResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedIds) {
		toSerialize["created_ids"] = o.CreatedIds
	}
	if !IsNil(o.UpdatedMws) {
		toSerialize["updated_mws"] = o.UpdatedMws
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BatchMaintenanceWindowResult) UnmarshalJSON(data []byte) (err error) {
	varBatchMaintenanceWindowResult := _BatchMaintenanceWindowResult{}

	err = json.Unmarshal(data, &varBatchMaintenanceWindowResult)

	if err != nil {
		return err
	}

	*o = BatchMaintenanceWindowResult(varBatchMaintenanceWindowResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created_ids")
		delete(additionalProperties, "updated_mws")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBatchMaintenanceWindowResult struct {
	value *BatchMaintenanceWindowResult
	isSet bool
}

func (v NullableBatchMaintenanceWindowResult) Get() *BatchMaintenanceWindowResult {
	return v.value
}

func (v *NullableBatchMaintenanceWindowResult) Set(val *BatchMaintenanceWindowResult) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchMaintenanceWindowResult) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchMaintenanceWindowResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchMaintenanceWindowResult(val *BatchMaintenanceWindowResult) *NullableBatchMaintenanceWindowResult {
	return &NullableBatchMaintenanceWindowResult{value: val, isSet: true}
}

func (v NullableBatchMaintenanceWindowResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchMaintenanceWindowResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
