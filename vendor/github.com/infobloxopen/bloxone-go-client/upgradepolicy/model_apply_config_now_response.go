/*
Schedule Software/Config Updates

Infoblox by default does automatic software updates when they become available. Updates are applied to all on-prem hosts, physical or virtual. However, you can override and schedule the software updates. You can also defer the updates to a later date and time. You can configure up to a total of 50 deferrals (scheduled and deferred software updates), which means you have the flexibility to create up to 50 update groups across different on-prem hosts by mapping with appropriate tags. Tags are be used to associate deferrals (scheduled or deferred) with a specific or group of onprem-hosts. Apart from software update deferrals, config update deferrals also can be configured using these overrides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package upgradepolicy

import (
	"encoding/json"
)

// checks if the ApplyConfigNowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplyConfigNowResponse{}

// ApplyConfigNowResponse struct for ApplyConfigNowResponse
type ApplyConfigNowResponse struct {
	Result               []ApplyConfigNowStatus `json:"result,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApplyConfigNowResponse ApplyConfigNowResponse

// NewApplyConfigNowResponse instantiates a new ApplyConfigNowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplyConfigNowResponse() *ApplyConfigNowResponse {
	this := ApplyConfigNowResponse{}
	return &this
}

// NewApplyConfigNowResponseWithDefaults instantiates a new ApplyConfigNowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplyConfigNowResponseWithDefaults() *ApplyConfigNowResponse {
	this := ApplyConfigNowResponse{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *ApplyConfigNowResponse) GetResult() []ApplyConfigNowStatus {
	if o == nil || IsNil(o.Result) {
		var ret []ApplyConfigNowStatus
		return ret
	}
	return o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyConfigNowResponse) GetResultOk() ([]ApplyConfigNowStatus, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *ApplyConfigNowResponse) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given []ApplyConfigNowStatus and assigns it to the Result field.
func (o *ApplyConfigNowResponse) SetResult(v []ApplyConfigNowStatus) {
	o.Result = v
}

func (o ApplyConfigNowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplyConfigNowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApplyConfigNowResponse) UnmarshalJSON(data []byte) (err error) {
	varApplyConfigNowResponse := _ApplyConfigNowResponse{}

	err = json.Unmarshal(data, &varApplyConfigNowResponse)

	if err != nil {
		return err
	}

	*o = ApplyConfigNowResponse(varApplyConfigNowResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "result")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApplyConfigNowResponse struct {
	value *ApplyConfigNowResponse
	isSet bool
}

func (v NullableApplyConfigNowResponse) Get() *ApplyConfigNowResponse {
	return v.value
}

func (v *NullableApplyConfigNowResponse) Set(val *ApplyConfigNowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableApplyConfigNowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableApplyConfigNowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplyConfigNowResponse(val *ApplyConfigNowResponse) *NullableApplyConfigNowResponse {
	return &NullableApplyConfigNowResponse{value: val, isSet: true}
}

func (v NullableApplyConfigNowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplyConfigNowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
