/*
Schedule Software/Config Updates

Infoblox by default does automatic software updates when they become available. Updates are applied to all on-prem hosts, physical or virtual. However, you can override and schedule the software updates. You can also defer the updates to a later date and time. You can configure up to a total of 50 deferrals (scheduled and deferred software updates), which means you have the flexibility to create up to 50 update groups across different on-prem hosts by mapping with appropriate tags. Tags are be used to associate deferrals (scheduled or deferred) with a specific or group of onprem-hosts. Apart from software update deferrals, config update deferrals also can be configured using these overrides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package upgradepolicy

import (
	"encoding/json"
)

// checks if the BatchMaintenanceWindow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchMaintenanceWindow{}

// BatchMaintenanceWindow struct for BatchMaintenanceWindow
type BatchMaintenanceWindow struct {
	CreateMws            []CreateMaintenanceWindow      `json:"create_mws,omitempty"`
	DeleteMws            []string                       `json:"delete_mws,omitempty"`
	UpdateMws            []UpdateBatchMaintenanceWindow `json:"update_mws,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BatchMaintenanceWindow BatchMaintenanceWindow

// NewBatchMaintenanceWindow instantiates a new BatchMaintenanceWindow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchMaintenanceWindow() *BatchMaintenanceWindow {
	this := BatchMaintenanceWindow{}
	return &this
}

// NewBatchMaintenanceWindowWithDefaults instantiates a new BatchMaintenanceWindow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchMaintenanceWindowWithDefaults() *BatchMaintenanceWindow {
	this := BatchMaintenanceWindow{}
	return &this
}

// GetCreateMws returns the CreateMws field value if set, zero value otherwise.
func (o *BatchMaintenanceWindow) GetCreateMws() []CreateMaintenanceWindow {
	if o == nil || IsNil(o.CreateMws) {
		var ret []CreateMaintenanceWindow
		return ret
	}
	return o.CreateMws
}

// GetCreateMwsOk returns a tuple with the CreateMws field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchMaintenanceWindow) GetCreateMwsOk() ([]CreateMaintenanceWindow, bool) {
	if o == nil || IsNil(o.CreateMws) {
		return nil, false
	}
	return o.CreateMws, true
}

// HasCreateMws returns a boolean if a field has been set.
func (o *BatchMaintenanceWindow) HasCreateMws() bool {
	if o != nil && !IsNil(o.CreateMws) {
		return true
	}

	return false
}

// SetCreateMws gets a reference to the given []CreateMaintenanceWindow and assigns it to the CreateMws field.
func (o *BatchMaintenanceWindow) SetCreateMws(v []CreateMaintenanceWindow) {
	o.CreateMws = v
}

// GetDeleteMws returns the DeleteMws field value if set, zero value otherwise.
func (o *BatchMaintenanceWindow) GetDeleteMws() []string {
	if o == nil || IsNil(o.DeleteMws) {
		var ret []string
		return ret
	}
	return o.DeleteMws
}

// GetDeleteMwsOk returns a tuple with the DeleteMws field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchMaintenanceWindow) GetDeleteMwsOk() ([]string, bool) {
	if o == nil || IsNil(o.DeleteMws) {
		return nil, false
	}
	return o.DeleteMws, true
}

// HasDeleteMws returns a boolean if a field has been set.
func (o *BatchMaintenanceWindow) HasDeleteMws() bool {
	if o != nil && !IsNil(o.DeleteMws) {
		return true
	}

	return false
}

// SetDeleteMws gets a reference to the given []string and assigns it to the DeleteMws field.
func (o *BatchMaintenanceWindow) SetDeleteMws(v []string) {
	o.DeleteMws = v
}

// GetUpdateMws returns the UpdateMws field value if set, zero value otherwise.
func (o *BatchMaintenanceWindow) GetUpdateMws() []UpdateBatchMaintenanceWindow {
	if o == nil || IsNil(o.UpdateMws) {
		var ret []UpdateBatchMaintenanceWindow
		return ret
	}
	return o.UpdateMws
}

// GetUpdateMwsOk returns a tuple with the UpdateMws field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchMaintenanceWindow) GetUpdateMwsOk() ([]UpdateBatchMaintenanceWindow, bool) {
	if o == nil || IsNil(o.UpdateMws) {
		return nil, false
	}
	return o.UpdateMws, true
}

// HasUpdateMws returns a boolean if a field has been set.
func (o *BatchMaintenanceWindow) HasUpdateMws() bool {
	if o != nil && !IsNil(o.UpdateMws) {
		return true
	}

	return false
}

// SetUpdateMws gets a reference to the given []UpdateBatchMaintenanceWindow and assigns it to the UpdateMws field.
func (o *BatchMaintenanceWindow) SetUpdateMws(v []UpdateBatchMaintenanceWindow) {
	o.UpdateMws = v
}

func (o BatchMaintenanceWindow) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchMaintenanceWindow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreateMws) {
		toSerialize["create_mws"] = o.CreateMws
	}
	if !IsNil(o.DeleteMws) {
		toSerialize["delete_mws"] = o.DeleteMws
	}
	if !IsNil(o.UpdateMws) {
		toSerialize["update_mws"] = o.UpdateMws
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BatchMaintenanceWindow) UnmarshalJSON(data []byte) (err error) {
	varBatchMaintenanceWindow := _BatchMaintenanceWindow{}

	err = json.Unmarshal(data, &varBatchMaintenanceWindow)

	if err != nil {
		return err
	}

	*o = BatchMaintenanceWindow(varBatchMaintenanceWindow)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "create_mws")
		delete(additionalProperties, "delete_mws")
		delete(additionalProperties, "update_mws")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBatchMaintenanceWindow struct {
	value *BatchMaintenanceWindow
	isSet bool
}

func (v NullableBatchMaintenanceWindow) Get() *BatchMaintenanceWindow {
	return v.value
}

func (v *NullableBatchMaintenanceWindow) Set(val *BatchMaintenanceWindow) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchMaintenanceWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchMaintenanceWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchMaintenanceWindow(val *BatchMaintenanceWindow) *NullableBatchMaintenanceWindow {
	return &NullableBatchMaintenanceWindow{value: val, isSet: true}
}

func (v NullableBatchMaintenanceWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchMaintenanceWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
