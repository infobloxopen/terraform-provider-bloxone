/*
Schedule Software/Config Updates

Infoblox by default does automatic software updates when they become available. Updates are applied to all on-prem hosts, physical or virtual. However, you can override and schedule the software updates. You can also defer the updates to a later date and time. You can configure up to a total of 50 deferrals (scheduled and deferred software updates), which means you have the flexibility to create up to 50 update groups across different on-prem hosts by mapping with appropriate tags. Tags are be used to associate deferrals (scheduled or deferred) with a specific or group of onprem-hosts. Apart from software update deferrals, config update deferrals also can be configured using these overrides.

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package upgradepolicy

import (
	"encoding/json"
	"fmt"
)

// StatusCode the model 'StatusCode'
type StatusCode string

// List of service_v2StatusCode
const (
	STATUSCODE_SUCCESS            StatusCode = "SUCCESS"
	STATUSCODE_GENERAL_FAILURE    StatusCode = "GENERAL_FAILURE"
	STATUSCODE_HASH_FAILURE       StatusCode = "HASH_FAILURE"
	STATUSCODE_VALIDATION_FAILURE StatusCode = "VALIDATION_FAILURE"
	STATUSCODE_COPY_FAILURE       StatusCode = "COPY_FAILURE"
	STATUSCODE_RELOAD_FAILIURE    StatusCode = "RELOAD_FAILIURE"
)

// All allowed values of StatusCode enum
var AllowedStatusCodeEnumValues = []StatusCode{
	"SUCCESS",
	"GENERAL_FAILURE",
	"HASH_FAILURE",
	"VALIDATION_FAILURE",
	"COPY_FAILURE",
	"RELOAD_FAILIURE",
}

func (v *StatusCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StatusCode(value)
	for _, existing := range AllowedStatusCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StatusCode", value)
}

// NewStatusCodeFromValue returns a pointer to a valid StatusCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusCodeFromValue(v string) (*StatusCode, error) {
	ev := StatusCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StatusCode: valid values are %v", v, AllowedStatusCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StatusCode) IsValid() bool {
	for _, existing := range AllowedStatusCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to service_v2StatusCode value
func (v StatusCode) Ptr() *StatusCode {
	return &v
}

type NullableStatusCode struct {
	value *StatusCode
	isSet bool
}

func (v NullableStatusCode) Get() *StatusCode {
	return v.value
}

func (v *NullableStatusCode) Set(val *StatusCode) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusCode) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusCode(val *StatusCode) *NullableStatusCode {
	return &NullableStatusCode{value: val, isSet: true}
}

func (v NullableStatusCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
