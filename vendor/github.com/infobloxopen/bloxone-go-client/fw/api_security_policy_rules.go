/*
BloxOne FW API

BloxOne Threat Defense Cloud is an extension of the BloxOne Suite that provides visibility into infected and compromised off-premises devices, roaming users, remote sites, and branch offices. You can subscribe to BloxOne Cloud and use its functionality to mitigate and control malware as well as provide unprecedented insight into your network security posture and enable timely action. BloxOne Cloud also offers unified policy management, reporting, and threat analytics across the entire spectrum. Using automated and high-quality threat intelligence feeds and unique behavioral analytics, it automatically stops device communications with C&Cs/botnets and prevents DNS based data exfiltration.  The mission-critical DNS infrastructure can become a vulnerable component in your network when it is inadequately protected by traditional security solutions and consequently used as an attack surface. Compromised DNS services can result in catastrophic network and system failures. To fully protect your network in today’s cyber security threat environment, Infoblox sets a new DNS security standard by offering scalable, enterprise-grade, and integrated protection for your DNS infrastructure.  Through the Infoblox Cloud Services Portal, you can view the status of your subscription and threat intelligence feeds, manage your network scope and roaming end users, and learn more about threats on your networks through the Infoblox Threat Lookup tool and predefined reports.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fw

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	"github.com/infobloxopen/bloxone-go-client/internal"
)

type SecurityPolicyRulesAPI interface {
	/*
			SecurityPolicyRulesListSecurityPolicyRules List Security Policy Rules.

			Use this method to retrieve information on all Security Policy Rule objects for the account.

		The Security Policy Rule object represents a rule and action that you define to balance access and constraints so you can mitigate malicious attacks and provide security for your networks.



			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@return ApiSecurityPolicyRulesListSecurityPolicyRulesRequest
	*/
	SecurityPolicyRulesListSecurityPolicyRules(ctx context.Context) ApiSecurityPolicyRulesListSecurityPolicyRulesRequest

	// SecurityPolicyRulesListSecurityPolicyRulesExecute executes the request
	//  @return AtcfwSecurityPolicyRuleMultiResponse
	SecurityPolicyRulesListSecurityPolicyRulesExecute(r ApiSecurityPolicyRulesListSecurityPolicyRulesRequest) (*AtcfwSecurityPolicyRuleMultiResponse, *http.Response, error)
}

// SecurityPolicyRulesAPIService SecurityPolicyRulesAPI service
type SecurityPolicyRulesAPIService internal.Service

type ApiSecurityPolicyRulesListSecurityPolicyRulesRequest struct {
	ctx        context.Context
	ApiService SecurityPolicyRulesAPI
	filter     *string
	fields     *string
	offset     *int32
	limit      *int32
	pageToken  *string
}

// A collection of response resources can be filtered by a logical expression string that includes JSON tag references to values in each resource, literal values, and logical operators. If a resource does not have the specified tag, its value is assumed to be null.  Literal values include numbers (integer and floating-point), and quoted (both single- or double-quoted) literal strings, and &#39;null&#39;.  You can filter by following fields:  | Name               | type   | Supported Ops    | | ------------------ | ------ | ---------------- | | policy_id          | int32  | &#x3D;&#x3D;               | | list_id            | int32  | &#x3D;&#x3D;               | | category_filter_id | int32  | &#x3D;&#x3D;               |  Groupping operators (and, or, not, ()) are not supported.
func (r ApiSecurityPolicyRulesListSecurityPolicyRulesRequest) Filter(filter string) ApiSecurityPolicyRulesListSecurityPolicyRulesRequest {
	r.filter = &filter
	return r
}

// A collection of response resources can be transformed by specifying a set of JSON tags to be returned. For a “flat” resource, the tag name is straightforward. If field selection is allowed on non-flat hierarchical resources, the service should implement a qualified naming scheme such as dot-qualification to reference data down the hierarchy. If a resource does not have the specified tag, the tag does not appear in the output resource.  Specify this parameter as a comma-separated list of JSON tag names.
func (r ApiSecurityPolicyRulesListSecurityPolicyRulesRequest) Fields(fields string) ApiSecurityPolicyRulesListSecurityPolicyRulesRequest {
	r.fields = &fields
	return r
}

// The integer index (zero-origin) of the offset into a collection of resources. If omitted or null the value is assumed to be &#39;0&#39;.
func (r ApiSecurityPolicyRulesListSecurityPolicyRulesRequest) Offset(offset int32) ApiSecurityPolicyRulesListSecurityPolicyRulesRequest {
	r.offset = &offset
	return r
}

// The integer number of resources to be returned in the response. The service may impose maximum value. If omitted the service may impose a default value.
func (r ApiSecurityPolicyRulesListSecurityPolicyRulesRequest) Limit(limit int32) ApiSecurityPolicyRulesListSecurityPolicyRulesRequest {
	r.limit = &limit
	return r
}

// The service-defined string used to identify a page of resources. A null value indicates the first page.
func (r ApiSecurityPolicyRulesListSecurityPolicyRulesRequest) PageToken(pageToken string) ApiSecurityPolicyRulesListSecurityPolicyRulesRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiSecurityPolicyRulesListSecurityPolicyRulesRequest) Execute() (*AtcfwSecurityPolicyRuleMultiResponse, *http.Response, error) {
	return r.ApiService.SecurityPolicyRulesListSecurityPolicyRulesExecute(r)
}

/*
SecurityPolicyRulesListSecurityPolicyRules List Security Policy Rules.

Use this method to retrieve information on all Security Policy Rule objects for the account.

The Security Policy Rule object represents a rule and action that you define to balance access and constraints so you can mitigate malicious attacks and provide security for your networks.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSecurityPolicyRulesListSecurityPolicyRulesRequest
*/
func (a *SecurityPolicyRulesAPIService) SecurityPolicyRulesListSecurityPolicyRules(ctx context.Context) ApiSecurityPolicyRulesListSecurityPolicyRulesRequest {
	return ApiSecurityPolicyRulesListSecurityPolicyRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AtcfwSecurityPolicyRuleMultiResponse
func (a *SecurityPolicyRulesAPIService) SecurityPolicyRulesListSecurityPolicyRulesExecute(r ApiSecurityPolicyRulesListSecurityPolicyRulesRequest) (*AtcfwSecurityPolicyRuleMultiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *AtcfwSecurityPolicyRuleMultiResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "SecurityPolicyRulesAPIService.SecurityPolicyRulesListSecurityPolicyRules")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/security_policy_rules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_filter", r.filter, "")
	}
	if r.fields != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_fields", r.fields, "")
	}
	if r.offset != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_offset", r.offset, "")
	}
	if r.limit != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_limit", r.limit, "")
	}
	if r.pageToken != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_token", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		if localVarHTTPResponse.StatusCode == 500 {
			var v AccessCodesListAccessCodes500Response
			err = a.Client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr = internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr = internal.NewGenericOpenAPIErrorWithBodyAndModel(localVarHTTPResponse.Status, localVarBody, v)
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
