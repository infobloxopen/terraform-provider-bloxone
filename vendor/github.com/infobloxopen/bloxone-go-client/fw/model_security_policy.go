/*
BloxOne FW API

BloxOne Threat Defense Cloud is an extension of the BloxOne Suite that provides visibility into infected and compromised off-premises devices, roaming users, remote sites, and branch offices. You can subscribe to BloxOne Cloud and use its functionality to mitigate and control malware as well as provide unprecedented insight into your network security posture and enable timely action. BloxOne Cloud also offers unified policy management, reporting, and threat analytics across the entire spectrum. Using automated and high-quality threat intelligence feeds and unique behavioral analytics, it automatically stops device communications with C&Cs/botnets and prevents DNS based data exfiltration.  The mission-critical DNS infrastructure can become a vulnerable component in your network when it is inadequately protected by traditional security solutions and consequently used as an attack surface. Compromised DNS services can result in catastrophic network and system failures. To fully protect your network in todayâ€™s cyber security threat environment, Infoblox sets a new DNS security standard by offering scalable, enterprise-grade, and integrated protection for your DNS infrastructure.  Through the Infoblox Cloud Services Portal, you can view the status of your subscription and threat intelligence feeds, manage your network scope and roaming end users, and learn more about threats on your networks through the Infoblox Threat Lookup tool and predefined reports.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fw

import (
	"encoding/json"
	"time"
)

// checks if the SecurityPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityPolicy{}

// SecurityPolicy The Security Policy object.  A security policy defines a set of rules and actions that you define to balance access and constraints so you can mitigate malicious attacks and provide security for your networks. When you create a new security policy, you first define a network scope to which you add networks, DNS forwarding proxies, and BloxOne Endpoint groups. BloxOne Cloud applies the security policy to all the entities that you include in the network scope. You can also include DNS forwarding proxies to which you want to apply the security policy.  After you define the network scope, you can add custom lists and category filters to the security policy. You can also specify actions for the added lists and filters, and to determine the precedence order for the entities. Depending on your subscription level, each security policy also comes with a set of predefined threat intelligence feeds and Threat Insight rules that are inherited from the default global policy. You cannot delete the inherited feeds and rules, but you can change their precedence order. For each policy you can define policy-level action (Default Action) gets applied when none of the policy rules apply/match. If an user really needs access to some blocked domain (web page) via a browser - there is a possibility to assign special bypass code(s) (Bypass Code) to any policy.
type SecurityPolicy struct {
	// Access codes assigned to Security Policy
	AccessCodes []string `json:"access_codes,omitempty"`
	// The time when this Security Policy object was created.
	CreatedTime *time.Time `json:"created_time,omitempty"`
	// The policy-level action gets applied when none of the policy rules apply/match. The default value for default_action is \"action_allow\".
	DefaultAction *string `json:"default_action,omitempty"`
	// Name of the custom redirect, if the default_action is \"action_redirect\".
	DefaultRedirectName *string `json:"default_redirect_name,omitempty"`
	// The brief description for the security policy.
	Description *string `json:"description,omitempty"`
	// The list of DNS Forwarding Proxy Services object identifiers. For Internal Use only.
	DfpServices []string `json:"dfp_services,omitempty"`
	// The list of DNS Forwarding Proxy object identifiers.
	Dfps []int32 `json:"dfps,omitempty"`
	// Use ECS for handling policy
	Ecs *bool `json:"ecs,omitempty"`
	// The Security Policy object identifier.
	Id *int32 `json:"id,omitempty"`
	// Flag that indicates whether this is a default security policy.
	IsDefault *bool `json:"is_default,omitempty"`
	// The name of the security policy.
	Name *string `json:"name,omitempty"`
	// List of DFPs associated with this policy via network address (with corresponding network address)
	NetAddressDfps []NetAddrDfpAssignment `json:"net_address_dfps,omitempty"`
	// The list of Network Lists identifiers that represents networks that you want to protect from malicious attacks.
	NetworkLists []int64 `json:"network_lists,omitempty"`
	// Use DNS resolve on onprem side
	OnpremResolve *bool `json:"onprem_resolve,omitempty"`
	// Security precedence enable selection of the highest priority policy, in cases where a query matches multiple policies.
	Precedence *int32 `json:"precedence,omitempty"`
	// The list of BloxOne Endpoint groups identifiers.
	RoamingDeviceGroups []int32 `json:"roaming_device_groups,omitempty"`
	// The list of Security Policy Rules objects that represent the set of rules and actions that you define to balance access and constraints so you can mitigate malicious attacks and provide security for your networks.
	Rules []SecurityPolicyRule `json:"rules,omitempty"`
	// Apply automated rules to enforce safe search
	SafeSearch *bool `json:"safe_search,omitempty"`
	// Enables tag support for resource where tags attribute contains user-defined key value pairs
	Tags map[string]interface{} `json:"tags,omitempty"`
	// The time when this Security Policy object was last updated.
	UpdatedTime *time.Time `json:"updated_time,omitempty"`
	// List of user groups associated with this policy
	UserGroups           []string `json:"user_groups,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SecurityPolicy SecurityPolicy

// NewSecurityPolicy instantiates a new SecurityPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityPolicy() *SecurityPolicy {
	this := SecurityPolicy{}
	return &this
}

// NewSecurityPolicyWithDefaults instantiates a new SecurityPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityPolicyWithDefaults() *SecurityPolicy {
	this := SecurityPolicy{}
	return &this
}

// GetAccessCodes returns the AccessCodes field value if set, zero value otherwise.
func (o *SecurityPolicy) GetAccessCodes() []string {
	if o == nil || IsNil(o.AccessCodes) {
		var ret []string
		return ret
	}
	return o.AccessCodes
}

// GetAccessCodesOk returns a tuple with the AccessCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetAccessCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.AccessCodes) {
		return nil, false
	}
	return o.AccessCodes, true
}

// HasAccessCodes returns a boolean if a field has been set.
func (o *SecurityPolicy) HasAccessCodes() bool {
	if o != nil && !IsNil(o.AccessCodes) {
		return true
	}

	return false
}

// SetAccessCodes gets a reference to the given []string and assigns it to the AccessCodes field.
func (o *SecurityPolicy) SetAccessCodes(v []string) {
	o.AccessCodes = v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *SecurityPolicy) GetCreatedTime() time.Time {
	if o == nil || IsNil(o.CreatedTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *SecurityPolicy) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given time.Time and assigns it to the CreatedTime field.
func (o *SecurityPolicy) SetCreatedTime(v time.Time) {
	o.CreatedTime = &v
}

// GetDefaultAction returns the DefaultAction field value if set, zero value otherwise.
func (o *SecurityPolicy) GetDefaultAction() string {
	if o == nil || IsNil(o.DefaultAction) {
		var ret string
		return ret
	}
	return *o.DefaultAction
}

// GetDefaultActionOk returns a tuple with the DefaultAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetDefaultActionOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultAction) {
		return nil, false
	}
	return o.DefaultAction, true
}

// HasDefaultAction returns a boolean if a field has been set.
func (o *SecurityPolicy) HasDefaultAction() bool {
	if o != nil && !IsNil(o.DefaultAction) {
		return true
	}

	return false
}

// SetDefaultAction gets a reference to the given string and assigns it to the DefaultAction field.
func (o *SecurityPolicy) SetDefaultAction(v string) {
	o.DefaultAction = &v
}

// GetDefaultRedirectName returns the DefaultRedirectName field value if set, zero value otherwise.
func (o *SecurityPolicy) GetDefaultRedirectName() string {
	if o == nil || IsNil(o.DefaultRedirectName) {
		var ret string
		return ret
	}
	return *o.DefaultRedirectName
}

// GetDefaultRedirectNameOk returns a tuple with the DefaultRedirectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetDefaultRedirectNameOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultRedirectName) {
		return nil, false
	}
	return o.DefaultRedirectName, true
}

// HasDefaultRedirectName returns a boolean if a field has been set.
func (o *SecurityPolicy) HasDefaultRedirectName() bool {
	if o != nil && !IsNil(o.DefaultRedirectName) {
		return true
	}

	return false
}

// SetDefaultRedirectName gets a reference to the given string and assigns it to the DefaultRedirectName field.
func (o *SecurityPolicy) SetDefaultRedirectName(v string) {
	o.DefaultRedirectName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SecurityPolicy) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SecurityPolicy) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SecurityPolicy) SetDescription(v string) {
	o.Description = &v
}

// GetDfpServices returns the DfpServices field value if set, zero value otherwise.
func (o *SecurityPolicy) GetDfpServices() []string {
	if o == nil || IsNil(o.DfpServices) {
		var ret []string
		return ret
	}
	return o.DfpServices
}

// GetDfpServicesOk returns a tuple with the DfpServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetDfpServicesOk() ([]string, bool) {
	if o == nil || IsNil(o.DfpServices) {
		return nil, false
	}
	return o.DfpServices, true
}

// HasDfpServices returns a boolean if a field has been set.
func (o *SecurityPolicy) HasDfpServices() bool {
	if o != nil && !IsNil(o.DfpServices) {
		return true
	}

	return false
}

// SetDfpServices gets a reference to the given []string and assigns it to the DfpServices field.
func (o *SecurityPolicy) SetDfpServices(v []string) {
	o.DfpServices = v
}

// GetDfps returns the Dfps field value if set, zero value otherwise.
func (o *SecurityPolicy) GetDfps() []int32 {
	if o == nil || IsNil(o.Dfps) {
		var ret []int32
		return ret
	}
	return o.Dfps
}

// GetDfpsOk returns a tuple with the Dfps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetDfpsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Dfps) {
		return nil, false
	}
	return o.Dfps, true
}

// HasDfps returns a boolean if a field has been set.
func (o *SecurityPolicy) HasDfps() bool {
	if o != nil && !IsNil(o.Dfps) {
		return true
	}

	return false
}

// SetDfps gets a reference to the given []int32 and assigns it to the Dfps field.
func (o *SecurityPolicy) SetDfps(v []int32) {
	o.Dfps = v
}

// GetEcs returns the Ecs field value if set, zero value otherwise.
func (o *SecurityPolicy) GetEcs() bool {
	if o == nil || IsNil(o.Ecs) {
		var ret bool
		return ret
	}
	return *o.Ecs
}

// GetEcsOk returns a tuple with the Ecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetEcsOk() (*bool, bool) {
	if o == nil || IsNil(o.Ecs) {
		return nil, false
	}
	return o.Ecs, true
}

// HasEcs returns a boolean if a field has been set.
func (o *SecurityPolicy) HasEcs() bool {
	if o != nil && !IsNil(o.Ecs) {
		return true
	}

	return false
}

// SetEcs gets a reference to the given bool and assigns it to the Ecs field.
func (o *SecurityPolicy) SetEcs(v bool) {
	o.Ecs = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SecurityPolicy) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SecurityPolicy) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SecurityPolicy) SetId(v int32) {
	o.Id = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *SecurityPolicy) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetIsDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *SecurityPolicy) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *SecurityPolicy) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SecurityPolicy) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SecurityPolicy) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SecurityPolicy) SetName(v string) {
	o.Name = &v
}

// GetNetAddressDfps returns the NetAddressDfps field value if set, zero value otherwise.
func (o *SecurityPolicy) GetNetAddressDfps() []NetAddrDfpAssignment {
	if o == nil || IsNil(o.NetAddressDfps) {
		var ret []NetAddrDfpAssignment
		return ret
	}
	return o.NetAddressDfps
}

// GetNetAddressDfpsOk returns a tuple with the NetAddressDfps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetNetAddressDfpsOk() ([]NetAddrDfpAssignment, bool) {
	if o == nil || IsNil(o.NetAddressDfps) {
		return nil, false
	}
	return o.NetAddressDfps, true
}

// HasNetAddressDfps returns a boolean if a field has been set.
func (o *SecurityPolicy) HasNetAddressDfps() bool {
	if o != nil && !IsNil(o.NetAddressDfps) {
		return true
	}

	return false
}

// SetNetAddressDfps gets a reference to the given []NetAddrDfpAssignment and assigns it to the NetAddressDfps field.
func (o *SecurityPolicy) SetNetAddressDfps(v []NetAddrDfpAssignment) {
	o.NetAddressDfps = v
}

// GetNetworkLists returns the NetworkLists field value if set, zero value otherwise.
func (o *SecurityPolicy) GetNetworkLists() []int64 {
	if o == nil || IsNil(o.NetworkLists) {
		var ret []int64
		return ret
	}
	return o.NetworkLists
}

// GetNetworkListsOk returns a tuple with the NetworkLists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetNetworkListsOk() ([]int64, bool) {
	if o == nil || IsNil(o.NetworkLists) {
		return nil, false
	}
	return o.NetworkLists, true
}

// HasNetworkLists returns a boolean if a field has been set.
func (o *SecurityPolicy) HasNetworkLists() bool {
	if o != nil && !IsNil(o.NetworkLists) {
		return true
	}

	return false
}

// SetNetworkLists gets a reference to the given []int64 and assigns it to the NetworkLists field.
func (o *SecurityPolicy) SetNetworkLists(v []int64) {
	o.NetworkLists = v
}

// GetOnpremResolve returns the OnpremResolve field value if set, zero value otherwise.
func (o *SecurityPolicy) GetOnpremResolve() bool {
	if o == nil || IsNil(o.OnpremResolve) {
		var ret bool
		return ret
	}
	return *o.OnpremResolve
}

// GetOnpremResolveOk returns a tuple with the OnpremResolve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetOnpremResolveOk() (*bool, bool) {
	if o == nil || IsNil(o.OnpremResolve) {
		return nil, false
	}
	return o.OnpremResolve, true
}

// HasOnpremResolve returns a boolean if a field has been set.
func (o *SecurityPolicy) HasOnpremResolve() bool {
	if o != nil && !IsNil(o.OnpremResolve) {
		return true
	}

	return false
}

// SetOnpremResolve gets a reference to the given bool and assigns it to the OnpremResolve field.
func (o *SecurityPolicy) SetOnpremResolve(v bool) {
	o.OnpremResolve = &v
}

// GetPrecedence returns the Precedence field value if set, zero value otherwise.
func (o *SecurityPolicy) GetPrecedence() int32 {
	if o == nil || IsNil(o.Precedence) {
		var ret int32
		return ret
	}
	return *o.Precedence
}

// GetPrecedenceOk returns a tuple with the Precedence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetPrecedenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Precedence) {
		return nil, false
	}
	return o.Precedence, true
}

// HasPrecedence returns a boolean if a field has been set.
func (o *SecurityPolicy) HasPrecedence() bool {
	if o != nil && !IsNil(o.Precedence) {
		return true
	}

	return false
}

// SetPrecedence gets a reference to the given int32 and assigns it to the Precedence field.
func (o *SecurityPolicy) SetPrecedence(v int32) {
	o.Precedence = &v
}

// GetRoamingDeviceGroups returns the RoamingDeviceGroups field value if set, zero value otherwise.
func (o *SecurityPolicy) GetRoamingDeviceGroups() []int32 {
	if o == nil || IsNil(o.RoamingDeviceGroups) {
		var ret []int32
		return ret
	}
	return o.RoamingDeviceGroups
}

// GetRoamingDeviceGroupsOk returns a tuple with the RoamingDeviceGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetRoamingDeviceGroupsOk() ([]int32, bool) {
	if o == nil || IsNil(o.RoamingDeviceGroups) {
		return nil, false
	}
	return o.RoamingDeviceGroups, true
}

// HasRoamingDeviceGroups returns a boolean if a field has been set.
func (o *SecurityPolicy) HasRoamingDeviceGroups() bool {
	if o != nil && !IsNil(o.RoamingDeviceGroups) {
		return true
	}

	return false
}

// SetRoamingDeviceGroups gets a reference to the given []int32 and assigns it to the RoamingDeviceGroups field.
func (o *SecurityPolicy) SetRoamingDeviceGroups(v []int32) {
	o.RoamingDeviceGroups = v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *SecurityPolicy) GetRules() []SecurityPolicyRule {
	if o == nil || IsNil(o.Rules) {
		var ret []SecurityPolicyRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetRulesOk() ([]SecurityPolicyRule, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *SecurityPolicy) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []SecurityPolicyRule and assigns it to the Rules field.
func (o *SecurityPolicy) SetRules(v []SecurityPolicyRule) {
	o.Rules = v
}

// GetSafeSearch returns the SafeSearch field value if set, zero value otherwise.
func (o *SecurityPolicy) GetSafeSearch() bool {
	if o == nil || IsNil(o.SafeSearch) {
		var ret bool
		return ret
	}
	return *o.SafeSearch
}

// GetSafeSearchOk returns a tuple with the SafeSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetSafeSearchOk() (*bool, bool) {
	if o == nil || IsNil(o.SafeSearch) {
		return nil, false
	}
	return o.SafeSearch, true
}

// HasSafeSearch returns a boolean if a field has been set.
func (o *SecurityPolicy) HasSafeSearch() bool {
	if o != nil && !IsNil(o.SafeSearch) {
		return true
	}

	return false
}

// SetSafeSearch gets a reference to the given bool and assigns it to the SafeSearch field.
func (o *SecurityPolicy) SetSafeSearch(v bool) {
	o.SafeSearch = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *SecurityPolicy) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SecurityPolicy) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *SecurityPolicy) SetTags(v map[string]interface{}) {
	o.Tags = v
}

// GetUpdatedTime returns the UpdatedTime field value if set, zero value otherwise.
func (o *SecurityPolicy) GetUpdatedTime() time.Time {
	if o == nil || IsNil(o.UpdatedTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetUpdatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedTime) {
		return nil, false
	}
	return o.UpdatedTime, true
}

// HasUpdatedTime returns a boolean if a field has been set.
func (o *SecurityPolicy) HasUpdatedTime() bool {
	if o != nil && !IsNil(o.UpdatedTime) {
		return true
	}

	return false
}

// SetUpdatedTime gets a reference to the given time.Time and assigns it to the UpdatedTime field.
func (o *SecurityPolicy) SetUpdatedTime(v time.Time) {
	o.UpdatedTime = &v
}

// GetUserGroups returns the UserGroups field value if set, zero value otherwise.
func (o *SecurityPolicy) GetUserGroups() []string {
	if o == nil || IsNil(o.UserGroups) {
		var ret []string
		return ret
	}
	return o.UserGroups
}

// GetUserGroupsOk returns a tuple with the UserGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityPolicy) GetUserGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.UserGroups) {
		return nil, false
	}
	return o.UserGroups, true
}

// HasUserGroups returns a boolean if a field has been set.
func (o *SecurityPolicy) HasUserGroups() bool {
	if o != nil && !IsNil(o.UserGroups) {
		return true
	}

	return false
}

// SetUserGroups gets a reference to the given []string and assigns it to the UserGroups field.
func (o *SecurityPolicy) SetUserGroups(v []string) {
	o.UserGroups = v
}

func (o SecurityPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessCodes) {
		toSerialize["access_codes"] = o.AccessCodes
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.DefaultAction) {
		toSerialize["default_action"] = o.DefaultAction
	}
	if !IsNil(o.DefaultRedirectName) {
		toSerialize["default_redirect_name"] = o.DefaultRedirectName
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DfpServices) {
		toSerialize["dfp_services"] = o.DfpServices
	}
	if !IsNil(o.Dfps) {
		toSerialize["dfps"] = o.Dfps
	}
	if !IsNil(o.Ecs) {
		toSerialize["ecs"] = o.Ecs
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsDefault) {
		toSerialize["is_default"] = o.IsDefault
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NetAddressDfps) {
		toSerialize["net_address_dfps"] = o.NetAddressDfps
	}
	if !IsNil(o.NetworkLists) {
		toSerialize["network_lists"] = o.NetworkLists
	}
	if !IsNil(o.OnpremResolve) {
		toSerialize["onprem_resolve"] = o.OnpremResolve
	}
	if !IsNil(o.Precedence) {
		toSerialize["precedence"] = o.Precedence
	}
	if !IsNil(o.RoamingDeviceGroups) {
		toSerialize["roaming_device_groups"] = o.RoamingDeviceGroups
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	if !IsNil(o.SafeSearch) {
		toSerialize["safe_search"] = o.SafeSearch
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.UpdatedTime) {
		toSerialize["updated_time"] = o.UpdatedTime
	}
	if !IsNil(o.UserGroups) {
		toSerialize["user_groups"] = o.UserGroups
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SecurityPolicy) UnmarshalJSON(data []byte) (err error) {
	varSecurityPolicy := _SecurityPolicy{}

	err = json.Unmarshal(data, &varSecurityPolicy)

	if err != nil {
		return err
	}

	*o = SecurityPolicy(varSecurityPolicy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "access_codes")
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "default_action")
		delete(additionalProperties, "default_redirect_name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "dfp_services")
		delete(additionalProperties, "dfps")
		delete(additionalProperties, "ecs")
		delete(additionalProperties, "id")
		delete(additionalProperties, "is_default")
		delete(additionalProperties, "name")
		delete(additionalProperties, "net_address_dfps")
		delete(additionalProperties, "network_lists")
		delete(additionalProperties, "onprem_resolve")
		delete(additionalProperties, "precedence")
		delete(additionalProperties, "roaming_device_groups")
		delete(additionalProperties, "rules")
		delete(additionalProperties, "safe_search")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "updated_time")
		delete(additionalProperties, "user_groups")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSecurityPolicy struct {
	value *SecurityPolicy
	isSet bool
}

func (v NullableSecurityPolicy) Get() *SecurityPolicy {
	return v.value
}

func (v *NullableSecurityPolicy) Set(val *SecurityPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityPolicy(val *SecurityPolicy) *NullableSecurityPolicy {
	return &NullableSecurityPolicy{value: val, isSet: true}
}

func (v NullableSecurityPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
