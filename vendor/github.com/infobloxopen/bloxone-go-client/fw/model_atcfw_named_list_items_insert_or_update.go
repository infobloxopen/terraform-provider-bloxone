/*
BloxOne FW API

BloxOne Threat Defense Cloud is an extension of the BloxOne Suite that provides visibility into infected and compromised off-premises devices, roaming users, remote sites, and branch offices. You can subscribe to BloxOne Cloud and use its functionality to mitigate and control malware as well as provide unprecedented insight into your network security posture and enable timely action. BloxOne Cloud also offers unified policy management, reporting, and threat analytics across the entire spectrum. Using automated and high-quality threat intelligence feeds and unique behavioral analytics, it automatically stops device communications with C&Cs/botnets and prevents DNS based data exfiltration.  The mission-critical DNS infrastructure can become a vulnerable component in your network when it is inadequately protected by traditional security solutions and consequently used as an attack surface. Compromised DNS services can result in catastrophic network and system failures. To fully protect your network in todayâ€™s cyber security threat environment, Infoblox sets a new DNS security standard by offering scalable, enterprise-grade, and integrated protection for your DNS infrastructure.  Through the Infoblox Cloud Services Portal, you can view the status of your subscription and threat intelligence feeds, manage your network scope and roaming end users, and learn more about threats on your networks through the Infoblox Threat Lookup tool and predefined reports.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fw

import (
	"encoding/json"
)

// checks if the AtcfwNamedListItemsInsertOrUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AtcfwNamedListItemsInsertOrUpdate{}

// AtcfwNamedListItemsInsertOrUpdate struct for AtcfwNamedListItemsInsertOrUpdate
type AtcfwNamedListItemsInsertOrUpdate struct {
	// The Named List object identifier.
	Id *int32 `json:"id,omitempty"`
	// The list of the FQDN or IPv4/IPv6 addresses or IPv4/IPv6 CIDRs to define whitelists and blacklists for additional protection.
	Items []string `json:"items,omitempty"`
	// The List of ItemStructs structure which contains the item and its description
	ItemsDescribed []AtcfwItemStructs `json:"items_described,omitempty"`
}

// NewAtcfwNamedListItemsInsertOrUpdate instantiates a new AtcfwNamedListItemsInsertOrUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAtcfwNamedListItemsInsertOrUpdate() *AtcfwNamedListItemsInsertOrUpdate {
	this := AtcfwNamedListItemsInsertOrUpdate{}
	return &this
}

// NewAtcfwNamedListItemsInsertOrUpdateWithDefaults instantiates a new AtcfwNamedListItemsInsertOrUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAtcfwNamedListItemsInsertOrUpdateWithDefaults() *AtcfwNamedListItemsInsertOrUpdate {
	this := AtcfwNamedListItemsInsertOrUpdate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AtcfwNamedListItemsInsertOrUpdate) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtcfwNamedListItemsInsertOrUpdate) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AtcfwNamedListItemsInsertOrUpdate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AtcfwNamedListItemsInsertOrUpdate) SetId(v int32) {
	o.Id = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *AtcfwNamedListItemsInsertOrUpdate) GetItems() []string {
	if o == nil || IsNil(o.Items) {
		var ret []string
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtcfwNamedListItemsInsertOrUpdate) GetItemsOk() ([]string, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *AtcfwNamedListItemsInsertOrUpdate) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []string and assigns it to the Items field.
func (o *AtcfwNamedListItemsInsertOrUpdate) SetItems(v []string) {
	o.Items = v
}

// GetItemsDescribed returns the ItemsDescribed field value if set, zero value otherwise.
func (o *AtcfwNamedListItemsInsertOrUpdate) GetItemsDescribed() []AtcfwItemStructs {
	if o == nil || IsNil(o.ItemsDescribed) {
		var ret []AtcfwItemStructs
		return ret
	}
	return o.ItemsDescribed
}

// GetItemsDescribedOk returns a tuple with the ItemsDescribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtcfwNamedListItemsInsertOrUpdate) GetItemsDescribedOk() ([]AtcfwItemStructs, bool) {
	if o == nil || IsNil(o.ItemsDescribed) {
		return nil, false
	}
	return o.ItemsDescribed, true
}

// HasItemsDescribed returns a boolean if a field has been set.
func (o *AtcfwNamedListItemsInsertOrUpdate) HasItemsDescribed() bool {
	if o != nil && !IsNil(o.ItemsDescribed) {
		return true
	}

	return false
}

// SetItemsDescribed gets a reference to the given []AtcfwItemStructs and assigns it to the ItemsDescribed field.
func (o *AtcfwNamedListItemsInsertOrUpdate) SetItemsDescribed(v []AtcfwItemStructs) {
	o.ItemsDescribed = v
}

func (o AtcfwNamedListItemsInsertOrUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AtcfwNamedListItemsInsertOrUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.ItemsDescribed) {
		toSerialize["items_described"] = o.ItemsDescribed
	}
	return toSerialize, nil
}

type NullableAtcfwNamedListItemsInsertOrUpdate struct {
	value *AtcfwNamedListItemsInsertOrUpdate
	isSet bool
}

func (v NullableAtcfwNamedListItemsInsertOrUpdate) Get() *AtcfwNamedListItemsInsertOrUpdate {
	return v.value
}

func (v *NullableAtcfwNamedListItemsInsertOrUpdate) Set(val *AtcfwNamedListItemsInsertOrUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableAtcfwNamedListItemsInsertOrUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableAtcfwNamedListItemsInsertOrUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAtcfwNamedListItemsInsertOrUpdate(val *AtcfwNamedListItemsInsertOrUpdate) *NullableAtcfwNamedListItemsInsertOrUpdate {
	return &NullableAtcfwNamedListItemsInsertOrUpdate{value: val, isSet: true}
}

func (v NullableAtcfwNamedListItemsInsertOrUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAtcfwNamedListItemsInsertOrUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
