/*
BloxOne FW API

BloxOne Threat Defense Cloud is an extension of the BloxOne Suite that provides visibility into infected and compromised off-premises devices, roaming users, remote sites, and branch offices. You can subscribe to BloxOne Cloud and use its functionality to mitigate and control malware as well as provide unprecedented insight into your network security posture and enable timely action. BloxOne Cloud also offers unified policy management, reporting, and threat analytics across the entire spectrum. Using automated and high-quality threat intelligence feeds and unique behavioral analytics, it automatically stops device communications with C&Cs/botnets and prevents DNS based data exfiltration.  The mission-critical DNS infrastructure can become a vulnerable component in your network when it is inadequately protected by traditional security solutions and consequently used as an attack surface. Compromised DNS services can result in catastrophic network and system failures. To fully protect your network in todayâ€™s cyber security threat environment, Infoblox sets a new DNS security standard by offering scalable, enterprise-grade, and integrated protection for your DNS infrastructure.  Through the Infoblox Cloud Services Portal, you can view the status of your subscription and threat intelligence feeds, manage your network scope and roaming end users, and learn more about threats on your networks through the Infoblox Threat Lookup tool and predefined reports.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fw

import (
	"encoding/json"
	"fmt"
)

// ThreatFeedSource the model 'ThreatFeedSource'
type ThreatFeedSource string

// List of ThreatFeedSource
const (
	THREATFEEDSOURCE_INFOBLOX ThreatFeedSource = "Infoblox"
	THREATFEEDSOURCE_CUSTOM   ThreatFeedSource = "Custom"
)

// All allowed values of ThreatFeedSource enum
var AllowedThreatFeedSourceEnumValues = []ThreatFeedSource{
	"Infoblox",
	"Custom",
}

func (v *ThreatFeedSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ThreatFeedSource(value)
	for _, existing := range AllowedThreatFeedSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ThreatFeedSource", value)
}

// NewThreatFeedSourceFromValue returns a pointer to a valid ThreatFeedSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewThreatFeedSourceFromValue(v string) (*ThreatFeedSource, error) {
	ev := ThreatFeedSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ThreatFeedSource: valid values are %v", v, AllowedThreatFeedSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ThreatFeedSource) IsValid() bool {
	for _, existing := range AllowedThreatFeedSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ThreatFeedSource value
func (v ThreatFeedSource) Ptr() *ThreatFeedSource {
	return &v
}

type NullableThreatFeedSource struct {
	value *ThreatFeedSource
	isSet bool
}

func (v NullableThreatFeedSource) Get() *ThreatFeedSource {
	return v.value
}

func (v *NullableThreatFeedSource) Set(val *ThreatFeedSource) {
	v.value = val
	v.isSet = true
}

func (v NullableThreatFeedSource) IsSet() bool {
	return v.isSet
}

func (v *NullableThreatFeedSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreatFeedSource(val *ThreatFeedSource) *NullableThreatFeedSource {
	return &NullableThreatFeedSource{value: val, isSet: true}
}

func (v NullableThreatFeedSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreatFeedSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
