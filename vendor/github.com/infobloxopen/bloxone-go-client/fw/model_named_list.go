/*
BloxOne FW API

BloxOne Threat Defense Cloud is an extension of the BloxOne Suite that provides visibility into infected and compromised off-premises devices, roaming users, remote sites, and branch offices. You can subscribe to BloxOne Cloud and use its functionality to mitigate and control malware as well as provide unprecedented insight into your network security posture and enable timely action. BloxOne Cloud also offers unified policy management, reporting, and threat analytics across the entire spectrum. Using automated and high-quality threat intelligence feeds and unique behavioral analytics, it automatically stops device communications with C&Cs/botnets and prevents DNS based data exfiltration.  The mission-critical DNS infrastructure can become a vulnerable component in your network when it is inadequately protected by traditional security solutions and consequently used as an attack surface. Compromised DNS services can result in catastrophic network and system failures. To fully protect your network in todayâ€™s cyber security threat environment, Infoblox sets a new DNS security standard by offering scalable, enterprise-grade, and integrated protection for your DNS infrastructure.  Through the Infoblox Cloud Services Portal, you can view the status of your subscription and threat intelligence feeds, manage your network scope and roaming end users, and learn more about threats on your networks through the Infoblox Threat Lookup tool and predefined reports.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fw

import (
	"encoding/json"
	"time"
)

// checks if the NamedList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NamedList{}

// NamedList The Named List object.  The Named List object represents several types of lists allowed for BloxOne Cloud such as predefined threat intelligence feeds that your subscription offers (Threat Insight, Fast Flux, DGA, DNSM). In addition to the predefined threat intelligence feeds that your subscription offers, you can create custom lists (containing domains and IP addresses) to define whitelists and blacklists for additional protection. You can use a custom list to complement existing feeds or override the Block, Allow, Log, or Redirect action that is currently defined for an existing feed.  Note that lists representing predefined TI feeds cannot be created, updated and deleted.
type NamedList struct {
	// The confidence level for a custom list. The possible values are [\"LOW\", \"MEDIUM\", \"HIGH\"]
	ConfidenceLevel *string `json:"confidence_level,omitempty"`
	// The time when this Named List object was created.
	CreatedTime *time.Time `json:"created_time,omitempty"`
	// The brief description for the named list.
	Description *string `json:"description,omitempty"`
	// The Named List object identifier.
	Id *int32 `json:"id,omitempty"`
	// The number of items in this named list.
	ItemCount *int32 `json:"item_count,omitempty"`
	// The list of the FQDN or IPv4/IPv6 CIDRs to define whitelists and blacklists for additional protection.
	Items []string `json:"items,omitempty"`
	// The List of ItemStructs structure which contains the item and its description
	ItemsDescribed []ItemStructs `json:"items_described,omitempty"`
	// The name of the named list.
	Name *string `json:"name,omitempty"`
	// The list of the security policy names with which the named list is associated.
	Policies []string `json:"policies,omitempty"`
	// Enables tag support for resource where tags attribute contains user-defined key value pairs
	Tags map[string]interface{} `json:"tags,omitempty"`
	// The threat level for a custom list. The possible values are [\"INFO\", \"LOW\", \"MEDIUM\", \"HIGH\"]
	ThreatLevel *string `json:"threat_level,omitempty"`
	// The type of the named list, that can be \"custom_list\", \"threat_insight\", \"fast_flux\", \"dga\", \"dnsm\", \"threat_insight_nde\", \"default_allow\", \"default_block\" or \"threat_insight_nde\".
	Type *string `json:"type,omitempty"`
	// The time when this Named List object was last updated.
	UpdatedTime *time.Time `json:"updated_time,omitempty"`
}

// NewNamedList instantiates a new NamedList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamedList() *NamedList {
	this := NamedList{}
	return &this
}

// NewNamedListWithDefaults instantiates a new NamedList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamedListWithDefaults() *NamedList {
	this := NamedList{}
	return &this
}

// GetConfidenceLevel returns the ConfidenceLevel field value if set, zero value otherwise.
func (o *NamedList) GetConfidenceLevel() string {
	if o == nil || IsNil(o.ConfidenceLevel) {
		var ret string
		return ret
	}
	return *o.ConfidenceLevel
}

// GetConfidenceLevelOk returns a tuple with the ConfidenceLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamedList) GetConfidenceLevelOk() (*string, bool) {
	if o == nil || IsNil(o.ConfidenceLevel) {
		return nil, false
	}
	return o.ConfidenceLevel, true
}

// HasConfidenceLevel returns a boolean if a field has been set.
func (o *NamedList) HasConfidenceLevel() bool {
	if o != nil && !IsNil(o.ConfidenceLevel) {
		return true
	}

	return false
}

// SetConfidenceLevel gets a reference to the given string and assigns it to the ConfidenceLevel field.
func (o *NamedList) SetConfidenceLevel(v string) {
	o.ConfidenceLevel = &v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *NamedList) GetCreatedTime() time.Time {
	if o == nil || IsNil(o.CreatedTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamedList) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *NamedList) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given time.Time and assigns it to the CreatedTime field.
func (o *NamedList) SetCreatedTime(v time.Time) {
	o.CreatedTime = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NamedList) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamedList) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NamedList) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NamedList) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NamedList) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamedList) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NamedList) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *NamedList) SetId(v int32) {
	o.Id = &v
}

// GetItemCount returns the ItemCount field value if set, zero value otherwise.
func (o *NamedList) GetItemCount() int32 {
	if o == nil || IsNil(o.ItemCount) {
		var ret int32
		return ret
	}
	return *o.ItemCount
}

// GetItemCountOk returns a tuple with the ItemCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamedList) GetItemCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ItemCount) {
		return nil, false
	}
	return o.ItemCount, true
}

// HasItemCount returns a boolean if a field has been set.
func (o *NamedList) HasItemCount() bool {
	if o != nil && !IsNil(o.ItemCount) {
		return true
	}

	return false
}

// SetItemCount gets a reference to the given int32 and assigns it to the ItemCount field.
func (o *NamedList) SetItemCount(v int32) {
	o.ItemCount = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *NamedList) GetItems() []string {
	if o == nil || IsNil(o.Items) {
		var ret []string
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamedList) GetItemsOk() ([]string, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *NamedList) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []string and assigns it to the Items field.
func (o *NamedList) SetItems(v []string) {
	o.Items = v
}

// GetItemsDescribed returns the ItemsDescribed field value if set, zero value otherwise.
func (o *NamedList) GetItemsDescribed() []ItemStructs {
	if o == nil || IsNil(o.ItemsDescribed) {
		var ret []ItemStructs
		return ret
	}
	return o.ItemsDescribed
}

// GetItemsDescribedOk returns a tuple with the ItemsDescribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamedList) GetItemsDescribedOk() ([]ItemStructs, bool) {
	if o == nil || IsNil(o.ItemsDescribed) {
		return nil, false
	}
	return o.ItemsDescribed, true
}

// HasItemsDescribed returns a boolean if a field has been set.
func (o *NamedList) HasItemsDescribed() bool {
	if o != nil && !IsNil(o.ItemsDescribed) {
		return true
	}

	return false
}

// SetItemsDescribed gets a reference to the given []ItemStructs and assigns it to the ItemsDescribed field.
func (o *NamedList) SetItemsDescribed(v []ItemStructs) {
	o.ItemsDescribed = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NamedList) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamedList) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NamedList) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NamedList) SetName(v string) {
	o.Name = &v
}

// GetPolicies returns the Policies field value if set, zero value otherwise.
func (o *NamedList) GetPolicies() []string {
	if o == nil || IsNil(o.Policies) {
		var ret []string
		return ret
	}
	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamedList) GetPoliciesOk() ([]string, bool) {
	if o == nil || IsNil(o.Policies) {
		return nil, false
	}
	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *NamedList) HasPolicies() bool {
	if o != nil && !IsNil(o.Policies) {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []string and assigns it to the Policies field.
func (o *NamedList) SetPolicies(v []string) {
	o.Policies = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *NamedList) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamedList) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *NamedList) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *NamedList) SetTags(v map[string]interface{}) {
	o.Tags = v
}

// GetThreatLevel returns the ThreatLevel field value if set, zero value otherwise.
func (o *NamedList) GetThreatLevel() string {
	if o == nil || IsNil(o.ThreatLevel) {
		var ret string
		return ret
	}
	return *o.ThreatLevel
}

// GetThreatLevelOk returns a tuple with the ThreatLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamedList) GetThreatLevelOk() (*string, bool) {
	if o == nil || IsNil(o.ThreatLevel) {
		return nil, false
	}
	return o.ThreatLevel, true
}

// HasThreatLevel returns a boolean if a field has been set.
func (o *NamedList) HasThreatLevel() bool {
	if o != nil && !IsNil(o.ThreatLevel) {
		return true
	}

	return false
}

// SetThreatLevel gets a reference to the given string and assigns it to the ThreatLevel field.
func (o *NamedList) SetThreatLevel(v string) {
	o.ThreatLevel = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NamedList) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamedList) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NamedList) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NamedList) SetType(v string) {
	o.Type = &v
}

// GetUpdatedTime returns the UpdatedTime field value if set, zero value otherwise.
func (o *NamedList) GetUpdatedTime() time.Time {
	if o == nil || IsNil(o.UpdatedTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamedList) GetUpdatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedTime) {
		return nil, false
	}
	return o.UpdatedTime, true
}

// HasUpdatedTime returns a boolean if a field has been set.
func (o *NamedList) HasUpdatedTime() bool {
	if o != nil && !IsNil(o.UpdatedTime) {
		return true
	}

	return false
}

// SetUpdatedTime gets a reference to the given time.Time and assigns it to the UpdatedTime field.
func (o *NamedList) SetUpdatedTime(v time.Time) {
	o.UpdatedTime = &v
}

func (o NamedList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NamedList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfidenceLevel) {
		toSerialize["confidence_level"] = o.ConfidenceLevel
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ItemCount) {
		toSerialize["item_count"] = o.ItemCount
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.ItemsDescribed) {
		toSerialize["items_described"] = o.ItemsDescribed
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Policies) {
		toSerialize["policies"] = o.Policies
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.ThreatLevel) {
		toSerialize["threat_level"] = o.ThreatLevel
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UpdatedTime) {
		toSerialize["updated_time"] = o.UpdatedTime
	}
	return toSerialize, nil
}

type NullableNamedList struct {
	value *NamedList
	isSet bool
}

func (v NullableNamedList) Get() *NamedList {
	return v.value
}

func (v *NullableNamedList) Set(val *NamedList) {
	v.value = val
	v.isSet = true
}

func (v NullableNamedList) IsSet() bool {
	return v.isSet
}

func (v *NullableNamedList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamedList(val *NamedList) *NullableNamedList {
	return &NullableNamedList{value: val, isSet: true}
}

func (v NullableNamedList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamedList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
