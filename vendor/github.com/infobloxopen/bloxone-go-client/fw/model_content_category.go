/*
BloxOne FW API

BloxOne Threat Defense Cloud is an extension of the BloxOne Suite that provides visibility into infected and compromised off-premises devices, roaming users, remote sites, and branch offices. You can subscribe to BloxOne Cloud and use its functionality to mitigate and control malware as well as provide unprecedented insight into your network security posture and enable timely action. BloxOne Cloud also offers unified policy management, reporting, and threat analytics across the entire spectrum. Using automated and high-quality threat intelligence feeds and unique behavioral analytics, it automatically stops device communications with C&Cs/botnets and prevents DNS based data exfiltration.  The mission-critical DNS infrastructure can become a vulnerable component in your network when it is inadequately protected by traditional security solutions and consequently used as an attack surface. Compromised DNS services can result in catastrophic network and system failures. To fully protect your network in todayâ€™s cyber security threat environment, Infoblox sets a new DNS security standard by offering scalable, enterprise-grade, and integrated protection for your DNS infrastructure.  Through the Infoblox Cloud Services Portal, you can view the status of your subscription and threat intelligence feeds, manage your network scope and roaming end users, and learn more about threats on your networks through the Infoblox Threat Lookup tool and predefined reports.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fw

import (
	"encoding/json"
)

// checks if the ContentCategory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentCategory{}

// ContentCategory The Content Category object.  The Content Category object represents a specific internet content and used to configure category filters. Based on your configuration, specific actions such as Allow or Block, will be taken on the detected content. BloxOne Cloud provides the following content categories from which you can build your category filters: Drugs, Risk/Fraud/Crime, Entertainment/Culture, Purchasing, Information/Communication, Business/Services, Information Technology, Lifestyle, Society/Education/Religion, Mature/Violent, Games/Gambling, Pornography/Nudity and Uncategorized. Each of these categories contains sub-categories that further define the respective content. When you configure your category filter, you can add as many categories and sub-categories as you need.
type ContentCategory struct {
	// The category code.
	CategoryCode *int32 `json:"category_code,omitempty"`
	// The name of the category.
	CategoryName *string `json:"category_name,omitempty"`
	// The functional group name of the category.
	FunctionalGroup      *string `json:"functional_group,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ContentCategory ContentCategory

// NewContentCategory instantiates a new ContentCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentCategory() *ContentCategory {
	this := ContentCategory{}
	return &this
}

// NewContentCategoryWithDefaults instantiates a new ContentCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentCategoryWithDefaults() *ContentCategory {
	this := ContentCategory{}
	return &this
}

// GetCategoryCode returns the CategoryCode field value if set, zero value otherwise.
func (o *ContentCategory) GetCategoryCode() int32 {
	if o == nil || IsNil(o.CategoryCode) {
		var ret int32
		return ret
	}
	return *o.CategoryCode
}

// GetCategoryCodeOk returns a tuple with the CategoryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentCategory) GetCategoryCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.CategoryCode) {
		return nil, false
	}
	return o.CategoryCode, true
}

// HasCategoryCode returns a boolean if a field has been set.
func (o *ContentCategory) HasCategoryCode() bool {
	if o != nil && !IsNil(o.CategoryCode) {
		return true
	}

	return false
}

// SetCategoryCode gets a reference to the given int32 and assigns it to the CategoryCode field.
func (o *ContentCategory) SetCategoryCode(v int32) {
	o.CategoryCode = &v
}

// GetCategoryName returns the CategoryName field value if set, zero value otherwise.
func (o *ContentCategory) GetCategoryName() string {
	if o == nil || IsNil(o.CategoryName) {
		var ret string
		return ret
	}
	return *o.CategoryName
}

// GetCategoryNameOk returns a tuple with the CategoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentCategory) GetCategoryNameOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryName) {
		return nil, false
	}
	return o.CategoryName, true
}

// HasCategoryName returns a boolean if a field has been set.
func (o *ContentCategory) HasCategoryName() bool {
	if o != nil && !IsNil(o.CategoryName) {
		return true
	}

	return false
}

// SetCategoryName gets a reference to the given string and assigns it to the CategoryName field.
func (o *ContentCategory) SetCategoryName(v string) {
	o.CategoryName = &v
}

// GetFunctionalGroup returns the FunctionalGroup field value if set, zero value otherwise.
func (o *ContentCategory) GetFunctionalGroup() string {
	if o == nil || IsNil(o.FunctionalGroup) {
		var ret string
		return ret
	}
	return *o.FunctionalGroup
}

// GetFunctionalGroupOk returns a tuple with the FunctionalGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentCategory) GetFunctionalGroupOk() (*string, bool) {
	if o == nil || IsNil(o.FunctionalGroup) {
		return nil, false
	}
	return o.FunctionalGroup, true
}

// HasFunctionalGroup returns a boolean if a field has been set.
func (o *ContentCategory) HasFunctionalGroup() bool {
	if o != nil && !IsNil(o.FunctionalGroup) {
		return true
	}

	return false
}

// SetFunctionalGroup gets a reference to the given string and assigns it to the FunctionalGroup field.
func (o *ContentCategory) SetFunctionalGroup(v string) {
	o.FunctionalGroup = &v
}

func (o ContentCategory) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentCategory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CategoryCode) {
		toSerialize["category_code"] = o.CategoryCode
	}
	if !IsNil(o.CategoryName) {
		toSerialize["category_name"] = o.CategoryName
	}
	if !IsNil(o.FunctionalGroup) {
		toSerialize["functional_group"] = o.FunctionalGroup
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ContentCategory) UnmarshalJSON(data []byte) (err error) {
	varContentCategory := _ContentCategory{}

	err = json.Unmarshal(data, &varContentCategory)

	if err != nil {
		return err
	}

	*o = ContentCategory(varContentCategory)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "category_code")
		delete(additionalProperties, "category_name")
		delete(additionalProperties, "functional_group")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContentCategory struct {
	value *ContentCategory
	isSet bool
}

func (v NullableContentCategory) Get() *ContentCategory {
	return v.value
}

func (v *NullableContentCategory) Set(val *ContentCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableContentCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableContentCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentCategory(val *ContentCategory) *NullableContentCategory {
	return &NullableContentCategory{value: val, isSet: true}
}

func (v NullableContentCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
