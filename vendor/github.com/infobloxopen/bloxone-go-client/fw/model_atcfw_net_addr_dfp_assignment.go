/*
BloxOne FW API

BloxOne Threat Defense Cloud is an extension of the BloxOne Suite that provides visibility into infected and compromised off-premises devices, roaming users, remote sites, and branch offices. You can subscribe to BloxOne Cloud and use its functionality to mitigate and control malware as well as provide unprecedented insight into your network security posture and enable timely action. BloxOne Cloud also offers unified policy management, reporting, and threat analytics across the entire spectrum. Using automated and high-quality threat intelligence feeds and unique behavioral analytics, it automatically stops device communications with C&Cs/botnets and prevents DNS based data exfiltration.  The mission-critical DNS infrastructure can become a vulnerable component in your network when it is inadequately protected by traditional security solutions and consequently used as an attack surface. Compromised DNS services can result in catastrophic network and system failures. To fully protect your network in todayâ€™s cyber security threat environment, Infoblox sets a new DNS security standard by offering scalable, enterprise-grade, and integrated protection for your DNS infrastructure.  Through the Infoblox Cloud Services Portal, you can view the status of your subscription and threat intelligence feeds, manage your network scope and roaming end users, and learn more about threats on your networks through the Infoblox Threat Lookup tool and predefined reports.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fw

import (
	"encoding/json"
)

// checks if the AtcfwNetAddrDfpAssignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AtcfwNetAddrDfpAssignment{}

// AtcfwNetAddrDfpAssignment Scoped DFP assignment to a policy, scoped via network address (CIDR)
type AtcfwNetAddrDfpAssignment struct {
	// network address in IPv4 CIDR (address/bitmask length) string format
	AddrNet *string `json:"addr_net,omitempty"`
	// The list of identifiers of DFPs that have association with this scope.
	DfpIds        []int32  `json:"dfp_ids,omitempty"`
	DfpServiceIds []string `json:"dfp_service_ids,omitempty"`
	End           *string  `json:"end,omitempty"`
	// external scope ID, UUID
	ExternalScopeId *string `json:"external_scope_id,omitempty"`
	// Host reference, UUID
	HostId *string `json:"host_id,omitempty"`
	// IPSpace reference, UUID
	IpSpaceId *string                        `json:"ip_space_id,omitempty"`
	ScopeType *NetAddrDfpAssignmentScopeType `json:"scope_type,omitempty"`
	// Start and end pair of addresses used for range scope type
	Start *string `json:"start,omitempty"`
}

// NewAtcfwNetAddrDfpAssignment instantiates a new AtcfwNetAddrDfpAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAtcfwNetAddrDfpAssignment() *AtcfwNetAddrDfpAssignment {
	this := AtcfwNetAddrDfpAssignment{}
	var scopeType NetAddrDfpAssignmentScopeType = NETADDRDFPASSIGNMENTSCOPETYPE_UNKNOWN
	this.ScopeType = &scopeType
	return &this
}

// NewAtcfwNetAddrDfpAssignmentWithDefaults instantiates a new AtcfwNetAddrDfpAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAtcfwNetAddrDfpAssignmentWithDefaults() *AtcfwNetAddrDfpAssignment {
	this := AtcfwNetAddrDfpAssignment{}
	var scopeType NetAddrDfpAssignmentScopeType = NETADDRDFPASSIGNMENTSCOPETYPE_UNKNOWN
	this.ScopeType = &scopeType
	return &this
}

// GetAddrNet returns the AddrNet field value if set, zero value otherwise.
func (o *AtcfwNetAddrDfpAssignment) GetAddrNet() string {
	if o == nil || IsNil(o.AddrNet) {
		var ret string
		return ret
	}
	return *o.AddrNet
}

// GetAddrNetOk returns a tuple with the AddrNet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtcfwNetAddrDfpAssignment) GetAddrNetOk() (*string, bool) {
	if o == nil || IsNil(o.AddrNet) {
		return nil, false
	}
	return o.AddrNet, true
}

// HasAddrNet returns a boolean if a field has been set.
func (o *AtcfwNetAddrDfpAssignment) HasAddrNet() bool {
	if o != nil && !IsNil(o.AddrNet) {
		return true
	}

	return false
}

// SetAddrNet gets a reference to the given string and assigns it to the AddrNet field.
func (o *AtcfwNetAddrDfpAssignment) SetAddrNet(v string) {
	o.AddrNet = &v
}

// GetDfpIds returns the DfpIds field value if set, zero value otherwise.
func (o *AtcfwNetAddrDfpAssignment) GetDfpIds() []int32 {
	if o == nil || IsNil(o.DfpIds) {
		var ret []int32
		return ret
	}
	return o.DfpIds
}

// GetDfpIdsOk returns a tuple with the DfpIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtcfwNetAddrDfpAssignment) GetDfpIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.DfpIds) {
		return nil, false
	}
	return o.DfpIds, true
}

// HasDfpIds returns a boolean if a field has been set.
func (o *AtcfwNetAddrDfpAssignment) HasDfpIds() bool {
	if o != nil && !IsNil(o.DfpIds) {
		return true
	}

	return false
}

// SetDfpIds gets a reference to the given []int32 and assigns it to the DfpIds field.
func (o *AtcfwNetAddrDfpAssignment) SetDfpIds(v []int32) {
	o.DfpIds = v
}

// GetDfpServiceIds returns the DfpServiceIds field value if set, zero value otherwise.
func (o *AtcfwNetAddrDfpAssignment) GetDfpServiceIds() []string {
	if o == nil || IsNil(o.DfpServiceIds) {
		var ret []string
		return ret
	}
	return o.DfpServiceIds
}

// GetDfpServiceIdsOk returns a tuple with the DfpServiceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtcfwNetAddrDfpAssignment) GetDfpServiceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.DfpServiceIds) {
		return nil, false
	}
	return o.DfpServiceIds, true
}

// HasDfpServiceIds returns a boolean if a field has been set.
func (o *AtcfwNetAddrDfpAssignment) HasDfpServiceIds() bool {
	if o != nil && !IsNil(o.DfpServiceIds) {
		return true
	}

	return false
}

// SetDfpServiceIds gets a reference to the given []string and assigns it to the DfpServiceIds field.
func (o *AtcfwNetAddrDfpAssignment) SetDfpServiceIds(v []string) {
	o.DfpServiceIds = v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *AtcfwNetAddrDfpAssignment) GetEnd() string {
	if o == nil || IsNil(o.End) {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtcfwNetAddrDfpAssignment) GetEndOk() (*string, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *AtcfwNetAddrDfpAssignment) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *AtcfwNetAddrDfpAssignment) SetEnd(v string) {
	o.End = &v
}

// GetExternalScopeId returns the ExternalScopeId field value if set, zero value otherwise.
func (o *AtcfwNetAddrDfpAssignment) GetExternalScopeId() string {
	if o == nil || IsNil(o.ExternalScopeId) {
		var ret string
		return ret
	}
	return *o.ExternalScopeId
}

// GetExternalScopeIdOk returns a tuple with the ExternalScopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtcfwNetAddrDfpAssignment) GetExternalScopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalScopeId) {
		return nil, false
	}
	return o.ExternalScopeId, true
}

// HasExternalScopeId returns a boolean if a field has been set.
func (o *AtcfwNetAddrDfpAssignment) HasExternalScopeId() bool {
	if o != nil && !IsNil(o.ExternalScopeId) {
		return true
	}

	return false
}

// SetExternalScopeId gets a reference to the given string and assigns it to the ExternalScopeId field.
func (o *AtcfwNetAddrDfpAssignment) SetExternalScopeId(v string) {
	o.ExternalScopeId = &v
}

// GetHostId returns the HostId field value if set, zero value otherwise.
func (o *AtcfwNetAddrDfpAssignment) GetHostId() string {
	if o == nil || IsNil(o.HostId) {
		var ret string
		return ret
	}
	return *o.HostId
}

// GetHostIdOk returns a tuple with the HostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtcfwNetAddrDfpAssignment) GetHostIdOk() (*string, bool) {
	if o == nil || IsNil(o.HostId) {
		return nil, false
	}
	return o.HostId, true
}

// HasHostId returns a boolean if a field has been set.
func (o *AtcfwNetAddrDfpAssignment) HasHostId() bool {
	if o != nil && !IsNil(o.HostId) {
		return true
	}

	return false
}

// SetHostId gets a reference to the given string and assigns it to the HostId field.
func (o *AtcfwNetAddrDfpAssignment) SetHostId(v string) {
	o.HostId = &v
}

// GetIpSpaceId returns the IpSpaceId field value if set, zero value otherwise.
func (o *AtcfwNetAddrDfpAssignment) GetIpSpaceId() string {
	if o == nil || IsNil(o.IpSpaceId) {
		var ret string
		return ret
	}
	return *o.IpSpaceId
}

// GetIpSpaceIdOk returns a tuple with the IpSpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtcfwNetAddrDfpAssignment) GetIpSpaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.IpSpaceId) {
		return nil, false
	}
	return o.IpSpaceId, true
}

// HasIpSpaceId returns a boolean if a field has been set.
func (o *AtcfwNetAddrDfpAssignment) HasIpSpaceId() bool {
	if o != nil && !IsNil(o.IpSpaceId) {
		return true
	}

	return false
}

// SetIpSpaceId gets a reference to the given string and assigns it to the IpSpaceId field.
func (o *AtcfwNetAddrDfpAssignment) SetIpSpaceId(v string) {
	o.IpSpaceId = &v
}

// GetScopeType returns the ScopeType field value if set, zero value otherwise.
func (o *AtcfwNetAddrDfpAssignment) GetScopeType() NetAddrDfpAssignmentScopeType {
	if o == nil || IsNil(o.ScopeType) {
		var ret NetAddrDfpAssignmentScopeType
		return ret
	}
	return *o.ScopeType
}

// GetScopeTypeOk returns a tuple with the ScopeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtcfwNetAddrDfpAssignment) GetScopeTypeOk() (*NetAddrDfpAssignmentScopeType, bool) {
	if o == nil || IsNil(o.ScopeType) {
		return nil, false
	}
	return o.ScopeType, true
}

// HasScopeType returns a boolean if a field has been set.
func (o *AtcfwNetAddrDfpAssignment) HasScopeType() bool {
	if o != nil && !IsNil(o.ScopeType) {
		return true
	}

	return false
}

// SetScopeType gets a reference to the given NetAddrDfpAssignmentScopeType and assigns it to the ScopeType field.
func (o *AtcfwNetAddrDfpAssignment) SetScopeType(v NetAddrDfpAssignmentScopeType) {
	o.ScopeType = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *AtcfwNetAddrDfpAssignment) GetStart() string {
	if o == nil || IsNil(o.Start) {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtcfwNetAddrDfpAssignment) GetStartOk() (*string, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *AtcfwNetAddrDfpAssignment) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *AtcfwNetAddrDfpAssignment) SetStart(v string) {
	o.Start = &v
}

func (o AtcfwNetAddrDfpAssignment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AtcfwNetAddrDfpAssignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddrNet) {
		toSerialize["addr_net"] = o.AddrNet
	}
	if !IsNil(o.DfpIds) {
		toSerialize["dfp_ids"] = o.DfpIds
	}
	if !IsNil(o.DfpServiceIds) {
		toSerialize["dfp_service_ids"] = o.DfpServiceIds
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.ExternalScopeId) {
		toSerialize["external_scope_id"] = o.ExternalScopeId
	}
	if !IsNil(o.HostId) {
		toSerialize["host_id"] = o.HostId
	}
	if !IsNil(o.IpSpaceId) {
		toSerialize["ip_space_id"] = o.IpSpaceId
	}
	if !IsNil(o.ScopeType) {
		toSerialize["scope_type"] = o.ScopeType
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	return toSerialize, nil
}

type NullableAtcfwNetAddrDfpAssignment struct {
	value *AtcfwNetAddrDfpAssignment
	isSet bool
}

func (v NullableAtcfwNetAddrDfpAssignment) Get() *AtcfwNetAddrDfpAssignment {
	return v.value
}

func (v *NullableAtcfwNetAddrDfpAssignment) Set(val *AtcfwNetAddrDfpAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableAtcfwNetAddrDfpAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableAtcfwNetAddrDfpAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAtcfwNetAddrDfpAssignment(val *AtcfwNetAddrDfpAssignment) *NullableAtcfwNetAddrDfpAssignment {
	return &NullableAtcfwNetAddrDfpAssignment{value: val, isSet: true}
}

func (v NullableAtcfwNetAddrDfpAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAtcfwNetAddrDfpAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
