/*
BloxOne FW API

BloxOne Threat Defense Cloud is an extension of the BloxOne Suite that provides visibility into infected and compromised off-premises devices, roaming users, remote sites, and branch offices. You can subscribe to BloxOne Cloud and use its functionality to mitigate and control malware as well as provide unprecedented insight into your network security posture and enable timely action. BloxOne Cloud also offers unified policy management, reporting, and threat analytics across the entire spectrum. Using automated and high-quality threat intelligence feeds and unique behavioral analytics, it automatically stops device communications with C&Cs/botnets and prevents DNS based data exfiltration.  The mission-critical DNS infrastructure can become a vulnerable component in your network when it is inadequately protected by traditional security solutions and consequently used as an attack surface. Compromised DNS services can result in catastrophic network and system failures. To fully protect your network in todayâ€™s cyber security threat environment, Infoblox sets a new DNS security standard by offering scalable, enterprise-grade, and integrated protection for your DNS infrastructure.  Through the Infoblox Cloud Services Portal, you can view the status of your subscription and threat intelligence feeds, manage your network scope and roaming end users, and learn more about threats on your networks through the Infoblox Threat Lookup tool and predefined reports.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fw

import (
	"encoding/json"
)

// checks if the ThreatFeed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreatFeed{}

// ThreatFeed The Threat Feed object.  BloxOne Cloud provides predefined threat intelligence feeds based on your subscription. The Plus subscription offers a few more feeds than the Standard subscription. The Advanced subscription offers a few more feeds than the Plus subscription. A threat feed subscription for RPZ updates offers protection against malicious hostnames.
type ThreatFeed struct {
	// The Confidence Level of the Feed.
	ConfidenceLevel *string `json:"confidence_level,omitempty"`
	// The brief description for the thread feed.
	Description *string `json:"description,omitempty"`
	// The TSIG key of the threat feed.
	Key *string `json:"key,omitempty"`
	// The name of the thread feed.
	Name   *string           `json:"name,omitempty"`
	Source *ThreatFeedSource `json:"source,omitempty"`
	// The Threat Level of the Feed.
	ThreatLevel          *string `json:"threat_level,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ThreatFeed ThreatFeed

// NewThreatFeed instantiates a new ThreatFeed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreatFeed() *ThreatFeed {
	this := ThreatFeed{}
	var source ThreatFeedSource = THREATFEEDSOURCE_INFOBLOX
	this.Source = &source
	return &this
}

// NewThreatFeedWithDefaults instantiates a new ThreatFeed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreatFeedWithDefaults() *ThreatFeed {
	this := ThreatFeed{}
	var source ThreatFeedSource = THREATFEEDSOURCE_INFOBLOX
	this.Source = &source
	return &this
}

// GetConfidenceLevel returns the ConfidenceLevel field value if set, zero value otherwise.
func (o *ThreatFeed) GetConfidenceLevel() string {
	if o == nil || IsNil(o.ConfidenceLevel) {
		var ret string
		return ret
	}
	return *o.ConfidenceLevel
}

// GetConfidenceLevelOk returns a tuple with the ConfidenceLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatFeed) GetConfidenceLevelOk() (*string, bool) {
	if o == nil || IsNil(o.ConfidenceLevel) {
		return nil, false
	}
	return o.ConfidenceLevel, true
}

// HasConfidenceLevel returns a boolean if a field has been set.
func (o *ThreatFeed) HasConfidenceLevel() bool {
	if o != nil && !IsNil(o.ConfidenceLevel) {
		return true
	}

	return false
}

// SetConfidenceLevel gets a reference to the given string and assigns it to the ConfidenceLevel field.
func (o *ThreatFeed) SetConfidenceLevel(v string) {
	o.ConfidenceLevel = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ThreatFeed) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatFeed) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ThreatFeed) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ThreatFeed) SetDescription(v string) {
	o.Description = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ThreatFeed) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatFeed) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ThreatFeed) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ThreatFeed) SetKey(v string) {
	o.Key = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ThreatFeed) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatFeed) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ThreatFeed) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ThreatFeed) SetName(v string) {
	o.Name = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ThreatFeed) GetSource() ThreatFeedSource {
	if o == nil || IsNil(o.Source) {
		var ret ThreatFeedSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatFeed) GetSourceOk() (*ThreatFeedSource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ThreatFeed) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given ThreatFeedSource and assigns it to the Source field.
func (o *ThreatFeed) SetSource(v ThreatFeedSource) {
	o.Source = &v
}

// GetThreatLevel returns the ThreatLevel field value if set, zero value otherwise.
func (o *ThreatFeed) GetThreatLevel() string {
	if o == nil || IsNil(o.ThreatLevel) {
		var ret string
		return ret
	}
	return *o.ThreatLevel
}

// GetThreatLevelOk returns a tuple with the ThreatLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatFeed) GetThreatLevelOk() (*string, bool) {
	if o == nil || IsNil(o.ThreatLevel) {
		return nil, false
	}
	return o.ThreatLevel, true
}

// HasThreatLevel returns a boolean if a field has been set.
func (o *ThreatFeed) HasThreatLevel() bool {
	if o != nil && !IsNil(o.ThreatLevel) {
		return true
	}

	return false
}

// SetThreatLevel gets a reference to the given string and assigns it to the ThreatLevel field.
func (o *ThreatFeed) SetThreatLevel(v string) {
	o.ThreatLevel = &v
}

func (o ThreatFeed) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreatFeed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfidenceLevel) {
		toSerialize["confidence_level"] = o.ConfidenceLevel
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.ThreatLevel) {
		toSerialize["threat_level"] = o.ThreatLevel
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ThreatFeed) UnmarshalJSON(data []byte) (err error) {
	varThreatFeed := _ThreatFeed{}

	err = json.Unmarshal(data, &varThreatFeed)

	if err != nil {
		return err
	}

	*o = ThreatFeed(varThreatFeed)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "confidence_level")
		delete(additionalProperties, "description")
		delete(additionalProperties, "key")
		delete(additionalProperties, "name")
		delete(additionalProperties, "source")
		delete(additionalProperties, "threat_level")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableThreatFeed struct {
	value *ThreatFeed
	isSet bool
}

func (v NullableThreatFeed) Get() *ThreatFeed {
	return v.value
}

func (v *NullableThreatFeed) Set(val *ThreatFeed) {
	v.value = val
	v.isSet = true
}

func (v NullableThreatFeed) IsSet() bool {
	return v.isSet
}

func (v *NullableThreatFeed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreatFeed(val *ThreatFeed) *NullableThreatFeed {
	return &NullableThreatFeed{value: val, isSet: true}
}

func (v NullableThreatFeed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreatFeed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
