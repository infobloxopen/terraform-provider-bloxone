/*
DFP API

BloxOne Cloud is a SaaS offering designed to provide protection to devices on and off-premises, including roaming, remote, and branch offices. It provides visibility into infected and compromised devices, prevents DNS-based data exfiltration, and automatically stops device communications with command-and-control servers (C&Cs) and botnets, in addition to providing recursive DNS services in the cloud. You can access the services by deploying the BloxOne Endpoint agent or the DNS forwarding proxy.  For remote office deployments or in cases where installing an endpoint agent is not desirable or possible, you can use the DNS forwarding proxy. It is a software that runs on bare-metal, VM infrastructures, or Infoblox NIOS appliances; and it embeds the client IPs in DNS queries before forwarding them to BloxOne Cloud. The communications are encrypted and client visibility is maintained. The proxy also provides DNS resolution to local DNS zones when you configure local resolvers. Once you set up a DNS forwarding proxy, it becomes the main DNS server for your remote site. It will also cache responses to speed resolution of future queries.  By implementing the DNS forwarding proxy, you can rest assured that BloxOne Cloud effectively enforces DNS client-based security policies at your remote sites. On-premises devices that send DNS queries reveal their actual client IP addresses (instead of their NAT IP address), which allows BloxOne Cloud to apply the security policies applicable to the respective endpoints and identify infected clients.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dfp

import (
	"encoding/json"
	"time"
)

// checks if the Dfp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dfp{}

// Dfp struct for Dfp
type Dfp struct {
	// The time when this DNS Forwarding Proxy object was created.
	CreatedTime *time.Time `json:"created_time,omitempty"`
	// The list of internal or local DNS servers' IPv4 or IPv6 addresses that are used as ELB IPs.
	ElbIpList        []string `json:"elb_ip_list,omitempty"`
	ForwardingPolicy *string  `json:"forwarding_policy,omitempty"`
	// host information. For internal Use only.
	Host []DfpHost `json:"host,omitempty"`
	// The DNS Forwarding Proxy object identifier.
	Id *int32 `json:"id,omitempty"`
	// The list of internal domains list IDs that are associated with this DFP
	InternalDomainLists []int32 `json:"internal_domain_lists,omitempty"`
	// The name of the DNS Forwarding Proxy.
	Name *string `json:"name,omitempty"`
	// List of network-address-scoped security policy assignments
	NetAddrPolicyIds []NetAddrPolicyAssignment `json:"net_addr_policy_ids,omitempty"`
	// The On-Prem Host identifier.
	Ophid *string `json:"ophid,omitempty"`
	// The identifier of the security policy with which the DNS Forwarding Proxy is associated.
	PolicyId *int32 `json:"policy_id,omitempty"`
	// Point of Presence (PoP) region
	PopRegionId  *int32     `json:"pop_region_id,omitempty"`
	ResolversAll []Resolver `json:"resolvers_all,omitempty"`
	// The On-Prem Application Service identifier. For internal Use only
	ServiceId *string `json:"service_id,omitempty"`
	// The On-Prem Application Service name. For internal Use only
	ServiceName *string `json:"service_name,omitempty"`
	// The DNS Forwarding Proxy site identifier that is appended to DNS queries originating from this DNS Forwarding Proxy and subsequently used for policy lookup purposes.
	SiteId *string `json:"site_id,omitempty"`
	// The time when this DNS Forwarding Proxy object was last updated.
	UpdatedTime *time.Time `json:"updated_time,omitempty"`
}

// NewDfp instantiates a new Dfp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDfp() *Dfp {
	this := Dfp{}
	return &this
}

// NewDfpWithDefaults instantiates a new Dfp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDfpWithDefaults() *Dfp {
	this := Dfp{}
	return &this
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *Dfp) GetCreatedTime() time.Time {
	if o == nil || IsNil(o.CreatedTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dfp) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *Dfp) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given time.Time and assigns it to the CreatedTime field.
func (o *Dfp) SetCreatedTime(v time.Time) {
	o.CreatedTime = &v
}

// GetElbIpList returns the ElbIpList field value if set, zero value otherwise.
func (o *Dfp) GetElbIpList() []string {
	if o == nil || IsNil(o.ElbIpList) {
		var ret []string
		return ret
	}
	return o.ElbIpList
}

// GetElbIpListOk returns a tuple with the ElbIpList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dfp) GetElbIpListOk() ([]string, bool) {
	if o == nil || IsNil(o.ElbIpList) {
		return nil, false
	}
	return o.ElbIpList, true
}

// HasElbIpList returns a boolean if a field has been set.
func (o *Dfp) HasElbIpList() bool {
	if o != nil && !IsNil(o.ElbIpList) {
		return true
	}

	return false
}

// SetElbIpList gets a reference to the given []string and assigns it to the ElbIpList field.
func (o *Dfp) SetElbIpList(v []string) {
	o.ElbIpList = v
}

// GetForwardingPolicy returns the ForwardingPolicy field value if set, zero value otherwise.
func (o *Dfp) GetForwardingPolicy() string {
	if o == nil || IsNil(o.ForwardingPolicy) {
		var ret string
		return ret
	}
	return *o.ForwardingPolicy
}

// GetForwardingPolicyOk returns a tuple with the ForwardingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dfp) GetForwardingPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.ForwardingPolicy) {
		return nil, false
	}
	return o.ForwardingPolicy, true
}

// HasForwardingPolicy returns a boolean if a field has been set.
func (o *Dfp) HasForwardingPolicy() bool {
	if o != nil && !IsNil(o.ForwardingPolicy) {
		return true
	}

	return false
}

// SetForwardingPolicy gets a reference to the given string and assigns it to the ForwardingPolicy field.
func (o *Dfp) SetForwardingPolicy(v string) {
	o.ForwardingPolicy = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *Dfp) GetHost() []DfpHost {
	if o == nil || IsNil(o.Host) {
		var ret []DfpHost
		return ret
	}
	return o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dfp) GetHostOk() ([]DfpHost, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *Dfp) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given []DfpHost and assigns it to the Host field.
func (o *Dfp) SetHost(v []DfpHost) {
	o.Host = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Dfp) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dfp) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Dfp) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Dfp) SetId(v int32) {
	o.Id = &v
}

// GetInternalDomainLists returns the InternalDomainLists field value if set, zero value otherwise.
func (o *Dfp) GetInternalDomainLists() []int32 {
	if o == nil || IsNil(o.InternalDomainLists) {
		var ret []int32
		return ret
	}
	return o.InternalDomainLists
}

// GetInternalDomainListsOk returns a tuple with the InternalDomainLists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dfp) GetInternalDomainListsOk() ([]int32, bool) {
	if o == nil || IsNil(o.InternalDomainLists) {
		return nil, false
	}
	return o.InternalDomainLists, true
}

// HasInternalDomainLists returns a boolean if a field has been set.
func (o *Dfp) HasInternalDomainLists() bool {
	if o != nil && !IsNil(o.InternalDomainLists) {
		return true
	}

	return false
}

// SetInternalDomainLists gets a reference to the given []int32 and assigns it to the InternalDomainLists field.
func (o *Dfp) SetInternalDomainLists(v []int32) {
	o.InternalDomainLists = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Dfp) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dfp) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Dfp) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Dfp) SetName(v string) {
	o.Name = &v
}

// GetNetAddrPolicyIds returns the NetAddrPolicyIds field value if set, zero value otherwise.
func (o *Dfp) GetNetAddrPolicyIds() []NetAddrPolicyAssignment {
	if o == nil || IsNil(o.NetAddrPolicyIds) {
		var ret []NetAddrPolicyAssignment
		return ret
	}
	return o.NetAddrPolicyIds
}

// GetNetAddrPolicyIdsOk returns a tuple with the NetAddrPolicyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dfp) GetNetAddrPolicyIdsOk() ([]NetAddrPolicyAssignment, bool) {
	if o == nil || IsNil(o.NetAddrPolicyIds) {
		return nil, false
	}
	return o.NetAddrPolicyIds, true
}

// HasNetAddrPolicyIds returns a boolean if a field has been set.
func (o *Dfp) HasNetAddrPolicyIds() bool {
	if o != nil && !IsNil(o.NetAddrPolicyIds) {
		return true
	}

	return false
}

// SetNetAddrPolicyIds gets a reference to the given []NetAddrPolicyAssignment and assigns it to the NetAddrPolicyIds field.
func (o *Dfp) SetNetAddrPolicyIds(v []NetAddrPolicyAssignment) {
	o.NetAddrPolicyIds = v
}

// GetOphid returns the Ophid field value if set, zero value otherwise.
func (o *Dfp) GetOphid() string {
	if o == nil || IsNil(o.Ophid) {
		var ret string
		return ret
	}
	return *o.Ophid
}

// GetOphidOk returns a tuple with the Ophid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dfp) GetOphidOk() (*string, bool) {
	if o == nil || IsNil(o.Ophid) {
		return nil, false
	}
	return o.Ophid, true
}

// HasOphid returns a boolean if a field has been set.
func (o *Dfp) HasOphid() bool {
	if o != nil && !IsNil(o.Ophid) {
		return true
	}

	return false
}

// SetOphid gets a reference to the given string and assigns it to the Ophid field.
func (o *Dfp) SetOphid(v string) {
	o.Ophid = &v
}

// GetPolicyId returns the PolicyId field value if set, zero value otherwise.
func (o *Dfp) GetPolicyId() int32 {
	if o == nil || IsNil(o.PolicyId) {
		var ret int32
		return ret
	}
	return *o.PolicyId
}

// GetPolicyIdOk returns a tuple with the PolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dfp) GetPolicyIdOk() (*int32, bool) {
	if o == nil || IsNil(o.PolicyId) {
		return nil, false
	}
	return o.PolicyId, true
}

// HasPolicyId returns a boolean if a field has been set.
func (o *Dfp) HasPolicyId() bool {
	if o != nil && !IsNil(o.PolicyId) {
		return true
	}

	return false
}

// SetPolicyId gets a reference to the given int32 and assigns it to the PolicyId field.
func (o *Dfp) SetPolicyId(v int32) {
	o.PolicyId = &v
}

// GetPopRegionId returns the PopRegionId field value if set, zero value otherwise.
func (o *Dfp) GetPopRegionId() int32 {
	if o == nil || IsNil(o.PopRegionId) {
		var ret int32
		return ret
	}
	return *o.PopRegionId
}

// GetPopRegionIdOk returns a tuple with the PopRegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dfp) GetPopRegionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.PopRegionId) {
		return nil, false
	}
	return o.PopRegionId, true
}

// HasPopRegionId returns a boolean if a field has been set.
func (o *Dfp) HasPopRegionId() bool {
	if o != nil && !IsNil(o.PopRegionId) {
		return true
	}

	return false
}

// SetPopRegionId gets a reference to the given int32 and assigns it to the PopRegionId field.
func (o *Dfp) SetPopRegionId(v int32) {
	o.PopRegionId = &v
}

// GetResolversAll returns the ResolversAll field value if set, zero value otherwise.
func (o *Dfp) GetResolversAll() []Resolver {
	if o == nil || IsNil(o.ResolversAll) {
		var ret []Resolver
		return ret
	}
	return o.ResolversAll
}

// GetResolversAllOk returns a tuple with the ResolversAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dfp) GetResolversAllOk() ([]Resolver, bool) {
	if o == nil || IsNil(o.ResolversAll) {
		return nil, false
	}
	return o.ResolversAll, true
}

// HasResolversAll returns a boolean if a field has been set.
func (o *Dfp) HasResolversAll() bool {
	if o != nil && !IsNil(o.ResolversAll) {
		return true
	}

	return false
}

// SetResolversAll gets a reference to the given []Resolver and assigns it to the ResolversAll field.
func (o *Dfp) SetResolversAll(v []Resolver) {
	o.ResolversAll = v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *Dfp) GetServiceId() string {
	if o == nil || IsNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dfp) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *Dfp) HasServiceId() bool {
	if o != nil && !IsNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *Dfp) SetServiceId(v string) {
	o.ServiceId = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *Dfp) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dfp) GetServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *Dfp) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *Dfp) SetServiceName(v string) {
	o.ServiceName = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *Dfp) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dfp) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *Dfp) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *Dfp) SetSiteId(v string) {
	o.SiteId = &v
}

// GetUpdatedTime returns the UpdatedTime field value if set, zero value otherwise.
func (o *Dfp) GetUpdatedTime() time.Time {
	if o == nil || IsNil(o.UpdatedTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dfp) GetUpdatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedTime) {
		return nil, false
	}
	return o.UpdatedTime, true
}

// HasUpdatedTime returns a boolean if a field has been set.
func (o *Dfp) HasUpdatedTime() bool {
	if o != nil && !IsNil(o.UpdatedTime) {
		return true
	}

	return false
}

// SetUpdatedTime gets a reference to the given time.Time and assigns it to the UpdatedTime field.
func (o *Dfp) SetUpdatedTime(v time.Time) {
	o.UpdatedTime = &v
}

func (o Dfp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dfp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.ElbIpList) {
		toSerialize["elb_ip_list"] = o.ElbIpList
	}
	if !IsNil(o.ForwardingPolicy) {
		toSerialize["forwarding_policy"] = o.ForwardingPolicy
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InternalDomainLists) {
		toSerialize["internal_domain_lists"] = o.InternalDomainLists
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NetAddrPolicyIds) {
		toSerialize["net_addr_policy_ids"] = o.NetAddrPolicyIds
	}
	if !IsNil(o.Ophid) {
		toSerialize["ophid"] = o.Ophid
	}
	if !IsNil(o.PolicyId) {
		toSerialize["policy_id"] = o.PolicyId
	}
	if !IsNil(o.PopRegionId) {
		toSerialize["pop_region_id"] = o.PopRegionId
	}
	if !IsNil(o.ResolversAll) {
		toSerialize["resolvers_all"] = o.ResolversAll
	}
	if !IsNil(o.ServiceId) {
		toSerialize["service_id"] = o.ServiceId
	}
	if !IsNil(o.ServiceName) {
		toSerialize["service_name"] = o.ServiceName
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.UpdatedTime) {
		toSerialize["updated_time"] = o.UpdatedTime
	}
	return toSerialize, nil
}

type NullableDfp struct {
	value *Dfp
	isSet bool
}

func (v NullableDfp) Get() *Dfp {
	return v.value
}

func (v *NullableDfp) Set(val *Dfp) {
	v.value = val
	v.isSet = true
}

func (v NullableDfp) IsSet() bool {
	return v.isSet
}

func (v *NullableDfp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDfp(val *Dfp) *NullableDfp {
	return &NullableDfp{value: val, isSet: true}
}

func (v NullableDfp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDfp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
