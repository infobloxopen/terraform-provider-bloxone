/*
DFP API

BloxOne Cloud is a SaaS offering designed to provide protection to devices on and off-premises, including roaming, remote, and branch offices. It provides visibility into infected and compromised devices, prevents DNS-based data exfiltration, and automatically stops device communications with command-and-control servers (C&Cs) and botnets, in addition to providing recursive DNS services in the cloud. You can access the services by deploying the BloxOne Endpoint agent or the DNS forwarding proxy.  For remote office deployments or in cases where installing an endpoint agent is not desirable or possible, you can use the DNS forwarding proxy. It is a software that runs on bare-metal, VM infrastructures, or Infoblox NIOS appliances; and it embeds the client IPs in DNS queries before forwarding them to BloxOne Cloud. The communications are encrypted and client visibility is maintained. The proxy also provides DNS resolution to local DNS zones when you configure local resolvers. Once you set up a DNS forwarding proxy, it becomes the main DNS server for your remote site. It will also cache responses to speed resolution of future queries.  By implementing the DNS forwarding proxy, you can rest assured that BloxOne Cloud effectively enforces DNS client-based security policies at your remote sites. On-premises devices that send DNS queries reveal their actual client IP addresses (instead of their NAT IP address), which allows BloxOne Cloud to apply the security policies applicable to the respective endpoints and identify infected clients.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dfp

import (
	"encoding/json"
	"fmt"
)

// AtcdfpDNSProtocol the model 'AtcdfpDNSProtocol'
type AtcdfpDNSProtocol string

// List of atcdfpDNSProtocol
const (
	ATCDFPDNSPROTOCOL_DO53 AtcdfpDNSProtocol = "DO53"
	ATCDFPDNSPROTOCOL_DOT  AtcdfpDNSProtocol = "DOT"
)

// All allowed values of AtcdfpDNSProtocol enum
var AllowedAtcdfpDNSProtocolEnumValues = []AtcdfpDNSProtocol{
	"DO53",
	"DOT",
}

func (v *AtcdfpDNSProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AtcdfpDNSProtocol(value)
	for _, existing := range AllowedAtcdfpDNSProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AtcdfpDNSProtocol", value)
}

// NewAtcdfpDNSProtocolFromValue returns a pointer to a valid AtcdfpDNSProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAtcdfpDNSProtocolFromValue(v string) (*AtcdfpDNSProtocol, error) {
	ev := AtcdfpDNSProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AtcdfpDNSProtocol: valid values are %v", v, AllowedAtcdfpDNSProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AtcdfpDNSProtocol) IsValid() bool {
	for _, existing := range AllowedAtcdfpDNSProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to atcdfpDNSProtocol value
func (v AtcdfpDNSProtocol) Ptr() *AtcdfpDNSProtocol {
	return &v
}

type NullableAtcdfpDNSProtocol struct {
	value *AtcdfpDNSProtocol
	isSet bool
}

func (v NullableAtcdfpDNSProtocol) Get() *AtcdfpDNSProtocol {
	return v.value
}

func (v *NullableAtcdfpDNSProtocol) Set(val *AtcdfpDNSProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableAtcdfpDNSProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableAtcdfpDNSProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAtcdfpDNSProtocol(val *AtcdfpDNSProtocol) *NullableAtcdfpDNSProtocol {
	return &NullableAtcdfpDNSProtocol{value: val, isSet: true}
}

func (v NullableAtcdfpDNSProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAtcdfpDNSProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
