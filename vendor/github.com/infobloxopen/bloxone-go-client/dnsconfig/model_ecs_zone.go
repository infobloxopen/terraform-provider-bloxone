/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsconfig

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ECSZone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ECSZone{}

// ECSZone EDNS Client Subnet zone.
type ECSZone struct {
	// Access control for zone.  Allowed values: * _allow_, * _deny_.
	Access string `json:"access"`
	// Zone FQDN.
	Fqdn string `json:"fqdn"`
	// Zone FQDN in punycode.
	ProtocolFqdn *string `json:"protocol_fqdn,omitempty"`
}

type _ECSZone ECSZone

// NewECSZone instantiates a new ECSZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewECSZone(access string, fqdn string) *ECSZone {
	this := ECSZone{}
	this.Access = access
	this.Fqdn = fqdn
	return &this
}

// NewECSZoneWithDefaults instantiates a new ECSZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewECSZoneWithDefaults() *ECSZone {
	this := ECSZone{}
	return &this
}

// GetAccess returns the Access field value
func (o *ECSZone) GetAccess() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Access
}

// GetAccessOk returns a tuple with the Access field value
// and a boolean to check if the value has been set.
func (o *ECSZone) GetAccessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Access, true
}

// SetAccess sets field value
func (o *ECSZone) SetAccess(v string) {
	o.Access = v
}

// GetFqdn returns the Fqdn field value
func (o *ECSZone) GetFqdn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value
// and a boolean to check if the value has been set.
func (o *ECSZone) GetFqdnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fqdn, true
}

// SetFqdn sets field value
func (o *ECSZone) SetFqdn(v string) {
	o.Fqdn = v
}

// GetProtocolFqdn returns the ProtocolFqdn field value if set, zero value otherwise.
func (o *ECSZone) GetProtocolFqdn() string {
	if o == nil || IsNil(o.ProtocolFqdn) {
		var ret string
		return ret
	}
	return *o.ProtocolFqdn
}

// GetProtocolFqdnOk returns a tuple with the ProtocolFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECSZone) GetProtocolFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.ProtocolFqdn) {
		return nil, false
	}
	return o.ProtocolFqdn, true
}

// HasProtocolFqdn returns a boolean if a field has been set.
func (o *ECSZone) HasProtocolFqdn() bool {
	if o != nil && !IsNil(o.ProtocolFqdn) {
		return true
	}

	return false
}

// SetProtocolFqdn gets a reference to the given string and assigns it to the ProtocolFqdn field.
func (o *ECSZone) SetProtocolFqdn(v string) {
	o.ProtocolFqdn = &v
}

func (o ECSZone) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ECSZone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access"] = o.Access
	toSerialize["fqdn"] = o.Fqdn
	if !IsNil(o.ProtocolFqdn) {
		toSerialize["protocol_fqdn"] = o.ProtocolFqdn
	}
	return toSerialize, nil
}

func (o *ECSZone) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access",
		"fqdn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varECSZone := _ECSZone{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varECSZone)

	if err != nil {
		return err
	}

	*o = ECSZone(varECSZone)

	return err
}

type NullableECSZone struct {
	value *ECSZone
	isSet bool
}

func (v NullableECSZone) Get() *ECSZone {
	return v.value
}

func (v *NullableECSZone) Set(val *ECSZone) {
	v.value = val
	v.isSet = true
}

func (v NullableECSZone) IsSet() bool {
	return v.isSet
}

func (v *NullableECSZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableECSZone(val *ECSZone) *NullableECSZone {
	return &NullableECSZone{value: val, isSet: true}
}

func (v NullableECSZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableECSZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
