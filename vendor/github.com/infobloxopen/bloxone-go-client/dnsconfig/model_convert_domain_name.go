/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsconfig

import (
	"encoding/json"
)

// checks if the ConvertDomainName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConvertDomainName{}

// ConvertDomainName Used to convert between Internationalized Domain Name (IDN) and ASCII domain name (Punycode).
type ConvertDomainName struct {
	// IDN domain name representation.
	Idn *string `json:"idn,omitempty"`
	// punycode domain name representation.
	Punycode             *string `json:"punycode,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConvertDomainName ConvertDomainName

// NewConvertDomainName instantiates a new ConvertDomainName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConvertDomainName() *ConvertDomainName {
	this := ConvertDomainName{}
	return &this
}

// NewConvertDomainNameWithDefaults instantiates a new ConvertDomainName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConvertDomainNameWithDefaults() *ConvertDomainName {
	this := ConvertDomainName{}
	return &this
}

// GetIdn returns the Idn field value if set, zero value otherwise.
func (o *ConvertDomainName) GetIdn() string {
	if o == nil || IsNil(o.Idn) {
		var ret string
		return ret
	}
	return *o.Idn
}

// GetIdnOk returns a tuple with the Idn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvertDomainName) GetIdnOk() (*string, bool) {
	if o == nil || IsNil(o.Idn) {
		return nil, false
	}
	return o.Idn, true
}

// HasIdn returns a boolean if a field has been set.
func (o *ConvertDomainName) HasIdn() bool {
	if o != nil && !IsNil(o.Idn) {
		return true
	}

	return false
}

// SetIdn gets a reference to the given string and assigns it to the Idn field.
func (o *ConvertDomainName) SetIdn(v string) {
	o.Idn = &v
}

// GetPunycode returns the Punycode field value if set, zero value otherwise.
func (o *ConvertDomainName) GetPunycode() string {
	if o == nil || IsNil(o.Punycode) {
		var ret string
		return ret
	}
	return *o.Punycode
}

// GetPunycodeOk returns a tuple with the Punycode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvertDomainName) GetPunycodeOk() (*string, bool) {
	if o == nil || IsNil(o.Punycode) {
		return nil, false
	}
	return o.Punycode, true
}

// HasPunycode returns a boolean if a field has been set.
func (o *ConvertDomainName) HasPunycode() bool {
	if o != nil && !IsNil(o.Punycode) {
		return true
	}

	return false
}

// SetPunycode gets a reference to the given string and assigns it to the Punycode field.
func (o *ConvertDomainName) SetPunycode(v string) {
	o.Punycode = &v
}

func (o ConvertDomainName) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConvertDomainName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Idn) {
		toSerialize["idn"] = o.Idn
	}
	if !IsNil(o.Punycode) {
		toSerialize["punycode"] = o.Punycode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConvertDomainName) UnmarshalJSON(data []byte) (err error) {
	varConvertDomainName := _ConvertDomainName{}

	err = json.Unmarshal(data, &varConvertDomainName)

	if err != nil {
		return err
	}

	*o = ConvertDomainName(varConvertDomainName)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "idn")
		delete(additionalProperties, "punycode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConvertDomainName struct {
	value *ConvertDomainName
	isSet bool
}

func (v NullableConvertDomainName) Get() *ConvertDomainName {
	return v.value
}

func (v *NullableConvertDomainName) Set(val *ConvertDomainName) {
	v.value = val
	v.isSet = true
}

func (v NullableConvertDomainName) IsSet() bool {
	return v.isSet
}

func (v *NullableConvertDomainName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConvertDomainName(val *ConvertDomainName) *NullableConvertDomainName {
	return &NullableConvertDomainName{value: val, isSet: true}
}

func (v NullableConvertDomainName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConvertDomainName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
