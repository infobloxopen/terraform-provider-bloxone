/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsconfig

import (
	"encoding/json"
	"fmt"
)

// checks if the AuthNSG type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthNSG{}

// AuthNSG Authoritative DNS Server Group for authoritative zones.
type AuthNSG struct {
	// Optional. Comment for the object.
	Comment *string `json:"comment,omitempty"`
	// Optional. DNS primaries external to BloxOne DDI. Order is not significant.
	ExternalPrimaries []ExternalPrimary `json:"external_primaries,omitempty"`
	// DNS secondaries external to BloxOne DDI. Order is not significant.
	ExternalSecondaries []ExternalSecondary `json:"external_secondaries,omitempty"`
	// The resource identifier.
	Id *string `json:"id,omitempty"`
	// Optional. BloxOne DDI hosts acting as internal secondaries. Order is not significant.
	InternalSecondaries []InternalSecondary `json:"internal_secondaries,omitempty"`
	// Name of the object.
	Name string `json:"name"`
	// The resource identifier.
	Nsgs []string `json:"nsgs,omitempty"`
	// Tagging specifics.
	Tags                 map[string]interface{} `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuthNSG AuthNSG

// NewAuthNSG instantiates a new AuthNSG object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthNSG(name string) *AuthNSG {
	this := AuthNSG{}
	this.Name = name
	return &this
}

// NewAuthNSGWithDefaults instantiates a new AuthNSG object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthNSGWithDefaults() *AuthNSG {
	this := AuthNSG{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *AuthNSG) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthNSG) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *AuthNSG) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *AuthNSG) SetComment(v string) {
	o.Comment = &v
}

// GetExternalPrimaries returns the ExternalPrimaries field value if set, zero value otherwise.
func (o *AuthNSG) GetExternalPrimaries() []ExternalPrimary {
	if o == nil || IsNil(o.ExternalPrimaries) {
		var ret []ExternalPrimary
		return ret
	}
	return o.ExternalPrimaries
}

// GetExternalPrimariesOk returns a tuple with the ExternalPrimaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthNSG) GetExternalPrimariesOk() ([]ExternalPrimary, bool) {
	if o == nil || IsNil(o.ExternalPrimaries) {
		return nil, false
	}
	return o.ExternalPrimaries, true
}

// HasExternalPrimaries returns a boolean if a field has been set.
func (o *AuthNSG) HasExternalPrimaries() bool {
	if o != nil && !IsNil(o.ExternalPrimaries) {
		return true
	}

	return false
}

// SetExternalPrimaries gets a reference to the given []ExternalPrimary and assigns it to the ExternalPrimaries field.
func (o *AuthNSG) SetExternalPrimaries(v []ExternalPrimary) {
	o.ExternalPrimaries = v
}

// GetExternalSecondaries returns the ExternalSecondaries field value if set, zero value otherwise.
func (o *AuthNSG) GetExternalSecondaries() []ExternalSecondary {
	if o == nil || IsNil(o.ExternalSecondaries) {
		var ret []ExternalSecondary
		return ret
	}
	return o.ExternalSecondaries
}

// GetExternalSecondariesOk returns a tuple with the ExternalSecondaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthNSG) GetExternalSecondariesOk() ([]ExternalSecondary, bool) {
	if o == nil || IsNil(o.ExternalSecondaries) {
		return nil, false
	}
	return o.ExternalSecondaries, true
}

// HasExternalSecondaries returns a boolean if a field has been set.
func (o *AuthNSG) HasExternalSecondaries() bool {
	if o != nil && !IsNil(o.ExternalSecondaries) {
		return true
	}

	return false
}

// SetExternalSecondaries gets a reference to the given []ExternalSecondary and assigns it to the ExternalSecondaries field.
func (o *AuthNSG) SetExternalSecondaries(v []ExternalSecondary) {
	o.ExternalSecondaries = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuthNSG) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthNSG) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuthNSG) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AuthNSG) SetId(v string) {
	o.Id = &v
}

// GetInternalSecondaries returns the InternalSecondaries field value if set, zero value otherwise.
func (o *AuthNSG) GetInternalSecondaries() []InternalSecondary {
	if o == nil || IsNil(o.InternalSecondaries) {
		var ret []InternalSecondary
		return ret
	}
	return o.InternalSecondaries
}

// GetInternalSecondariesOk returns a tuple with the InternalSecondaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthNSG) GetInternalSecondariesOk() ([]InternalSecondary, bool) {
	if o == nil || IsNil(o.InternalSecondaries) {
		return nil, false
	}
	return o.InternalSecondaries, true
}

// HasInternalSecondaries returns a boolean if a field has been set.
func (o *AuthNSG) HasInternalSecondaries() bool {
	if o != nil && !IsNil(o.InternalSecondaries) {
		return true
	}

	return false
}

// SetInternalSecondaries gets a reference to the given []InternalSecondary and assigns it to the InternalSecondaries field.
func (o *AuthNSG) SetInternalSecondaries(v []InternalSecondary) {
	o.InternalSecondaries = v
}

// GetName returns the Name field value
func (o *AuthNSG) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AuthNSG) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AuthNSG) SetName(v string) {
	o.Name = v
}

// GetNsgs returns the Nsgs field value if set, zero value otherwise.
func (o *AuthNSG) GetNsgs() []string {
	if o == nil || IsNil(o.Nsgs) {
		var ret []string
		return ret
	}
	return o.Nsgs
}

// GetNsgsOk returns a tuple with the Nsgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthNSG) GetNsgsOk() ([]string, bool) {
	if o == nil || IsNil(o.Nsgs) {
		return nil, false
	}
	return o.Nsgs, true
}

// HasNsgs returns a boolean if a field has been set.
func (o *AuthNSG) HasNsgs() bool {
	if o != nil && !IsNil(o.Nsgs) {
		return true
	}

	return false
}

// SetNsgs gets a reference to the given []string and assigns it to the Nsgs field.
func (o *AuthNSG) SetNsgs(v []string) {
	o.Nsgs = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *AuthNSG) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthNSG) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *AuthNSG) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *AuthNSG) SetTags(v map[string]interface{}) {
	o.Tags = v
}

func (o AuthNSG) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthNSG) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.ExternalPrimaries) {
		toSerialize["external_primaries"] = o.ExternalPrimaries
	}
	if !IsNil(o.ExternalSecondaries) {
		toSerialize["external_secondaries"] = o.ExternalSecondaries
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InternalSecondaries) {
		toSerialize["internal_secondaries"] = o.InternalSecondaries
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Nsgs) {
		toSerialize["nsgs"] = o.Nsgs
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuthNSG) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthNSG := _AuthNSG{}

	err = json.Unmarshal(data, &varAuthNSG)

	if err != nil {
		return err
	}

	*o = AuthNSG(varAuthNSG)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "comment")
		delete(additionalProperties, "external_primaries")
		delete(additionalProperties, "external_secondaries")
		delete(additionalProperties, "id")
		delete(additionalProperties, "internal_secondaries")
		delete(additionalProperties, "name")
		delete(additionalProperties, "nsgs")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthNSG struct {
	value *AuthNSG
	isSet bool
}

func (v NullableAuthNSG) Get() *AuthNSG {
	return v.value
}

func (v *NullableAuthNSG) Set(val *AuthNSG) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthNSG) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthNSG) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthNSG(val *AuthNSG) *NullableAuthNSG {
	return &NullableAuthNSG{value: val, isSet: true}
}

func (v NullableAuthNSG) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthNSG) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
