/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsconfig

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TrustAnchor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrustAnchor{}

// TrustAnchor DNSSEC trust anchor.
type TrustAnchor struct {
	Algorithm int64 `json:"algorithm"`
	// Zone FQDN in punycode.
	ProtocolZone *string `json:"protocol_zone,omitempty"`
	// DNSSEC key data. Non-empty, valid base64 string.
	PublicKey string `json:"public_key"`
	// Optional. Secure Entry Point flag.  Defaults to _true_.
	Sep *bool `json:"sep,omitempty"`
	// Zone FQDN.
	Zone string `json:"zone"`
}

type _TrustAnchor TrustAnchor

// NewTrustAnchor instantiates a new TrustAnchor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrustAnchor(algorithm int64, publicKey string, zone string) *TrustAnchor {
	this := TrustAnchor{}
	this.Algorithm = algorithm
	this.PublicKey = publicKey
	this.Zone = zone
	return &this
}

// NewTrustAnchorWithDefaults instantiates a new TrustAnchor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrustAnchorWithDefaults() *TrustAnchor {
	this := TrustAnchor{}
	return &this
}

// GetAlgorithm returns the Algorithm field value
func (o *TrustAnchor) GetAlgorithm() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value
// and a boolean to check if the value has been set.
func (o *TrustAnchor) GetAlgorithmOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Algorithm, true
}

// SetAlgorithm sets field value
func (o *TrustAnchor) SetAlgorithm(v int64) {
	o.Algorithm = v
}

// GetProtocolZone returns the ProtocolZone field value if set, zero value otherwise.
func (o *TrustAnchor) GetProtocolZone() string {
	if o == nil || IsNil(o.ProtocolZone) {
		var ret string
		return ret
	}
	return *o.ProtocolZone
}

// GetProtocolZoneOk returns a tuple with the ProtocolZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustAnchor) GetProtocolZoneOk() (*string, bool) {
	if o == nil || IsNil(o.ProtocolZone) {
		return nil, false
	}
	return o.ProtocolZone, true
}

// HasProtocolZone returns a boolean if a field has been set.
func (o *TrustAnchor) HasProtocolZone() bool {
	if o != nil && !IsNil(o.ProtocolZone) {
		return true
	}

	return false
}

// SetProtocolZone gets a reference to the given string and assigns it to the ProtocolZone field.
func (o *TrustAnchor) SetProtocolZone(v string) {
	o.ProtocolZone = &v
}

// GetPublicKey returns the PublicKey field value
func (o *TrustAnchor) GetPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *TrustAnchor) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *TrustAnchor) SetPublicKey(v string) {
	o.PublicKey = v
}

// GetSep returns the Sep field value if set, zero value otherwise.
func (o *TrustAnchor) GetSep() bool {
	if o == nil || IsNil(o.Sep) {
		var ret bool
		return ret
	}
	return *o.Sep
}

// GetSepOk returns a tuple with the Sep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustAnchor) GetSepOk() (*bool, bool) {
	if o == nil || IsNil(o.Sep) {
		return nil, false
	}
	return o.Sep, true
}

// HasSep returns a boolean if a field has been set.
func (o *TrustAnchor) HasSep() bool {
	if o != nil && !IsNil(o.Sep) {
		return true
	}

	return false
}

// SetSep gets a reference to the given bool and assigns it to the Sep field.
func (o *TrustAnchor) SetSep(v bool) {
	o.Sep = &v
}

// GetZone returns the Zone field value
func (o *TrustAnchor) GetZone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Zone
}

// GetZoneOk returns a tuple with the Zone field value
// and a boolean to check if the value has been set.
func (o *TrustAnchor) GetZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Zone, true
}

// SetZone sets field value
func (o *TrustAnchor) SetZone(v string) {
	o.Zone = v
}

func (o TrustAnchor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrustAnchor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["algorithm"] = o.Algorithm
	if !IsNil(o.ProtocolZone) {
		toSerialize["protocol_zone"] = o.ProtocolZone
	}
	toSerialize["public_key"] = o.PublicKey
	if !IsNil(o.Sep) {
		toSerialize["sep"] = o.Sep
	}
	toSerialize["zone"] = o.Zone
	return toSerialize, nil
}

func (o *TrustAnchor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"algorithm",
		"public_key",
		"zone",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrustAnchor := _TrustAnchor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrustAnchor)

	if err != nil {
		return err
	}

	*o = TrustAnchor(varTrustAnchor)

	return err
}

type NullableTrustAnchor struct {
	value *TrustAnchor
	isSet bool
}

func (v NullableTrustAnchor) Get() *TrustAnchor {
	return v.value
}

func (v *NullableTrustAnchor) Set(val *TrustAnchor) {
	v.value = val
	v.isSet = true
}

func (v NullableTrustAnchor) IsSet() bool {
	return v.isSet
}

func (v *NullableTrustAnchor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrustAnchor(val *TrustAnchor) *NullableTrustAnchor {
	return &NullableTrustAnchor{value: val, isSet: true}
}

func (v NullableTrustAnchor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrustAnchor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
