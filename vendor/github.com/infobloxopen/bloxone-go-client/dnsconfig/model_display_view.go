/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsconfig

import (
	"encoding/json"
)

// checks if the DisplayView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisplayView{}

// DisplayView Structure containing minimal information regarding the view to be present to the UI.
type DisplayView struct {
	// DNS view description.
	Comment *string `json:"comment,omitempty"`
	// DNS view name.
	Name *string `json:"name,omitempty"`
	// The resource identifier.
	View *string `json:"view,omitempty"`
}

// NewDisplayView instantiates a new DisplayView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisplayView() *DisplayView {
	this := DisplayView{}
	return &this
}

// NewDisplayViewWithDefaults instantiates a new DisplayView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisplayViewWithDefaults() *DisplayView {
	this := DisplayView{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DisplayView) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisplayView) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DisplayView) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DisplayView) SetComment(v string) {
	o.Comment = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DisplayView) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisplayView) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DisplayView) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DisplayView) SetName(v string) {
	o.Name = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *DisplayView) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisplayView) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *DisplayView) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *DisplayView) SetView(v string) {
	o.View = &v
}

func (o DisplayView) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisplayView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	return toSerialize, nil
}

type NullableDisplayView struct {
	value *DisplayView
	isSet bool
}

func (v NullableDisplayView) Get() *DisplayView {
	return v.value
}

func (v *NullableDisplayView) Set(val *DisplayView) {
	v.value = val
	v.isSet = true
}

func (v NullableDisplayView) IsSet() bool {
	return v.isSet
}

func (v *NullableDisplayView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisplayView(val *DisplayView) *NullableDisplayView {
	return &NullableDisplayView{value: val, isSet: true}
}

func (v NullableDisplayView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisplayView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
