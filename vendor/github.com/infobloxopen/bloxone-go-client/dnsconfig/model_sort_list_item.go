/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsconfig

import (
	"encoding/json"
	"fmt"
)

// checks if the SortListItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SortListItem{}

// SortListItem Element in a SortList.
type SortListItem struct {
	// The resource identifier.
	Acl *string `json:"acl,omitempty"`
	// Type of element.  Allowed values:  * _any_,  * _ip_,  * _acl_,
	Element string `json:"element"`
	// Optional. The prioritized networks. If empty, the value of _source_ or networks from _acl_ is used.
	PrioritizedNetworks []string `json:"prioritized_networks,omitempty"`
	// Must be empty if _element_ is not _ip_.
	Source               *string `json:"source,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SortListItem SortListItem

// NewSortListItem instantiates a new SortListItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSortListItem(element string) *SortListItem {
	this := SortListItem{}
	this.Element = element
	return &this
}

// NewSortListItemWithDefaults instantiates a new SortListItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSortListItemWithDefaults() *SortListItem {
	this := SortListItem{}
	return &this
}

// GetAcl returns the Acl field value if set, zero value otherwise.
func (o *SortListItem) GetAcl() string {
	if o == nil || IsNil(o.Acl) {
		var ret string
		return ret
	}
	return *o.Acl
}

// GetAclOk returns a tuple with the Acl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SortListItem) GetAclOk() (*string, bool) {
	if o == nil || IsNil(o.Acl) {
		return nil, false
	}
	return o.Acl, true
}

// HasAcl returns a boolean if a field has been set.
func (o *SortListItem) HasAcl() bool {
	if o != nil && !IsNil(o.Acl) {
		return true
	}

	return false
}

// SetAcl gets a reference to the given string and assigns it to the Acl field.
func (o *SortListItem) SetAcl(v string) {
	o.Acl = &v
}

// GetElement returns the Element field value
func (o *SortListItem) GetElement() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Element
}

// GetElementOk returns a tuple with the Element field value
// and a boolean to check if the value has been set.
func (o *SortListItem) GetElementOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Element, true
}

// SetElement sets field value
func (o *SortListItem) SetElement(v string) {
	o.Element = v
}

// GetPrioritizedNetworks returns the PrioritizedNetworks field value if set, zero value otherwise.
func (o *SortListItem) GetPrioritizedNetworks() []string {
	if o == nil || IsNil(o.PrioritizedNetworks) {
		var ret []string
		return ret
	}
	return o.PrioritizedNetworks
}

// GetPrioritizedNetworksOk returns a tuple with the PrioritizedNetworks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SortListItem) GetPrioritizedNetworksOk() ([]string, bool) {
	if o == nil || IsNil(o.PrioritizedNetworks) {
		return nil, false
	}
	return o.PrioritizedNetworks, true
}

// HasPrioritizedNetworks returns a boolean if a field has been set.
func (o *SortListItem) HasPrioritizedNetworks() bool {
	if o != nil && !IsNil(o.PrioritizedNetworks) {
		return true
	}

	return false
}

// SetPrioritizedNetworks gets a reference to the given []string and assigns it to the PrioritizedNetworks field.
func (o *SortListItem) SetPrioritizedNetworks(v []string) {
	o.PrioritizedNetworks = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *SortListItem) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SortListItem) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *SortListItem) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *SortListItem) SetSource(v string) {
	o.Source = &v
}

func (o SortListItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SortListItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Acl) {
		toSerialize["acl"] = o.Acl
	}
	toSerialize["element"] = o.Element
	if !IsNil(o.PrioritizedNetworks) {
		toSerialize["prioritized_networks"] = o.PrioritizedNetworks
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SortListItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"element",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSortListItem := _SortListItem{}

	err = json.Unmarshal(data, &varSortListItem)

	if err != nil {
		return err
	}

	*o = SortListItem(varSortListItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "acl")
		delete(additionalProperties, "element")
		delete(additionalProperties, "prioritized_networks")
		delete(additionalProperties, "source")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSortListItem struct {
	value *SortListItem
	isSet bool
}

func (v NullableSortListItem) Get() *SortListItem {
	return v.value
}

func (v *NullableSortListItem) Set(val *SortListItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSortListItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSortListItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSortListItem(val *SortListItem) *NullableSortListItem {
	return &NullableSortListItem{value: val, isSet: true}
}

func (v NullableSortListItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSortListItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
