/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsconfig

import (
	"encoding/json"
	"fmt"
)

// checks if the BulkCopyView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BulkCopyView{}

// BulkCopyView struct for BulkCopyView
type BulkCopyView struct {
	AuthZoneConfig    *AuthZoneConfig    `json:"auth_zone_config,omitempty"`
	ForwardZoneConfig *ForwardZoneConfig `json:"forward_zone_config,omitempty"`
	// Indicates whether child objects should be copied or not.  Defaults to _false_. Reserved for future use.
	Recursive *bool `json:"recursive,omitempty"`
	// The resource identifier.
	Resources           []string        `json:"resources"`
	SecondaryZoneConfig *AuthZoneConfig `json:"secondary_zone_config,omitempty"`
	// Indicates whether copying should skip object in case of error and continue with next, or abort copying in case of error.  Defaults to _false_.
	SkipOnError *bool `json:"skip_on_error,omitempty"`
	// The resource identifier.
	Target               string `json:"target"`
	AdditionalProperties map[string]interface{}
}

type _BulkCopyView BulkCopyView

// NewBulkCopyView instantiates a new BulkCopyView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBulkCopyView(resources []string, target string) *BulkCopyView {
	this := BulkCopyView{}
	this.Resources = resources
	this.Target = target
	return &this
}

// NewBulkCopyViewWithDefaults instantiates a new BulkCopyView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBulkCopyViewWithDefaults() *BulkCopyView {
	this := BulkCopyView{}
	return &this
}

// GetAuthZoneConfig returns the AuthZoneConfig field value if set, zero value otherwise.
func (o *BulkCopyView) GetAuthZoneConfig() AuthZoneConfig {
	if o == nil || IsNil(o.AuthZoneConfig) {
		var ret AuthZoneConfig
		return ret
	}
	return *o.AuthZoneConfig
}

// GetAuthZoneConfigOk returns a tuple with the AuthZoneConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkCopyView) GetAuthZoneConfigOk() (*AuthZoneConfig, bool) {
	if o == nil || IsNil(o.AuthZoneConfig) {
		return nil, false
	}
	return o.AuthZoneConfig, true
}

// HasAuthZoneConfig returns a boolean if a field has been set.
func (o *BulkCopyView) HasAuthZoneConfig() bool {
	if o != nil && !IsNil(o.AuthZoneConfig) {
		return true
	}

	return false
}

// SetAuthZoneConfig gets a reference to the given AuthZoneConfig and assigns it to the AuthZoneConfig field.
func (o *BulkCopyView) SetAuthZoneConfig(v AuthZoneConfig) {
	o.AuthZoneConfig = &v
}

// GetForwardZoneConfig returns the ForwardZoneConfig field value if set, zero value otherwise.
func (o *BulkCopyView) GetForwardZoneConfig() ForwardZoneConfig {
	if o == nil || IsNil(o.ForwardZoneConfig) {
		var ret ForwardZoneConfig
		return ret
	}
	return *o.ForwardZoneConfig
}

// GetForwardZoneConfigOk returns a tuple with the ForwardZoneConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkCopyView) GetForwardZoneConfigOk() (*ForwardZoneConfig, bool) {
	if o == nil || IsNil(o.ForwardZoneConfig) {
		return nil, false
	}
	return o.ForwardZoneConfig, true
}

// HasForwardZoneConfig returns a boolean if a field has been set.
func (o *BulkCopyView) HasForwardZoneConfig() bool {
	if o != nil && !IsNil(o.ForwardZoneConfig) {
		return true
	}

	return false
}

// SetForwardZoneConfig gets a reference to the given ForwardZoneConfig and assigns it to the ForwardZoneConfig field.
func (o *BulkCopyView) SetForwardZoneConfig(v ForwardZoneConfig) {
	o.ForwardZoneConfig = &v
}

// GetRecursive returns the Recursive field value if set, zero value otherwise.
func (o *BulkCopyView) GetRecursive() bool {
	if o == nil || IsNil(o.Recursive) {
		var ret bool
		return ret
	}
	return *o.Recursive
}

// GetRecursiveOk returns a tuple with the Recursive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkCopyView) GetRecursiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Recursive) {
		return nil, false
	}
	return o.Recursive, true
}

// HasRecursive returns a boolean if a field has been set.
func (o *BulkCopyView) HasRecursive() bool {
	if o != nil && !IsNil(o.Recursive) {
		return true
	}

	return false
}

// SetRecursive gets a reference to the given bool and assigns it to the Recursive field.
func (o *BulkCopyView) SetRecursive(v bool) {
	o.Recursive = &v
}

// GetResources returns the Resources field value
func (o *BulkCopyView) GetResources() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value
// and a boolean to check if the value has been set.
func (o *BulkCopyView) GetResourcesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resources, true
}

// SetResources sets field value
func (o *BulkCopyView) SetResources(v []string) {
	o.Resources = v
}

// GetSecondaryZoneConfig returns the SecondaryZoneConfig field value if set, zero value otherwise.
func (o *BulkCopyView) GetSecondaryZoneConfig() AuthZoneConfig {
	if o == nil || IsNil(o.SecondaryZoneConfig) {
		var ret AuthZoneConfig
		return ret
	}
	return *o.SecondaryZoneConfig
}

// GetSecondaryZoneConfigOk returns a tuple with the SecondaryZoneConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkCopyView) GetSecondaryZoneConfigOk() (*AuthZoneConfig, bool) {
	if o == nil || IsNil(o.SecondaryZoneConfig) {
		return nil, false
	}
	return o.SecondaryZoneConfig, true
}

// HasSecondaryZoneConfig returns a boolean if a field has been set.
func (o *BulkCopyView) HasSecondaryZoneConfig() bool {
	if o != nil && !IsNil(o.SecondaryZoneConfig) {
		return true
	}

	return false
}

// SetSecondaryZoneConfig gets a reference to the given AuthZoneConfig and assigns it to the SecondaryZoneConfig field.
func (o *BulkCopyView) SetSecondaryZoneConfig(v AuthZoneConfig) {
	o.SecondaryZoneConfig = &v
}

// GetSkipOnError returns the SkipOnError field value if set, zero value otherwise.
func (o *BulkCopyView) GetSkipOnError() bool {
	if o == nil || IsNil(o.SkipOnError) {
		var ret bool
		return ret
	}
	return *o.SkipOnError
}

// GetSkipOnErrorOk returns a tuple with the SkipOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkCopyView) GetSkipOnErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipOnError) {
		return nil, false
	}
	return o.SkipOnError, true
}

// HasSkipOnError returns a boolean if a field has been set.
func (o *BulkCopyView) HasSkipOnError() bool {
	if o != nil && !IsNil(o.SkipOnError) {
		return true
	}

	return false
}

// SetSkipOnError gets a reference to the given bool and assigns it to the SkipOnError field.
func (o *BulkCopyView) SetSkipOnError(v bool) {
	o.SkipOnError = &v
}

// GetTarget returns the Target field value
func (o *BulkCopyView) GetTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *BulkCopyView) GetTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *BulkCopyView) SetTarget(v string) {
	o.Target = v
}

func (o BulkCopyView) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BulkCopyView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthZoneConfig) {
		toSerialize["auth_zone_config"] = o.AuthZoneConfig
	}
	if !IsNil(o.ForwardZoneConfig) {
		toSerialize["forward_zone_config"] = o.ForwardZoneConfig
	}
	if !IsNil(o.Recursive) {
		toSerialize["recursive"] = o.Recursive
	}
	toSerialize["resources"] = o.Resources
	if !IsNil(o.SecondaryZoneConfig) {
		toSerialize["secondary_zone_config"] = o.SecondaryZoneConfig
	}
	if !IsNil(o.SkipOnError) {
		toSerialize["skip_on_error"] = o.SkipOnError
	}
	toSerialize["target"] = o.Target

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BulkCopyView) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resources",
		"target",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBulkCopyView := _BulkCopyView{}

	err = json.Unmarshal(data, &varBulkCopyView)

	if err != nil {
		return err
	}

	*o = BulkCopyView(varBulkCopyView)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "auth_zone_config")
		delete(additionalProperties, "forward_zone_config")
		delete(additionalProperties, "recursive")
		delete(additionalProperties, "resources")
		delete(additionalProperties, "secondary_zone_config")
		delete(additionalProperties, "skip_on_error")
		delete(additionalProperties, "target")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBulkCopyView struct {
	value *BulkCopyView
	isSet bool
}

func (v NullableBulkCopyView) Get() *BulkCopyView {
	return v.value
}

func (v *NullableBulkCopyView) Set(val *BulkCopyView) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkCopyView) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkCopyView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkCopyView(val *BulkCopyView) *NullableBulkCopyView {
	return &NullableBulkCopyView{value: val, isSet: true}
}

func (v NullableBulkCopyView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkCopyView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
