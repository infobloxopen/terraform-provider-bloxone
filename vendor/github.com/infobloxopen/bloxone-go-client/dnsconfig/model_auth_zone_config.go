/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsconfig

import (
	"encoding/json"
)

// checks if the AuthZoneConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthZoneConfig{}

// AuthZoneConfig struct for AuthZoneConfig
type AuthZoneConfig struct {
	// Optional. DNS primaries external to BloxOne DDI. Order is not significant.
	ExternalPrimaries []ExternalPrimary `json:"external_primaries,omitempty"`
	// DNS secondaries external to BloxOne DDI. Order is not significant.
	ExternalSecondaries []ExternalSecondary `json:"external_secondaries,omitempty"`
	// Optional. BloxOne DDI hosts acting as internal secondaries. Order is not significant.
	InternalSecondaries []InternalSecondary `json:"internal_secondaries,omitempty"`
	// The resource identifier.
	Nsgs                 []string `json:"nsgs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuthZoneConfig AuthZoneConfig

// NewAuthZoneConfig instantiates a new AuthZoneConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthZoneConfig() *AuthZoneConfig {
	this := AuthZoneConfig{}
	return &this
}

// NewAuthZoneConfigWithDefaults instantiates a new AuthZoneConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthZoneConfigWithDefaults() *AuthZoneConfig {
	this := AuthZoneConfig{}
	return &this
}

// GetExternalPrimaries returns the ExternalPrimaries field value if set, zero value otherwise.
func (o *AuthZoneConfig) GetExternalPrimaries() []ExternalPrimary {
	if o == nil || IsNil(o.ExternalPrimaries) {
		var ret []ExternalPrimary
		return ret
	}
	return o.ExternalPrimaries
}

// GetExternalPrimariesOk returns a tuple with the ExternalPrimaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthZoneConfig) GetExternalPrimariesOk() ([]ExternalPrimary, bool) {
	if o == nil || IsNil(o.ExternalPrimaries) {
		return nil, false
	}
	return o.ExternalPrimaries, true
}

// HasExternalPrimaries returns a boolean if a field has been set.
func (o *AuthZoneConfig) HasExternalPrimaries() bool {
	if o != nil && !IsNil(o.ExternalPrimaries) {
		return true
	}

	return false
}

// SetExternalPrimaries gets a reference to the given []ExternalPrimary and assigns it to the ExternalPrimaries field.
func (o *AuthZoneConfig) SetExternalPrimaries(v []ExternalPrimary) {
	o.ExternalPrimaries = v
}

// GetExternalSecondaries returns the ExternalSecondaries field value if set, zero value otherwise.
func (o *AuthZoneConfig) GetExternalSecondaries() []ExternalSecondary {
	if o == nil || IsNil(o.ExternalSecondaries) {
		var ret []ExternalSecondary
		return ret
	}
	return o.ExternalSecondaries
}

// GetExternalSecondariesOk returns a tuple with the ExternalSecondaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthZoneConfig) GetExternalSecondariesOk() ([]ExternalSecondary, bool) {
	if o == nil || IsNil(o.ExternalSecondaries) {
		return nil, false
	}
	return o.ExternalSecondaries, true
}

// HasExternalSecondaries returns a boolean if a field has been set.
func (o *AuthZoneConfig) HasExternalSecondaries() bool {
	if o != nil && !IsNil(o.ExternalSecondaries) {
		return true
	}

	return false
}

// SetExternalSecondaries gets a reference to the given []ExternalSecondary and assigns it to the ExternalSecondaries field.
func (o *AuthZoneConfig) SetExternalSecondaries(v []ExternalSecondary) {
	o.ExternalSecondaries = v
}

// GetInternalSecondaries returns the InternalSecondaries field value if set, zero value otherwise.
func (o *AuthZoneConfig) GetInternalSecondaries() []InternalSecondary {
	if o == nil || IsNil(o.InternalSecondaries) {
		var ret []InternalSecondary
		return ret
	}
	return o.InternalSecondaries
}

// GetInternalSecondariesOk returns a tuple with the InternalSecondaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthZoneConfig) GetInternalSecondariesOk() ([]InternalSecondary, bool) {
	if o == nil || IsNil(o.InternalSecondaries) {
		return nil, false
	}
	return o.InternalSecondaries, true
}

// HasInternalSecondaries returns a boolean if a field has been set.
func (o *AuthZoneConfig) HasInternalSecondaries() bool {
	if o != nil && !IsNil(o.InternalSecondaries) {
		return true
	}

	return false
}

// SetInternalSecondaries gets a reference to the given []InternalSecondary and assigns it to the InternalSecondaries field.
func (o *AuthZoneConfig) SetInternalSecondaries(v []InternalSecondary) {
	o.InternalSecondaries = v
}

// GetNsgs returns the Nsgs field value if set, zero value otherwise.
func (o *AuthZoneConfig) GetNsgs() []string {
	if o == nil || IsNil(o.Nsgs) {
		var ret []string
		return ret
	}
	return o.Nsgs
}

// GetNsgsOk returns a tuple with the Nsgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthZoneConfig) GetNsgsOk() ([]string, bool) {
	if o == nil || IsNil(o.Nsgs) {
		return nil, false
	}
	return o.Nsgs, true
}

// HasNsgs returns a boolean if a field has been set.
func (o *AuthZoneConfig) HasNsgs() bool {
	if o != nil && !IsNil(o.Nsgs) {
		return true
	}

	return false
}

// SetNsgs gets a reference to the given []string and assigns it to the Nsgs field.
func (o *AuthZoneConfig) SetNsgs(v []string) {
	o.Nsgs = v
}

func (o AuthZoneConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthZoneConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExternalPrimaries) {
		toSerialize["external_primaries"] = o.ExternalPrimaries
	}
	if !IsNil(o.ExternalSecondaries) {
		toSerialize["external_secondaries"] = o.ExternalSecondaries
	}
	if !IsNil(o.InternalSecondaries) {
		toSerialize["internal_secondaries"] = o.InternalSecondaries
	}
	if !IsNil(o.Nsgs) {
		toSerialize["nsgs"] = o.Nsgs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuthZoneConfig) UnmarshalJSON(data []byte) (err error) {
	varAuthZoneConfig := _AuthZoneConfig{}

	err = json.Unmarshal(data, &varAuthZoneConfig)

	if err != nil {
		return err
	}

	*o = AuthZoneConfig(varAuthZoneConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "external_primaries")
		delete(additionalProperties, "external_secondaries")
		delete(additionalProperties, "internal_secondaries")
		delete(additionalProperties, "nsgs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthZoneConfig struct {
	value *AuthZoneConfig
	isSet bool
}

func (v NullableAuthZoneConfig) Get() *AuthZoneConfig {
	return v.value
}

func (v *NullableAuthZoneConfig) Set(val *AuthZoneConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthZoneConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthZoneConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthZoneConfig(val *AuthZoneConfig) *NullableAuthZoneConfig {
	return &NullableAuthZoneConfig{value: val, isSet: true}
}

func (v NullableAuthZoneConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthZoneConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
