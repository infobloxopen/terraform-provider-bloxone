/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsconfig

import (
	"encoding/json"
)

// checks if the HostInheritance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostInheritance{}

// HostInheritance Inheritance configuration specifies how and which fields _Host_ object inherits from _Global_ or _Server_ parent.
type HostInheritance struct {
	// Optional. Field config for _kerberos_keys_ field from _Host_ object.
	KerberosKeys         *InheritedKerberosKeys `json:"kerberos_keys,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HostInheritance HostInheritance

// NewHostInheritance instantiates a new HostInheritance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostInheritance() *HostInheritance {
	this := HostInheritance{}
	return &this
}

// NewHostInheritanceWithDefaults instantiates a new HostInheritance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostInheritanceWithDefaults() *HostInheritance {
	this := HostInheritance{}
	return &this
}

// GetKerberosKeys returns the KerberosKeys field value if set, zero value otherwise.
func (o *HostInheritance) GetKerberosKeys() InheritedKerberosKeys {
	if o == nil || IsNil(o.KerberosKeys) {
		var ret InheritedKerberosKeys
		return ret
	}
	return *o.KerberosKeys
}

// GetKerberosKeysOk returns a tuple with the KerberosKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostInheritance) GetKerberosKeysOk() (*InheritedKerberosKeys, bool) {
	if o == nil || IsNil(o.KerberosKeys) {
		return nil, false
	}
	return o.KerberosKeys, true
}

// HasKerberosKeys returns a boolean if a field has been set.
func (o *HostInheritance) HasKerberosKeys() bool {
	if o != nil && !IsNil(o.KerberosKeys) {
		return true
	}

	return false
}

// SetKerberosKeys gets a reference to the given InheritedKerberosKeys and assigns it to the KerberosKeys field.
func (o *HostInheritance) SetKerberosKeys(v InheritedKerberosKeys) {
	o.KerberosKeys = &v
}

func (o HostInheritance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostInheritance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KerberosKeys) {
		toSerialize["kerberos_keys"] = o.KerberosKeys
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HostInheritance) UnmarshalJSON(data []byte) (err error) {
	varHostInheritance := _HostInheritance{}

	err = json.Unmarshal(data, &varHostInheritance)

	if err != nil {
		return err
	}

	*o = HostInheritance(varHostInheritance)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "kerberos_keys")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHostInheritance struct {
	value *HostInheritance
	isSet bool
}

func (v NullableHostInheritance) Get() *HostInheritance {
	return v.value
}

func (v *NullableHostInheritance) Set(val *HostInheritance) {
	v.value = val
	v.isSet = true
}

func (v NullableHostInheritance) IsSet() bool {
	return v.isSet
}

func (v *NullableHostInheritance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostInheritance(val *HostInheritance) *NullableHostInheritance {
	return &NullableHostInheritance{value: val, isSet: true}
}

func (v NullableHostInheritance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostInheritance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
