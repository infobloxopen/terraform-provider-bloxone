/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsconfig

import (
	"encoding/json"
)

// checks if the ConvertRNameResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConvertRNameResponse{}

// ConvertRNameResponse struct for ConvertRNameResponse
type ConvertRNameResponse struct {
	// The SOA RNAME field converted from the provided email address.
	Rname *string `json:"rname,omitempty"`
}

// NewConvertRNameResponse instantiates a new ConvertRNameResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConvertRNameResponse() *ConvertRNameResponse {
	this := ConvertRNameResponse{}
	return &this
}

// NewConvertRNameResponseWithDefaults instantiates a new ConvertRNameResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConvertRNameResponseWithDefaults() *ConvertRNameResponse {
	this := ConvertRNameResponse{}
	return &this
}

// GetRname returns the Rname field value if set, zero value otherwise.
func (o *ConvertRNameResponse) GetRname() string {
	if o == nil || IsNil(o.Rname) {
		var ret string
		return ret
	}
	return *o.Rname
}

// GetRnameOk returns a tuple with the Rname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvertRNameResponse) GetRnameOk() (*string, bool) {
	if o == nil || IsNil(o.Rname) {
		return nil, false
	}
	return o.Rname, true
}

// HasRname returns a boolean if a field has been set.
func (o *ConvertRNameResponse) HasRname() bool {
	if o != nil && !IsNil(o.Rname) {
		return true
	}

	return false
}

// SetRname gets a reference to the given string and assigns it to the Rname field.
func (o *ConvertRNameResponse) SetRname(v string) {
	o.Rname = &v
}

func (o ConvertRNameResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConvertRNameResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rname) {
		toSerialize["rname"] = o.Rname
	}
	return toSerialize, nil
}

type NullableConvertRNameResponse struct {
	value *ConvertRNameResponse
	isSet bool
}

func (v NullableConvertRNameResponse) Get() *ConvertRNameResponse {
	return v.value
}

func (v *NullableConvertRNameResponse) Set(val *ConvertRNameResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConvertRNameResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConvertRNameResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConvertRNameResponse(val *ConvertRNameResponse) *NullableConvertRNameResponse {
	return &NullableConvertRNameResponse{value: val, isSet: true}
}

func (v NullableConvertRNameResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConvertRNameResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
