/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsconfig

import (
	"encoding/json"
)

// checks if the ViewInheritance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewInheritance{}

// ViewInheritance Inheritance configuration specifies how and which fields _View_ object inherits from [ _Global_, _Server_ ] parent.
type ViewInheritance struct {
	AddEdnsOptionInOutgoingQuery      *Inheritance2InheritedBool      `json:"add_edns_option_in_outgoing_query,omitempty"`
	CustomRootNsBlock                 *InheritedCustomRootNSBlock     `json:"custom_root_ns_block,omitempty"`
	DnssecValidationBlock             *InheritedDNSSECValidationBlock `json:"dnssec_validation_block,omitempty"`
	DtcConfig                         *InheritedDtcConfig             `json:"dtc_config,omitempty"`
	EcsBlock                          *InheritedECSBlock              `json:"ecs_block,omitempty"`
	EdnsUdpSize                       *Inheritance2InheritedUInt32    `json:"edns_udp_size,omitempty"`
	FilterAaaaAcl                     *InheritedACLItems              `json:"filter_aaaa_acl,omitempty"`
	FilterAaaaOnV4                    *Inheritance2InheritedString    `json:"filter_aaaa_on_v4,omitempty"`
	ForwardersBlock                   *InheritedForwardersBlock       `json:"forwarders_block,omitempty"`
	GssTsigEnabled                    *Inheritance2InheritedBool      `json:"gss_tsig_enabled,omitempty"`
	LameTtl                           *Inheritance2InheritedUInt32    `json:"lame_ttl,omitempty"`
	MatchRecursiveOnly                *Inheritance2InheritedBool      `json:"match_recursive_only,omitempty"`
	MaxCacheTtl                       *Inheritance2InheritedUInt32    `json:"max_cache_ttl,omitempty"`
	MaxNegativeTtl                    *Inheritance2InheritedUInt32    `json:"max_negative_ttl,omitempty"`
	MaxUdpSize                        *Inheritance2InheritedUInt32    `json:"max_udp_size,omitempty"`
	MinimalResponses                  *Inheritance2InheritedBool      `json:"minimal_responses,omitempty"`
	Notify                            *Inheritance2InheritedBool      `json:"notify,omitempty"`
	QueryAcl                          *InheritedACLItems              `json:"query_acl,omitempty"`
	RecursionAcl                      *InheritedACLItems              `json:"recursion_acl,omitempty"`
	RecursionEnabled                  *Inheritance2InheritedBool      `json:"recursion_enabled,omitempty"`
	SortList                          *InheritedSortListItems         `json:"sort_list,omitempty"`
	SynthesizeAddressRecordsFromHttps *Inheritance2InheritedBool      `json:"synthesize_address_records_from_https,omitempty"`
	TransferAcl                       *InheritedACLItems              `json:"transfer_acl,omitempty"`
	UpdateAcl                         *InheritedACLItems              `json:"update_acl,omitempty"`
	UseForwardersForSubzones          *Inheritance2InheritedBool      `json:"use_forwarders_for_subzones,omitempty"`
	ZoneAuthority                     *InheritedZoneAuthority         `json:"zone_authority,omitempty"`
	AdditionalProperties              map[string]interface{}
}

type _ViewInheritance ViewInheritance

// NewViewInheritance instantiates a new ViewInheritance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewInheritance() *ViewInheritance {
	this := ViewInheritance{}
	return &this
}

// NewViewInheritanceWithDefaults instantiates a new ViewInheritance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewInheritanceWithDefaults() *ViewInheritance {
	this := ViewInheritance{}
	return &this
}

// GetAddEdnsOptionInOutgoingQuery returns the AddEdnsOptionInOutgoingQuery field value if set, zero value otherwise.
func (o *ViewInheritance) GetAddEdnsOptionInOutgoingQuery() Inheritance2InheritedBool {
	if o == nil || IsNil(o.AddEdnsOptionInOutgoingQuery) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.AddEdnsOptionInOutgoingQuery
}

// GetAddEdnsOptionInOutgoingQueryOk returns a tuple with the AddEdnsOptionInOutgoingQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetAddEdnsOptionInOutgoingQueryOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.AddEdnsOptionInOutgoingQuery) {
		return nil, false
	}
	return o.AddEdnsOptionInOutgoingQuery, true
}

// HasAddEdnsOptionInOutgoingQuery returns a boolean if a field has been set.
func (o *ViewInheritance) HasAddEdnsOptionInOutgoingQuery() bool {
	if o != nil && !IsNil(o.AddEdnsOptionInOutgoingQuery) {
		return true
	}

	return false
}

// SetAddEdnsOptionInOutgoingQuery gets a reference to the given Inheritance2InheritedBool and assigns it to the AddEdnsOptionInOutgoingQuery field.
func (o *ViewInheritance) SetAddEdnsOptionInOutgoingQuery(v Inheritance2InheritedBool) {
	o.AddEdnsOptionInOutgoingQuery = &v
}

// GetCustomRootNsBlock returns the CustomRootNsBlock field value if set, zero value otherwise.
func (o *ViewInheritance) GetCustomRootNsBlock() InheritedCustomRootNSBlock {
	if o == nil || IsNil(o.CustomRootNsBlock) {
		var ret InheritedCustomRootNSBlock
		return ret
	}
	return *o.CustomRootNsBlock
}

// GetCustomRootNsBlockOk returns a tuple with the CustomRootNsBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetCustomRootNsBlockOk() (*InheritedCustomRootNSBlock, bool) {
	if o == nil || IsNil(o.CustomRootNsBlock) {
		return nil, false
	}
	return o.CustomRootNsBlock, true
}

// HasCustomRootNsBlock returns a boolean if a field has been set.
func (o *ViewInheritance) HasCustomRootNsBlock() bool {
	if o != nil && !IsNil(o.CustomRootNsBlock) {
		return true
	}

	return false
}

// SetCustomRootNsBlock gets a reference to the given InheritedCustomRootNSBlock and assigns it to the CustomRootNsBlock field.
func (o *ViewInheritance) SetCustomRootNsBlock(v InheritedCustomRootNSBlock) {
	o.CustomRootNsBlock = &v
}

// GetDnssecValidationBlock returns the DnssecValidationBlock field value if set, zero value otherwise.
func (o *ViewInheritance) GetDnssecValidationBlock() InheritedDNSSECValidationBlock {
	if o == nil || IsNil(o.DnssecValidationBlock) {
		var ret InheritedDNSSECValidationBlock
		return ret
	}
	return *o.DnssecValidationBlock
}

// GetDnssecValidationBlockOk returns a tuple with the DnssecValidationBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetDnssecValidationBlockOk() (*InheritedDNSSECValidationBlock, bool) {
	if o == nil || IsNil(o.DnssecValidationBlock) {
		return nil, false
	}
	return o.DnssecValidationBlock, true
}

// HasDnssecValidationBlock returns a boolean if a field has been set.
func (o *ViewInheritance) HasDnssecValidationBlock() bool {
	if o != nil && !IsNil(o.DnssecValidationBlock) {
		return true
	}

	return false
}

// SetDnssecValidationBlock gets a reference to the given InheritedDNSSECValidationBlock and assigns it to the DnssecValidationBlock field.
func (o *ViewInheritance) SetDnssecValidationBlock(v InheritedDNSSECValidationBlock) {
	o.DnssecValidationBlock = &v
}

// GetDtcConfig returns the DtcConfig field value if set, zero value otherwise.
func (o *ViewInheritance) GetDtcConfig() InheritedDtcConfig {
	if o == nil || IsNil(o.DtcConfig) {
		var ret InheritedDtcConfig
		return ret
	}
	return *o.DtcConfig
}

// GetDtcConfigOk returns a tuple with the DtcConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetDtcConfigOk() (*InheritedDtcConfig, bool) {
	if o == nil || IsNil(o.DtcConfig) {
		return nil, false
	}
	return o.DtcConfig, true
}

// HasDtcConfig returns a boolean if a field has been set.
func (o *ViewInheritance) HasDtcConfig() bool {
	if o != nil && !IsNil(o.DtcConfig) {
		return true
	}

	return false
}

// SetDtcConfig gets a reference to the given InheritedDtcConfig and assigns it to the DtcConfig field.
func (o *ViewInheritance) SetDtcConfig(v InheritedDtcConfig) {
	o.DtcConfig = &v
}

// GetEcsBlock returns the EcsBlock field value if set, zero value otherwise.
func (o *ViewInheritance) GetEcsBlock() InheritedECSBlock {
	if o == nil || IsNil(o.EcsBlock) {
		var ret InheritedECSBlock
		return ret
	}
	return *o.EcsBlock
}

// GetEcsBlockOk returns a tuple with the EcsBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetEcsBlockOk() (*InheritedECSBlock, bool) {
	if o == nil || IsNil(o.EcsBlock) {
		return nil, false
	}
	return o.EcsBlock, true
}

// HasEcsBlock returns a boolean if a field has been set.
func (o *ViewInheritance) HasEcsBlock() bool {
	if o != nil && !IsNil(o.EcsBlock) {
		return true
	}

	return false
}

// SetEcsBlock gets a reference to the given InheritedECSBlock and assigns it to the EcsBlock field.
func (o *ViewInheritance) SetEcsBlock(v InheritedECSBlock) {
	o.EcsBlock = &v
}

// GetEdnsUdpSize returns the EdnsUdpSize field value if set, zero value otherwise.
func (o *ViewInheritance) GetEdnsUdpSize() Inheritance2InheritedUInt32 {
	if o == nil || IsNil(o.EdnsUdpSize) {
		var ret Inheritance2InheritedUInt32
		return ret
	}
	return *o.EdnsUdpSize
}

// GetEdnsUdpSizeOk returns a tuple with the EdnsUdpSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetEdnsUdpSizeOk() (*Inheritance2InheritedUInt32, bool) {
	if o == nil || IsNil(o.EdnsUdpSize) {
		return nil, false
	}
	return o.EdnsUdpSize, true
}

// HasEdnsUdpSize returns a boolean if a field has been set.
func (o *ViewInheritance) HasEdnsUdpSize() bool {
	if o != nil && !IsNil(o.EdnsUdpSize) {
		return true
	}

	return false
}

// SetEdnsUdpSize gets a reference to the given Inheritance2InheritedUInt32 and assigns it to the EdnsUdpSize field.
func (o *ViewInheritance) SetEdnsUdpSize(v Inheritance2InheritedUInt32) {
	o.EdnsUdpSize = &v
}

// GetFilterAaaaAcl returns the FilterAaaaAcl field value if set, zero value otherwise.
func (o *ViewInheritance) GetFilterAaaaAcl() InheritedACLItems {
	if o == nil || IsNil(o.FilterAaaaAcl) {
		var ret InheritedACLItems
		return ret
	}
	return *o.FilterAaaaAcl
}

// GetFilterAaaaAclOk returns a tuple with the FilterAaaaAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetFilterAaaaAclOk() (*InheritedACLItems, bool) {
	if o == nil || IsNil(o.FilterAaaaAcl) {
		return nil, false
	}
	return o.FilterAaaaAcl, true
}

// HasFilterAaaaAcl returns a boolean if a field has been set.
func (o *ViewInheritance) HasFilterAaaaAcl() bool {
	if o != nil && !IsNil(o.FilterAaaaAcl) {
		return true
	}

	return false
}

// SetFilterAaaaAcl gets a reference to the given InheritedACLItems and assigns it to the FilterAaaaAcl field.
func (o *ViewInheritance) SetFilterAaaaAcl(v InheritedACLItems) {
	o.FilterAaaaAcl = &v
}

// GetFilterAaaaOnV4 returns the FilterAaaaOnV4 field value if set, zero value otherwise.
func (o *ViewInheritance) GetFilterAaaaOnV4() Inheritance2InheritedString {
	if o == nil || IsNil(o.FilterAaaaOnV4) {
		var ret Inheritance2InheritedString
		return ret
	}
	return *o.FilterAaaaOnV4
}

// GetFilterAaaaOnV4Ok returns a tuple with the FilterAaaaOnV4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetFilterAaaaOnV4Ok() (*Inheritance2InheritedString, bool) {
	if o == nil || IsNil(o.FilterAaaaOnV4) {
		return nil, false
	}
	return o.FilterAaaaOnV4, true
}

// HasFilterAaaaOnV4 returns a boolean if a field has been set.
func (o *ViewInheritance) HasFilterAaaaOnV4() bool {
	if o != nil && !IsNil(o.FilterAaaaOnV4) {
		return true
	}

	return false
}

// SetFilterAaaaOnV4 gets a reference to the given Inheritance2InheritedString and assigns it to the FilterAaaaOnV4 field.
func (o *ViewInheritance) SetFilterAaaaOnV4(v Inheritance2InheritedString) {
	o.FilterAaaaOnV4 = &v
}

// GetForwardersBlock returns the ForwardersBlock field value if set, zero value otherwise.
func (o *ViewInheritance) GetForwardersBlock() InheritedForwardersBlock {
	if o == nil || IsNil(o.ForwardersBlock) {
		var ret InheritedForwardersBlock
		return ret
	}
	return *o.ForwardersBlock
}

// GetForwardersBlockOk returns a tuple with the ForwardersBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetForwardersBlockOk() (*InheritedForwardersBlock, bool) {
	if o == nil || IsNil(o.ForwardersBlock) {
		return nil, false
	}
	return o.ForwardersBlock, true
}

// HasForwardersBlock returns a boolean if a field has been set.
func (o *ViewInheritance) HasForwardersBlock() bool {
	if o != nil && !IsNil(o.ForwardersBlock) {
		return true
	}

	return false
}

// SetForwardersBlock gets a reference to the given InheritedForwardersBlock and assigns it to the ForwardersBlock field.
func (o *ViewInheritance) SetForwardersBlock(v InheritedForwardersBlock) {
	o.ForwardersBlock = &v
}

// GetGssTsigEnabled returns the GssTsigEnabled field value if set, zero value otherwise.
func (o *ViewInheritance) GetGssTsigEnabled() Inheritance2InheritedBool {
	if o == nil || IsNil(o.GssTsigEnabled) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.GssTsigEnabled
}

// GetGssTsigEnabledOk returns a tuple with the GssTsigEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetGssTsigEnabledOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.GssTsigEnabled) {
		return nil, false
	}
	return o.GssTsigEnabled, true
}

// HasGssTsigEnabled returns a boolean if a field has been set.
func (o *ViewInheritance) HasGssTsigEnabled() bool {
	if o != nil && !IsNil(o.GssTsigEnabled) {
		return true
	}

	return false
}

// SetGssTsigEnabled gets a reference to the given Inheritance2InheritedBool and assigns it to the GssTsigEnabled field.
func (o *ViewInheritance) SetGssTsigEnabled(v Inheritance2InheritedBool) {
	o.GssTsigEnabled = &v
}

// GetLameTtl returns the LameTtl field value if set, zero value otherwise.
func (o *ViewInheritance) GetLameTtl() Inheritance2InheritedUInt32 {
	if o == nil || IsNil(o.LameTtl) {
		var ret Inheritance2InheritedUInt32
		return ret
	}
	return *o.LameTtl
}

// GetLameTtlOk returns a tuple with the LameTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetLameTtlOk() (*Inheritance2InheritedUInt32, bool) {
	if o == nil || IsNil(o.LameTtl) {
		return nil, false
	}
	return o.LameTtl, true
}

// HasLameTtl returns a boolean if a field has been set.
func (o *ViewInheritance) HasLameTtl() bool {
	if o != nil && !IsNil(o.LameTtl) {
		return true
	}

	return false
}

// SetLameTtl gets a reference to the given Inheritance2InheritedUInt32 and assigns it to the LameTtl field.
func (o *ViewInheritance) SetLameTtl(v Inheritance2InheritedUInt32) {
	o.LameTtl = &v
}

// GetMatchRecursiveOnly returns the MatchRecursiveOnly field value if set, zero value otherwise.
func (o *ViewInheritance) GetMatchRecursiveOnly() Inheritance2InheritedBool {
	if o == nil || IsNil(o.MatchRecursiveOnly) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.MatchRecursiveOnly
}

// GetMatchRecursiveOnlyOk returns a tuple with the MatchRecursiveOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetMatchRecursiveOnlyOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.MatchRecursiveOnly) {
		return nil, false
	}
	return o.MatchRecursiveOnly, true
}

// HasMatchRecursiveOnly returns a boolean if a field has been set.
func (o *ViewInheritance) HasMatchRecursiveOnly() bool {
	if o != nil && !IsNil(o.MatchRecursiveOnly) {
		return true
	}

	return false
}

// SetMatchRecursiveOnly gets a reference to the given Inheritance2InheritedBool and assigns it to the MatchRecursiveOnly field.
func (o *ViewInheritance) SetMatchRecursiveOnly(v Inheritance2InheritedBool) {
	o.MatchRecursiveOnly = &v
}

// GetMaxCacheTtl returns the MaxCacheTtl field value if set, zero value otherwise.
func (o *ViewInheritance) GetMaxCacheTtl() Inheritance2InheritedUInt32 {
	if o == nil || IsNil(o.MaxCacheTtl) {
		var ret Inheritance2InheritedUInt32
		return ret
	}
	return *o.MaxCacheTtl
}

// GetMaxCacheTtlOk returns a tuple with the MaxCacheTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetMaxCacheTtlOk() (*Inheritance2InheritedUInt32, bool) {
	if o == nil || IsNil(o.MaxCacheTtl) {
		return nil, false
	}
	return o.MaxCacheTtl, true
}

// HasMaxCacheTtl returns a boolean if a field has been set.
func (o *ViewInheritance) HasMaxCacheTtl() bool {
	if o != nil && !IsNil(o.MaxCacheTtl) {
		return true
	}

	return false
}

// SetMaxCacheTtl gets a reference to the given Inheritance2InheritedUInt32 and assigns it to the MaxCacheTtl field.
func (o *ViewInheritance) SetMaxCacheTtl(v Inheritance2InheritedUInt32) {
	o.MaxCacheTtl = &v
}

// GetMaxNegativeTtl returns the MaxNegativeTtl field value if set, zero value otherwise.
func (o *ViewInheritance) GetMaxNegativeTtl() Inheritance2InheritedUInt32 {
	if o == nil || IsNil(o.MaxNegativeTtl) {
		var ret Inheritance2InheritedUInt32
		return ret
	}
	return *o.MaxNegativeTtl
}

// GetMaxNegativeTtlOk returns a tuple with the MaxNegativeTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetMaxNegativeTtlOk() (*Inheritance2InheritedUInt32, bool) {
	if o == nil || IsNil(o.MaxNegativeTtl) {
		return nil, false
	}
	return o.MaxNegativeTtl, true
}

// HasMaxNegativeTtl returns a boolean if a field has been set.
func (o *ViewInheritance) HasMaxNegativeTtl() bool {
	if o != nil && !IsNil(o.MaxNegativeTtl) {
		return true
	}

	return false
}

// SetMaxNegativeTtl gets a reference to the given Inheritance2InheritedUInt32 and assigns it to the MaxNegativeTtl field.
func (o *ViewInheritance) SetMaxNegativeTtl(v Inheritance2InheritedUInt32) {
	o.MaxNegativeTtl = &v
}

// GetMaxUdpSize returns the MaxUdpSize field value if set, zero value otherwise.
func (o *ViewInheritance) GetMaxUdpSize() Inheritance2InheritedUInt32 {
	if o == nil || IsNil(o.MaxUdpSize) {
		var ret Inheritance2InheritedUInt32
		return ret
	}
	return *o.MaxUdpSize
}

// GetMaxUdpSizeOk returns a tuple with the MaxUdpSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetMaxUdpSizeOk() (*Inheritance2InheritedUInt32, bool) {
	if o == nil || IsNil(o.MaxUdpSize) {
		return nil, false
	}
	return o.MaxUdpSize, true
}

// HasMaxUdpSize returns a boolean if a field has been set.
func (o *ViewInheritance) HasMaxUdpSize() bool {
	if o != nil && !IsNil(o.MaxUdpSize) {
		return true
	}

	return false
}

// SetMaxUdpSize gets a reference to the given Inheritance2InheritedUInt32 and assigns it to the MaxUdpSize field.
func (o *ViewInheritance) SetMaxUdpSize(v Inheritance2InheritedUInt32) {
	o.MaxUdpSize = &v
}

// GetMinimalResponses returns the MinimalResponses field value if set, zero value otherwise.
func (o *ViewInheritance) GetMinimalResponses() Inheritance2InheritedBool {
	if o == nil || IsNil(o.MinimalResponses) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.MinimalResponses
}

// GetMinimalResponsesOk returns a tuple with the MinimalResponses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetMinimalResponsesOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.MinimalResponses) {
		return nil, false
	}
	return o.MinimalResponses, true
}

// HasMinimalResponses returns a boolean if a field has been set.
func (o *ViewInheritance) HasMinimalResponses() bool {
	if o != nil && !IsNil(o.MinimalResponses) {
		return true
	}

	return false
}

// SetMinimalResponses gets a reference to the given Inheritance2InheritedBool and assigns it to the MinimalResponses field.
func (o *ViewInheritance) SetMinimalResponses(v Inheritance2InheritedBool) {
	o.MinimalResponses = &v
}

// GetNotify returns the Notify field value if set, zero value otherwise.
func (o *ViewInheritance) GetNotify() Inheritance2InheritedBool {
	if o == nil || IsNil(o.Notify) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.Notify
}

// GetNotifyOk returns a tuple with the Notify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetNotifyOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.Notify) {
		return nil, false
	}
	return o.Notify, true
}

// HasNotify returns a boolean if a field has been set.
func (o *ViewInheritance) HasNotify() bool {
	if o != nil && !IsNil(o.Notify) {
		return true
	}

	return false
}

// SetNotify gets a reference to the given Inheritance2InheritedBool and assigns it to the Notify field.
func (o *ViewInheritance) SetNotify(v Inheritance2InheritedBool) {
	o.Notify = &v
}

// GetQueryAcl returns the QueryAcl field value if set, zero value otherwise.
func (o *ViewInheritance) GetQueryAcl() InheritedACLItems {
	if o == nil || IsNil(o.QueryAcl) {
		var ret InheritedACLItems
		return ret
	}
	return *o.QueryAcl
}

// GetQueryAclOk returns a tuple with the QueryAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetQueryAclOk() (*InheritedACLItems, bool) {
	if o == nil || IsNil(o.QueryAcl) {
		return nil, false
	}
	return o.QueryAcl, true
}

// HasQueryAcl returns a boolean if a field has been set.
func (o *ViewInheritance) HasQueryAcl() bool {
	if o != nil && !IsNil(o.QueryAcl) {
		return true
	}

	return false
}

// SetQueryAcl gets a reference to the given InheritedACLItems and assigns it to the QueryAcl field.
func (o *ViewInheritance) SetQueryAcl(v InheritedACLItems) {
	o.QueryAcl = &v
}

// GetRecursionAcl returns the RecursionAcl field value if set, zero value otherwise.
func (o *ViewInheritance) GetRecursionAcl() InheritedACLItems {
	if o == nil || IsNil(o.RecursionAcl) {
		var ret InheritedACLItems
		return ret
	}
	return *o.RecursionAcl
}

// GetRecursionAclOk returns a tuple with the RecursionAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetRecursionAclOk() (*InheritedACLItems, bool) {
	if o == nil || IsNil(o.RecursionAcl) {
		return nil, false
	}
	return o.RecursionAcl, true
}

// HasRecursionAcl returns a boolean if a field has been set.
func (o *ViewInheritance) HasRecursionAcl() bool {
	if o != nil && !IsNil(o.RecursionAcl) {
		return true
	}

	return false
}

// SetRecursionAcl gets a reference to the given InheritedACLItems and assigns it to the RecursionAcl field.
func (o *ViewInheritance) SetRecursionAcl(v InheritedACLItems) {
	o.RecursionAcl = &v
}

// GetRecursionEnabled returns the RecursionEnabled field value if set, zero value otherwise.
func (o *ViewInheritance) GetRecursionEnabled() Inheritance2InheritedBool {
	if o == nil || IsNil(o.RecursionEnabled) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.RecursionEnabled
}

// GetRecursionEnabledOk returns a tuple with the RecursionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetRecursionEnabledOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.RecursionEnabled) {
		return nil, false
	}
	return o.RecursionEnabled, true
}

// HasRecursionEnabled returns a boolean if a field has been set.
func (o *ViewInheritance) HasRecursionEnabled() bool {
	if o != nil && !IsNil(o.RecursionEnabled) {
		return true
	}

	return false
}

// SetRecursionEnabled gets a reference to the given Inheritance2InheritedBool and assigns it to the RecursionEnabled field.
func (o *ViewInheritance) SetRecursionEnabled(v Inheritance2InheritedBool) {
	o.RecursionEnabled = &v
}

// GetSortList returns the SortList field value if set, zero value otherwise.
func (o *ViewInheritance) GetSortList() InheritedSortListItems {
	if o == nil || IsNil(o.SortList) {
		var ret InheritedSortListItems
		return ret
	}
	return *o.SortList
}

// GetSortListOk returns a tuple with the SortList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetSortListOk() (*InheritedSortListItems, bool) {
	if o == nil || IsNil(o.SortList) {
		return nil, false
	}
	return o.SortList, true
}

// HasSortList returns a boolean if a field has been set.
func (o *ViewInheritance) HasSortList() bool {
	if o != nil && !IsNil(o.SortList) {
		return true
	}

	return false
}

// SetSortList gets a reference to the given InheritedSortListItems and assigns it to the SortList field.
func (o *ViewInheritance) SetSortList(v InheritedSortListItems) {
	o.SortList = &v
}

// GetSynthesizeAddressRecordsFromHttps returns the SynthesizeAddressRecordsFromHttps field value if set, zero value otherwise.
func (o *ViewInheritance) GetSynthesizeAddressRecordsFromHttps() Inheritance2InheritedBool {
	if o == nil || IsNil(o.SynthesizeAddressRecordsFromHttps) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.SynthesizeAddressRecordsFromHttps
}

// GetSynthesizeAddressRecordsFromHttpsOk returns a tuple with the SynthesizeAddressRecordsFromHttps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetSynthesizeAddressRecordsFromHttpsOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.SynthesizeAddressRecordsFromHttps) {
		return nil, false
	}
	return o.SynthesizeAddressRecordsFromHttps, true
}

// HasSynthesizeAddressRecordsFromHttps returns a boolean if a field has been set.
func (o *ViewInheritance) HasSynthesizeAddressRecordsFromHttps() bool {
	if o != nil && !IsNil(o.SynthesizeAddressRecordsFromHttps) {
		return true
	}

	return false
}

// SetSynthesizeAddressRecordsFromHttps gets a reference to the given Inheritance2InheritedBool and assigns it to the SynthesizeAddressRecordsFromHttps field.
func (o *ViewInheritance) SetSynthesizeAddressRecordsFromHttps(v Inheritance2InheritedBool) {
	o.SynthesizeAddressRecordsFromHttps = &v
}

// GetTransferAcl returns the TransferAcl field value if set, zero value otherwise.
func (o *ViewInheritance) GetTransferAcl() InheritedACLItems {
	if o == nil || IsNil(o.TransferAcl) {
		var ret InheritedACLItems
		return ret
	}
	return *o.TransferAcl
}

// GetTransferAclOk returns a tuple with the TransferAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetTransferAclOk() (*InheritedACLItems, bool) {
	if o == nil || IsNil(o.TransferAcl) {
		return nil, false
	}
	return o.TransferAcl, true
}

// HasTransferAcl returns a boolean if a field has been set.
func (o *ViewInheritance) HasTransferAcl() bool {
	if o != nil && !IsNil(o.TransferAcl) {
		return true
	}

	return false
}

// SetTransferAcl gets a reference to the given InheritedACLItems and assigns it to the TransferAcl field.
func (o *ViewInheritance) SetTransferAcl(v InheritedACLItems) {
	o.TransferAcl = &v
}

// GetUpdateAcl returns the UpdateAcl field value if set, zero value otherwise.
func (o *ViewInheritance) GetUpdateAcl() InheritedACLItems {
	if o == nil || IsNil(o.UpdateAcl) {
		var ret InheritedACLItems
		return ret
	}
	return *o.UpdateAcl
}

// GetUpdateAclOk returns a tuple with the UpdateAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetUpdateAclOk() (*InheritedACLItems, bool) {
	if o == nil || IsNil(o.UpdateAcl) {
		return nil, false
	}
	return o.UpdateAcl, true
}

// HasUpdateAcl returns a boolean if a field has been set.
func (o *ViewInheritance) HasUpdateAcl() bool {
	if o != nil && !IsNil(o.UpdateAcl) {
		return true
	}

	return false
}

// SetUpdateAcl gets a reference to the given InheritedACLItems and assigns it to the UpdateAcl field.
func (o *ViewInheritance) SetUpdateAcl(v InheritedACLItems) {
	o.UpdateAcl = &v
}

// GetUseForwardersForSubzones returns the UseForwardersForSubzones field value if set, zero value otherwise.
func (o *ViewInheritance) GetUseForwardersForSubzones() Inheritance2InheritedBool {
	if o == nil || IsNil(o.UseForwardersForSubzones) {
		var ret Inheritance2InheritedBool
		return ret
	}
	return *o.UseForwardersForSubzones
}

// GetUseForwardersForSubzonesOk returns a tuple with the UseForwardersForSubzones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetUseForwardersForSubzonesOk() (*Inheritance2InheritedBool, bool) {
	if o == nil || IsNil(o.UseForwardersForSubzones) {
		return nil, false
	}
	return o.UseForwardersForSubzones, true
}

// HasUseForwardersForSubzones returns a boolean if a field has been set.
func (o *ViewInheritance) HasUseForwardersForSubzones() bool {
	if o != nil && !IsNil(o.UseForwardersForSubzones) {
		return true
	}

	return false
}

// SetUseForwardersForSubzones gets a reference to the given Inheritance2InheritedBool and assigns it to the UseForwardersForSubzones field.
func (o *ViewInheritance) SetUseForwardersForSubzones(v Inheritance2InheritedBool) {
	o.UseForwardersForSubzones = &v
}

// GetZoneAuthority returns the ZoneAuthority field value if set, zero value otherwise.
func (o *ViewInheritance) GetZoneAuthority() InheritedZoneAuthority {
	if o == nil || IsNil(o.ZoneAuthority) {
		var ret InheritedZoneAuthority
		return ret
	}
	return *o.ZoneAuthority
}

// GetZoneAuthorityOk returns a tuple with the ZoneAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewInheritance) GetZoneAuthorityOk() (*InheritedZoneAuthority, bool) {
	if o == nil || IsNil(o.ZoneAuthority) {
		return nil, false
	}
	return o.ZoneAuthority, true
}

// HasZoneAuthority returns a boolean if a field has been set.
func (o *ViewInheritance) HasZoneAuthority() bool {
	if o != nil && !IsNil(o.ZoneAuthority) {
		return true
	}

	return false
}

// SetZoneAuthority gets a reference to the given InheritedZoneAuthority and assigns it to the ZoneAuthority field.
func (o *ViewInheritance) SetZoneAuthority(v InheritedZoneAuthority) {
	o.ZoneAuthority = &v
}

func (o ViewInheritance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewInheritance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddEdnsOptionInOutgoingQuery) {
		toSerialize["add_edns_option_in_outgoing_query"] = o.AddEdnsOptionInOutgoingQuery
	}
	if !IsNil(o.CustomRootNsBlock) {
		toSerialize["custom_root_ns_block"] = o.CustomRootNsBlock
	}
	if !IsNil(o.DnssecValidationBlock) {
		toSerialize["dnssec_validation_block"] = o.DnssecValidationBlock
	}
	if !IsNil(o.DtcConfig) {
		toSerialize["dtc_config"] = o.DtcConfig
	}
	if !IsNil(o.EcsBlock) {
		toSerialize["ecs_block"] = o.EcsBlock
	}
	if !IsNil(o.EdnsUdpSize) {
		toSerialize["edns_udp_size"] = o.EdnsUdpSize
	}
	if !IsNil(o.FilterAaaaAcl) {
		toSerialize["filter_aaaa_acl"] = o.FilterAaaaAcl
	}
	if !IsNil(o.FilterAaaaOnV4) {
		toSerialize["filter_aaaa_on_v4"] = o.FilterAaaaOnV4
	}
	if !IsNil(o.ForwardersBlock) {
		toSerialize["forwarders_block"] = o.ForwardersBlock
	}
	if !IsNil(o.GssTsigEnabled) {
		toSerialize["gss_tsig_enabled"] = o.GssTsigEnabled
	}
	if !IsNil(o.LameTtl) {
		toSerialize["lame_ttl"] = o.LameTtl
	}
	if !IsNil(o.MatchRecursiveOnly) {
		toSerialize["match_recursive_only"] = o.MatchRecursiveOnly
	}
	if !IsNil(o.MaxCacheTtl) {
		toSerialize["max_cache_ttl"] = o.MaxCacheTtl
	}
	if !IsNil(o.MaxNegativeTtl) {
		toSerialize["max_negative_ttl"] = o.MaxNegativeTtl
	}
	if !IsNil(o.MaxUdpSize) {
		toSerialize["max_udp_size"] = o.MaxUdpSize
	}
	if !IsNil(o.MinimalResponses) {
		toSerialize["minimal_responses"] = o.MinimalResponses
	}
	if !IsNil(o.Notify) {
		toSerialize["notify"] = o.Notify
	}
	if !IsNil(o.QueryAcl) {
		toSerialize["query_acl"] = o.QueryAcl
	}
	if !IsNil(o.RecursionAcl) {
		toSerialize["recursion_acl"] = o.RecursionAcl
	}
	if !IsNil(o.RecursionEnabled) {
		toSerialize["recursion_enabled"] = o.RecursionEnabled
	}
	if !IsNil(o.SortList) {
		toSerialize["sort_list"] = o.SortList
	}
	if !IsNil(o.SynthesizeAddressRecordsFromHttps) {
		toSerialize["synthesize_address_records_from_https"] = o.SynthesizeAddressRecordsFromHttps
	}
	if !IsNil(o.TransferAcl) {
		toSerialize["transfer_acl"] = o.TransferAcl
	}
	if !IsNil(o.UpdateAcl) {
		toSerialize["update_acl"] = o.UpdateAcl
	}
	if !IsNil(o.UseForwardersForSubzones) {
		toSerialize["use_forwarders_for_subzones"] = o.UseForwardersForSubzones
	}
	if !IsNil(o.ZoneAuthority) {
		toSerialize["zone_authority"] = o.ZoneAuthority
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ViewInheritance) UnmarshalJSON(data []byte) (err error) {
	varViewInheritance := _ViewInheritance{}

	err = json.Unmarshal(data, &varViewInheritance)

	if err != nil {
		return err
	}

	*o = ViewInheritance(varViewInheritance)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "add_edns_option_in_outgoing_query")
		delete(additionalProperties, "custom_root_ns_block")
		delete(additionalProperties, "dnssec_validation_block")
		delete(additionalProperties, "dtc_config")
		delete(additionalProperties, "ecs_block")
		delete(additionalProperties, "edns_udp_size")
		delete(additionalProperties, "filter_aaaa_acl")
		delete(additionalProperties, "filter_aaaa_on_v4")
		delete(additionalProperties, "forwarders_block")
		delete(additionalProperties, "gss_tsig_enabled")
		delete(additionalProperties, "lame_ttl")
		delete(additionalProperties, "match_recursive_only")
		delete(additionalProperties, "max_cache_ttl")
		delete(additionalProperties, "max_negative_ttl")
		delete(additionalProperties, "max_udp_size")
		delete(additionalProperties, "minimal_responses")
		delete(additionalProperties, "notify")
		delete(additionalProperties, "query_acl")
		delete(additionalProperties, "recursion_acl")
		delete(additionalProperties, "recursion_enabled")
		delete(additionalProperties, "sort_list")
		delete(additionalProperties, "synthesize_address_records_from_https")
		delete(additionalProperties, "transfer_acl")
		delete(additionalProperties, "update_acl")
		delete(additionalProperties, "use_forwarders_for_subzones")
		delete(additionalProperties, "zone_authority")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableViewInheritance struct {
	value *ViewInheritance
	isSet bool
}

func (v NullableViewInheritance) Get() *ViewInheritance {
	return v.value
}

func (v *NullableViewInheritance) Set(val *ViewInheritance) {
	v.value = val
	v.isSet = true
}

func (v NullableViewInheritance) IsSet() bool {
	return v.isSet
}

func (v *NullableViewInheritance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewInheritance(val *ViewInheritance) *NullableViewInheritance {
	return &NullableViewInheritance{value: val, isSet: true}
}

func (v NullableViewInheritance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewInheritance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
