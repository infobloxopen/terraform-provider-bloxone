/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsconfig

import (
	"encoding/json"
	"fmt"
)

// checks if the LBDN type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LBDN{}

// LBDN A LBDN (_dtc/lbdn_) represents a load-balanced domain name
type LBDN struct {
	// Optional. Comment for __LBDN__.
	Comment *string `json:"comment,omitempty"`
	// Optional. _true_ to disable object. A disabled object is effectively non-existent when generating configuration.
	Disabled *bool `json:"disabled,omitempty"`
	// Optional. __DTC Policy__ information.
	DtcPolicy *DTCPolicy `json:"dtc_policy,omitempty"`
	// The resource identifier.
	Id *string `json:"id,omitempty"`
	// Optional. The inheritance configuration.
	InheritanceSources *TTLInheritance `json:"inheritance_sources,omitempty"`
	// Name of __LBDN__.
	Name string `json:"name"`
	// Optional. Precedence.
	Precedence *int64 `json:"precedence,omitempty"`
	// Optional. The tags for __LBDN__ in JSON format.
	Tags map[string]interface{} `json:"tags,omitempty"`
	// Optional. Time to live value (in seconds) to be used for records in DTC response. Unsigned integer, min: 0, max 2147483647 (31-bits per RFC-2181).
	Ttl *int64 `json:"ttl,omitempty"`
	// The resource identifier.
	View                 string `json:"view"`
	AdditionalProperties map[string]interface{}
}

type _LBDN LBDN

// NewLBDN instantiates a new LBDN object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLBDN(name string, view string) *LBDN {
	this := LBDN{}
	this.Name = name
	this.View = view
	return &this
}

// NewLBDNWithDefaults instantiates a new LBDN object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLBDNWithDefaults() *LBDN {
	this := LBDN{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *LBDN) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LBDN) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *LBDN) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *LBDN) SetComment(v string) {
	o.Comment = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *LBDN) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LBDN) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *LBDN) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *LBDN) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetDtcPolicy returns the DtcPolicy field value if set, zero value otherwise.
func (o *LBDN) GetDtcPolicy() DTCPolicy {
	if o == nil || IsNil(o.DtcPolicy) {
		var ret DTCPolicy
		return ret
	}
	return *o.DtcPolicy
}

// GetDtcPolicyOk returns a tuple with the DtcPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LBDN) GetDtcPolicyOk() (*DTCPolicy, bool) {
	if o == nil || IsNil(o.DtcPolicy) {
		return nil, false
	}
	return o.DtcPolicy, true
}

// HasDtcPolicy returns a boolean if a field has been set.
func (o *LBDN) HasDtcPolicy() bool {
	if o != nil && !IsNil(o.DtcPolicy) {
		return true
	}

	return false
}

// SetDtcPolicy gets a reference to the given DTCPolicy and assigns it to the DtcPolicy field.
func (o *LBDN) SetDtcPolicy(v DTCPolicy) {
	o.DtcPolicy = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LBDN) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LBDN) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LBDN) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LBDN) SetId(v string) {
	o.Id = &v
}

// GetInheritanceSources returns the InheritanceSources field value if set, zero value otherwise.
func (o *LBDN) GetInheritanceSources() TTLInheritance {
	if o == nil || IsNil(o.InheritanceSources) {
		var ret TTLInheritance
		return ret
	}
	return *o.InheritanceSources
}

// GetInheritanceSourcesOk returns a tuple with the InheritanceSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LBDN) GetInheritanceSourcesOk() (*TTLInheritance, bool) {
	if o == nil || IsNil(o.InheritanceSources) {
		return nil, false
	}
	return o.InheritanceSources, true
}

// HasInheritanceSources returns a boolean if a field has been set.
func (o *LBDN) HasInheritanceSources() bool {
	if o != nil && !IsNil(o.InheritanceSources) {
		return true
	}

	return false
}

// SetInheritanceSources gets a reference to the given TTLInheritance and assigns it to the InheritanceSources field.
func (o *LBDN) SetInheritanceSources(v TTLInheritance) {
	o.InheritanceSources = &v
}

// GetName returns the Name field value
func (o *LBDN) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LBDN) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LBDN) SetName(v string) {
	o.Name = v
}

// GetPrecedence returns the Precedence field value if set, zero value otherwise.
func (o *LBDN) GetPrecedence() int64 {
	if o == nil || IsNil(o.Precedence) {
		var ret int64
		return ret
	}
	return *o.Precedence
}

// GetPrecedenceOk returns a tuple with the Precedence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LBDN) GetPrecedenceOk() (*int64, bool) {
	if o == nil || IsNil(o.Precedence) {
		return nil, false
	}
	return o.Precedence, true
}

// HasPrecedence returns a boolean if a field has been set.
func (o *LBDN) HasPrecedence() bool {
	if o != nil && !IsNil(o.Precedence) {
		return true
	}

	return false
}

// SetPrecedence gets a reference to the given int64 and assigns it to the Precedence field.
func (o *LBDN) SetPrecedence(v int64) {
	o.Precedence = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *LBDN) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LBDN) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *LBDN) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *LBDN) SetTags(v map[string]interface{}) {
	o.Tags = v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *LBDN) GetTtl() int64 {
	if o == nil || IsNil(o.Ttl) {
		var ret int64
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LBDN) GetTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *LBDN) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int64 and assigns it to the Ttl field.
func (o *LBDN) SetTtl(v int64) {
	o.Ttl = &v
}

// GetView returns the View field value
func (o *LBDN) GetView() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.View
}

// GetViewOk returns a tuple with the View field value
// and a boolean to check if the value has been set.
func (o *LBDN) GetViewOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.View, true
}

// SetView sets field value
func (o *LBDN) SetView(v string) {
	o.View = v
}

func (o LBDN) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LBDN) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.DtcPolicy) {
		toSerialize["dtc_policy"] = o.DtcPolicy
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InheritanceSources) {
		toSerialize["inheritance_sources"] = o.InheritanceSources
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Precedence) {
		toSerialize["precedence"] = o.Precedence
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	toSerialize["view"] = o.View

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LBDN) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"view",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLBDN := _LBDN{}

	err = json.Unmarshal(data, &varLBDN)

	if err != nil {
		return err
	}

	*o = LBDN(varLBDN)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "comment")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "dtc_policy")
		delete(additionalProperties, "id")
		delete(additionalProperties, "inheritance_sources")
		delete(additionalProperties, "name")
		delete(additionalProperties, "precedence")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "ttl")
		delete(additionalProperties, "view")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLBDN struct {
	value *LBDN
	isSet bool
}

func (v NullableLBDN) Get() *LBDN {
	return v.value
}

func (v *NullableLBDN) Set(val *LBDN) {
	v.value = val
	v.isSet = true
}

func (v NullableLBDN) IsSet() bool {
	return v.isSet
}

func (v *NullableLBDN) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLBDN(val *LBDN) *NullableLBDN {
	return &NullableLBDN{value: val, isSet: true}
}

func (v NullableLBDN) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLBDN) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
