/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsconfig

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the View type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &View{}

// View Named collection of DNS View settings.
type View struct {
	// _add_edns_option_in_outgoing_query_ adds client IP, MAC address and view name into outgoing recursive query. Defaults to _false_.
	AddEdnsOptionInOutgoingQuery *bool `json:"add_edns_option_in_outgoing_query,omitempty"`
	// Optional. Comment for view.
	Comment *string `json:"comment,omitempty"`
	// The timestamp when the object has been created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Optional. List of custom root nameservers. The order does not matter.  Error if empty while _custom_root_ns_enabled_ is _true_. Error if there are duplicate items in the list.  Defaults to empty.
	CustomRootNs []RootNS `json:"custom_root_ns,omitempty"`
	// Optional. _true_ to use custom root nameservers instead of the default ones.  The _custom_root_ns_ is validated when enabled.  Defaults to _false_.
	CustomRootNsEnabled *bool `json:"custom_root_ns_enabled,omitempty"`
	// Optional. _true_ to disable object. A disabled object is effectively non-existent when generating configuration.
	Disabled *bool `json:"disabled,omitempty"`
	// Optional. _true_ to perform DNSSEC validation. Ignored if _dnssec_enabled_ is _false_.  Defaults to _true_.
	DnssecEnableValidation *bool `json:"dnssec_enable_validation,omitempty"`
	// Optional. Master toggle for all DNSSEC processing. Other _dnssec_*_ configuration is unused if this is disabled.  Defaults to _true_.
	DnssecEnabled *bool `json:"dnssec_enabled,omitempty"`
	// DNSSEC root keys. The root keys are not configurable.  A default list is provided by cloud management and included here for config generation.
	DnssecRootKeys []TrustAnchor `json:"dnssec_root_keys,omitempty"`
	// Optional. DNSSEC trust anchors.  Error if there are list items with duplicate (_zone_, _sep_, _algorithm_) combinations.  Defaults to empty.
	DnssecTrustAnchors []TrustAnchor `json:"dnssec_trust_anchors,omitempty"`
	// Optional. _true_ to reject expired DNSSEC keys. Ignored if either _dnssec_enabled_ or _dnssec_enable_validation_ is _false_.  Defaults to _true_.
	DnssecValidateExpiry *bool      `json:"dnssec_validate_expiry,omitempty"`
	DtcConfig            *DTCConfig `json:"dtc_config,omitempty"`
	// Optional. _true_ to enable EDNS client subnet for recursive queries. Other _ecs_*_ fields are ignored if this field is not enabled.  Defaults to _false-.
	EcsEnabled *bool `json:"ecs_enabled,omitempty"`
	// Optional. _true_ to enable ECS options in outbound queries. This functionality has additional overhead so it is disabled by default.  Defaults to _false_.
	EcsForwarding *bool `json:"ecs_forwarding,omitempty"`
	// Optional. Maximum scope length for v4 ECS.  Unsigned integer, min 1 max 24  Defaults to 24.
	EcsPrefixV4 *int64 `json:"ecs_prefix_v4,omitempty"`
	// Optional. Maximum scope length for v6 ECS.  Unsigned integer, min 1 max 56  Defaults to 56.
	EcsPrefixV6 *int64 `json:"ecs_prefix_v6,omitempty"`
	// Optional. List of zones where ECS queries may be sent.  Error if empty while _ecs_enabled_ is _true_. Error if there are duplicate FQDNs in the list.  Defaults to empty.
	EcsZones []ECSZone `json:"ecs_zones,omitempty"`
	// Optional. _edns_udp_size_ represents the edns UDP size. The size a querying DNS server advertises to the DNS server itâ€™s sending a query to.  Defaults to 1232 bytes.
	EdnsUdpSize *int64 `json:"edns_udp_size,omitempty"`
	// Optional. Specifies a list of client addresses for which AAAA filtering is to be applied.  Defaults to _empty_.
	FilterAaaaAcl []ACLItem `json:"filter_aaaa_acl,omitempty"`
	// _filter_aaaa_on_v4_ allows named to omit some IPv6 addresses when responding to IPv4 clients.  Allowed values: * _yes_, * _no_, * _break_dnssec_.  Defaults to _no_
	FilterAaaaOnV4 *string `json:"filter_aaaa_on_v4,omitempty"`
	// Optional. List of forwarders.  Error if empty while _forwarders_only_ or _use_root_forwarders_for_local_resolution_with_b1td_ is _true_. Error if there are items in the list with duplicate addresses.  Defaults to empty.
	Forwarders []Forwarder `json:"forwarders,omitempty"`
	// Optional. _true_ to only forward.  Defaults to _false_.
	ForwardersOnly *bool `json:"forwarders_only,omitempty"`
	// _gss_tsig_enabled_ enables/disables GSS-TSIG signed dynamic updates.  Defaults to _false_.
	GssTsigEnabled *bool `json:"gss_tsig_enabled,omitempty"`
	// The resource identifier.
	Id                 *string          `json:"id,omitempty"`
	InheritanceSources *ViewInheritance `json:"inheritance_sources,omitempty"`
	// The resource identifier.
	IpSpaces []string `json:"ip_spaces,omitempty"`
	// Optional. Unused in the current on-prem DNS server implementation.  Unsigned integer, min 0 max 3600 (1h).  Defaults to 600.
	LameTtl *int64 `json:"lame_ttl,omitempty"`
	// Optional. Specifies which clients have access to the view.  Defaults to empty.
	MatchClientsAcl []ACLItem `json:"match_clients_acl,omitempty"`
	// Optional. Specifies which destination addresses have access to the view.  Defaults to empty.
	MatchDestinationsAcl []ACLItem `json:"match_destinations_acl,omitempty"`
	// Optional. If _true_ only recursive queries from matching clients access the view.  Defaults to _false_.
	MatchRecursiveOnly *bool `json:"match_recursive_only,omitempty"`
	// Optional. Seconds to cache positive responses.  Unsigned integer, min 1 max 604800 (7d).  Defaults to 604800 (7d).
	MaxCacheTtl *int64 `json:"max_cache_ttl,omitempty"`
	// Optional. Seconds to cache negative responses.  Unsigned integer, min 1 max 604800 (7d).  Defaults to 10800 (3h).
	MaxNegativeTtl *int64 `json:"max_negative_ttl,omitempty"`
	// Optional. _max_udp_size_ represents maximum UDP payload size. The maximum number of bytes a responding DNS server will send to a UDP datagram.  Defaults to 1232 bytes.
	MaxUdpSize *int64 `json:"max_udp_size,omitempty"`
	// Optional. When enabled, the DNS server will only add records to the authority and additional data sections when they are required.  Defaults to _false_.
	MinimalResponses *bool `json:"minimal_responses,omitempty"`
	// Name of view.
	Name string `json:"name"`
	// _notify_ all external secondary DNS servers.  Defaults to _false_.
	Notify *bool `json:"notify,omitempty"`
	// Optional. Clients must match this ACL to make authoritative queries. Also used for recursive queries if that ACL is unset.  Defaults to empty.
	QueryAcl []ACLItem `json:"query_acl,omitempty"`
	// Optional. Clients must match this ACL to make recursive queries. If this ACL is empty, then the _query_acl_ will be used instead.  Defaults to empty.
	RecursionAcl []ACLItem `json:"recursion_acl,omitempty"`
	// Optional. _true_ to allow recursive DNS queries.  Defaults to _true_.
	RecursionEnabled *bool `json:"recursion_enabled,omitempty"`
	// Optional. Specifies a sorted network list for A/AAAA records in DNS query response.  Defaults to _empty_.
	SortList []SortListItem `json:"sort_list,omitempty"`
	// _synthesize_address_records_from_https_ enables/disables creation of A/AAAA records from HTTPS RR Defaults to _false_.
	SynthesizeAddressRecordsFromHttps *bool `json:"synthesize_address_records_from_https,omitempty"`
	// Tagging specifics.
	Tags map[string]interface{} `json:"tags,omitempty"`
	// Optional. Clients must match this ACL to receive zone transfers.  Defaults to empty.
	TransferAcl []ACLItem `json:"transfer_acl,omitempty"`
	// Optional. Specifies which hosts are allowed to issue Dynamic DNS updates for authoritative zones of _primary_type_ _cloud_.  Defaults to empty.
	UpdateAcl []ACLItem `json:"update_acl,omitempty"`
	// The timestamp when the object has been updated. Equals to _created_at_ if not updated after creation.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Optional. Use default forwarders to resolve queries for subzones.  Defaults to _true_.
	UseForwardersForSubzones *bool `json:"use_forwarders_for_subzones,omitempty"`
	// _use_root_forwarders_for_local_resolution_with_b1td_ allows DNS recursive queries sent to root forwarders for local resolution when deployed alongside BloxOne Thread Defense. Defaults to _false_.
	UseRootForwardersForLocalResolutionWithB1td *bool          `json:"use_root_forwarders_for_local_resolution_with_b1td,omitempty"`
	ZoneAuthority                               *ZoneAuthority `json:"zone_authority,omitempty"`
}

type _View View

// NewView instantiates a new View object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewView(name string) *View {
	this := View{}
	this.Name = name
	return &this
}

// NewViewWithDefaults instantiates a new View object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewWithDefaults() *View {
	this := View{}
	return &this
}

// GetAddEdnsOptionInOutgoingQuery returns the AddEdnsOptionInOutgoingQuery field value if set, zero value otherwise.
func (o *View) GetAddEdnsOptionInOutgoingQuery() bool {
	if o == nil || IsNil(o.AddEdnsOptionInOutgoingQuery) {
		var ret bool
		return ret
	}
	return *o.AddEdnsOptionInOutgoingQuery
}

// GetAddEdnsOptionInOutgoingQueryOk returns a tuple with the AddEdnsOptionInOutgoingQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetAddEdnsOptionInOutgoingQueryOk() (*bool, bool) {
	if o == nil || IsNil(o.AddEdnsOptionInOutgoingQuery) {
		return nil, false
	}
	return o.AddEdnsOptionInOutgoingQuery, true
}

// HasAddEdnsOptionInOutgoingQuery returns a boolean if a field has been set.
func (o *View) HasAddEdnsOptionInOutgoingQuery() bool {
	if o != nil && !IsNil(o.AddEdnsOptionInOutgoingQuery) {
		return true
	}

	return false
}

// SetAddEdnsOptionInOutgoingQuery gets a reference to the given bool and assigns it to the AddEdnsOptionInOutgoingQuery field.
func (o *View) SetAddEdnsOptionInOutgoingQuery(v bool) {
	o.AddEdnsOptionInOutgoingQuery = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *View) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *View) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *View) SetComment(v string) {
	o.Comment = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *View) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *View) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *View) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCustomRootNs returns the CustomRootNs field value if set, zero value otherwise.
func (o *View) GetCustomRootNs() []RootNS {
	if o == nil || IsNil(o.CustomRootNs) {
		var ret []RootNS
		return ret
	}
	return o.CustomRootNs
}

// GetCustomRootNsOk returns a tuple with the CustomRootNs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetCustomRootNsOk() ([]RootNS, bool) {
	if o == nil || IsNil(o.CustomRootNs) {
		return nil, false
	}
	return o.CustomRootNs, true
}

// HasCustomRootNs returns a boolean if a field has been set.
func (o *View) HasCustomRootNs() bool {
	if o != nil && !IsNil(o.CustomRootNs) {
		return true
	}

	return false
}

// SetCustomRootNs gets a reference to the given []RootNS and assigns it to the CustomRootNs field.
func (o *View) SetCustomRootNs(v []RootNS) {
	o.CustomRootNs = v
}

// GetCustomRootNsEnabled returns the CustomRootNsEnabled field value if set, zero value otherwise.
func (o *View) GetCustomRootNsEnabled() bool {
	if o == nil || IsNil(o.CustomRootNsEnabled) {
		var ret bool
		return ret
	}
	return *o.CustomRootNsEnabled
}

// GetCustomRootNsEnabledOk returns a tuple with the CustomRootNsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetCustomRootNsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CustomRootNsEnabled) {
		return nil, false
	}
	return o.CustomRootNsEnabled, true
}

// HasCustomRootNsEnabled returns a boolean if a field has been set.
func (o *View) HasCustomRootNsEnabled() bool {
	if o != nil && !IsNil(o.CustomRootNsEnabled) {
		return true
	}

	return false
}

// SetCustomRootNsEnabled gets a reference to the given bool and assigns it to the CustomRootNsEnabled field.
func (o *View) SetCustomRootNsEnabled(v bool) {
	o.CustomRootNsEnabled = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *View) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *View) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *View) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetDnssecEnableValidation returns the DnssecEnableValidation field value if set, zero value otherwise.
func (o *View) GetDnssecEnableValidation() bool {
	if o == nil || IsNil(o.DnssecEnableValidation) {
		var ret bool
		return ret
	}
	return *o.DnssecEnableValidation
}

// GetDnssecEnableValidationOk returns a tuple with the DnssecEnableValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDnssecEnableValidationOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecEnableValidation) {
		return nil, false
	}
	return o.DnssecEnableValidation, true
}

// HasDnssecEnableValidation returns a boolean if a field has been set.
func (o *View) HasDnssecEnableValidation() bool {
	if o != nil && !IsNil(o.DnssecEnableValidation) {
		return true
	}

	return false
}

// SetDnssecEnableValidation gets a reference to the given bool and assigns it to the DnssecEnableValidation field.
func (o *View) SetDnssecEnableValidation(v bool) {
	o.DnssecEnableValidation = &v
}

// GetDnssecEnabled returns the DnssecEnabled field value if set, zero value otherwise.
func (o *View) GetDnssecEnabled() bool {
	if o == nil || IsNil(o.DnssecEnabled) {
		var ret bool
		return ret
	}
	return *o.DnssecEnabled
}

// GetDnssecEnabledOk returns a tuple with the DnssecEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDnssecEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecEnabled) {
		return nil, false
	}
	return o.DnssecEnabled, true
}

// HasDnssecEnabled returns a boolean if a field has been set.
func (o *View) HasDnssecEnabled() bool {
	if o != nil && !IsNil(o.DnssecEnabled) {
		return true
	}

	return false
}

// SetDnssecEnabled gets a reference to the given bool and assigns it to the DnssecEnabled field.
func (o *View) SetDnssecEnabled(v bool) {
	o.DnssecEnabled = &v
}

// GetDnssecRootKeys returns the DnssecRootKeys field value if set, zero value otherwise.
func (o *View) GetDnssecRootKeys() []TrustAnchor {
	if o == nil || IsNil(o.DnssecRootKeys) {
		var ret []TrustAnchor
		return ret
	}
	return o.DnssecRootKeys
}

// GetDnssecRootKeysOk returns a tuple with the DnssecRootKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDnssecRootKeysOk() ([]TrustAnchor, bool) {
	if o == nil || IsNil(o.DnssecRootKeys) {
		return nil, false
	}
	return o.DnssecRootKeys, true
}

// HasDnssecRootKeys returns a boolean if a field has been set.
func (o *View) HasDnssecRootKeys() bool {
	if o != nil && !IsNil(o.DnssecRootKeys) {
		return true
	}

	return false
}

// SetDnssecRootKeys gets a reference to the given []TrustAnchor and assigns it to the DnssecRootKeys field.
func (o *View) SetDnssecRootKeys(v []TrustAnchor) {
	o.DnssecRootKeys = v
}

// GetDnssecTrustAnchors returns the DnssecTrustAnchors field value if set, zero value otherwise.
func (o *View) GetDnssecTrustAnchors() []TrustAnchor {
	if o == nil || IsNil(o.DnssecTrustAnchors) {
		var ret []TrustAnchor
		return ret
	}
	return o.DnssecTrustAnchors
}

// GetDnssecTrustAnchorsOk returns a tuple with the DnssecTrustAnchors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDnssecTrustAnchorsOk() ([]TrustAnchor, bool) {
	if o == nil || IsNil(o.DnssecTrustAnchors) {
		return nil, false
	}
	return o.DnssecTrustAnchors, true
}

// HasDnssecTrustAnchors returns a boolean if a field has been set.
func (o *View) HasDnssecTrustAnchors() bool {
	if o != nil && !IsNil(o.DnssecTrustAnchors) {
		return true
	}

	return false
}

// SetDnssecTrustAnchors gets a reference to the given []TrustAnchor and assigns it to the DnssecTrustAnchors field.
func (o *View) SetDnssecTrustAnchors(v []TrustAnchor) {
	o.DnssecTrustAnchors = v
}

// GetDnssecValidateExpiry returns the DnssecValidateExpiry field value if set, zero value otherwise.
func (o *View) GetDnssecValidateExpiry() bool {
	if o == nil || IsNil(o.DnssecValidateExpiry) {
		var ret bool
		return ret
	}
	return *o.DnssecValidateExpiry
}

// GetDnssecValidateExpiryOk returns a tuple with the DnssecValidateExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDnssecValidateExpiryOk() (*bool, bool) {
	if o == nil || IsNil(o.DnssecValidateExpiry) {
		return nil, false
	}
	return o.DnssecValidateExpiry, true
}

// HasDnssecValidateExpiry returns a boolean if a field has been set.
func (o *View) HasDnssecValidateExpiry() bool {
	if o != nil && !IsNil(o.DnssecValidateExpiry) {
		return true
	}

	return false
}

// SetDnssecValidateExpiry gets a reference to the given bool and assigns it to the DnssecValidateExpiry field.
func (o *View) SetDnssecValidateExpiry(v bool) {
	o.DnssecValidateExpiry = &v
}

// GetDtcConfig returns the DtcConfig field value if set, zero value otherwise.
func (o *View) GetDtcConfig() DTCConfig {
	if o == nil || IsNil(o.DtcConfig) {
		var ret DTCConfig
		return ret
	}
	return *o.DtcConfig
}

// GetDtcConfigOk returns a tuple with the DtcConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetDtcConfigOk() (*DTCConfig, bool) {
	if o == nil || IsNil(o.DtcConfig) {
		return nil, false
	}
	return o.DtcConfig, true
}

// HasDtcConfig returns a boolean if a field has been set.
func (o *View) HasDtcConfig() bool {
	if o != nil && !IsNil(o.DtcConfig) {
		return true
	}

	return false
}

// SetDtcConfig gets a reference to the given DTCConfig and assigns it to the DtcConfig field.
func (o *View) SetDtcConfig(v DTCConfig) {
	o.DtcConfig = &v
}

// GetEcsEnabled returns the EcsEnabled field value if set, zero value otherwise.
func (o *View) GetEcsEnabled() bool {
	if o == nil || IsNil(o.EcsEnabled) {
		var ret bool
		return ret
	}
	return *o.EcsEnabled
}

// GetEcsEnabledOk returns a tuple with the EcsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetEcsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EcsEnabled) {
		return nil, false
	}
	return o.EcsEnabled, true
}

// HasEcsEnabled returns a boolean if a field has been set.
func (o *View) HasEcsEnabled() bool {
	if o != nil && !IsNil(o.EcsEnabled) {
		return true
	}

	return false
}

// SetEcsEnabled gets a reference to the given bool and assigns it to the EcsEnabled field.
func (o *View) SetEcsEnabled(v bool) {
	o.EcsEnabled = &v
}

// GetEcsForwarding returns the EcsForwarding field value if set, zero value otherwise.
func (o *View) GetEcsForwarding() bool {
	if o == nil || IsNil(o.EcsForwarding) {
		var ret bool
		return ret
	}
	return *o.EcsForwarding
}

// GetEcsForwardingOk returns a tuple with the EcsForwarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetEcsForwardingOk() (*bool, bool) {
	if o == nil || IsNil(o.EcsForwarding) {
		return nil, false
	}
	return o.EcsForwarding, true
}

// HasEcsForwarding returns a boolean if a field has been set.
func (o *View) HasEcsForwarding() bool {
	if o != nil && !IsNil(o.EcsForwarding) {
		return true
	}

	return false
}

// SetEcsForwarding gets a reference to the given bool and assigns it to the EcsForwarding field.
func (o *View) SetEcsForwarding(v bool) {
	o.EcsForwarding = &v
}

// GetEcsPrefixV4 returns the EcsPrefixV4 field value if set, zero value otherwise.
func (o *View) GetEcsPrefixV4() int64 {
	if o == nil || IsNil(o.EcsPrefixV4) {
		var ret int64
		return ret
	}
	return *o.EcsPrefixV4
}

// GetEcsPrefixV4Ok returns a tuple with the EcsPrefixV4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetEcsPrefixV4Ok() (*int64, bool) {
	if o == nil || IsNil(o.EcsPrefixV4) {
		return nil, false
	}
	return o.EcsPrefixV4, true
}

// HasEcsPrefixV4 returns a boolean if a field has been set.
func (o *View) HasEcsPrefixV4() bool {
	if o != nil && !IsNil(o.EcsPrefixV4) {
		return true
	}

	return false
}

// SetEcsPrefixV4 gets a reference to the given int64 and assigns it to the EcsPrefixV4 field.
func (o *View) SetEcsPrefixV4(v int64) {
	o.EcsPrefixV4 = &v
}

// GetEcsPrefixV6 returns the EcsPrefixV6 field value if set, zero value otherwise.
func (o *View) GetEcsPrefixV6() int64 {
	if o == nil || IsNil(o.EcsPrefixV6) {
		var ret int64
		return ret
	}
	return *o.EcsPrefixV6
}

// GetEcsPrefixV6Ok returns a tuple with the EcsPrefixV6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetEcsPrefixV6Ok() (*int64, bool) {
	if o == nil || IsNil(o.EcsPrefixV6) {
		return nil, false
	}
	return o.EcsPrefixV6, true
}

// HasEcsPrefixV6 returns a boolean if a field has been set.
func (o *View) HasEcsPrefixV6() bool {
	if o != nil && !IsNil(o.EcsPrefixV6) {
		return true
	}

	return false
}

// SetEcsPrefixV6 gets a reference to the given int64 and assigns it to the EcsPrefixV6 field.
func (o *View) SetEcsPrefixV6(v int64) {
	o.EcsPrefixV6 = &v
}

// GetEcsZones returns the EcsZones field value if set, zero value otherwise.
func (o *View) GetEcsZones() []ECSZone {
	if o == nil || IsNil(o.EcsZones) {
		var ret []ECSZone
		return ret
	}
	return o.EcsZones
}

// GetEcsZonesOk returns a tuple with the EcsZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetEcsZonesOk() ([]ECSZone, bool) {
	if o == nil || IsNil(o.EcsZones) {
		return nil, false
	}
	return o.EcsZones, true
}

// HasEcsZones returns a boolean if a field has been set.
func (o *View) HasEcsZones() bool {
	if o != nil && !IsNil(o.EcsZones) {
		return true
	}

	return false
}

// SetEcsZones gets a reference to the given []ECSZone and assigns it to the EcsZones field.
func (o *View) SetEcsZones(v []ECSZone) {
	o.EcsZones = v
}

// GetEdnsUdpSize returns the EdnsUdpSize field value if set, zero value otherwise.
func (o *View) GetEdnsUdpSize() int64 {
	if o == nil || IsNil(o.EdnsUdpSize) {
		var ret int64
		return ret
	}
	return *o.EdnsUdpSize
}

// GetEdnsUdpSizeOk returns a tuple with the EdnsUdpSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetEdnsUdpSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.EdnsUdpSize) {
		return nil, false
	}
	return o.EdnsUdpSize, true
}

// HasEdnsUdpSize returns a boolean if a field has been set.
func (o *View) HasEdnsUdpSize() bool {
	if o != nil && !IsNil(o.EdnsUdpSize) {
		return true
	}

	return false
}

// SetEdnsUdpSize gets a reference to the given int64 and assigns it to the EdnsUdpSize field.
func (o *View) SetEdnsUdpSize(v int64) {
	o.EdnsUdpSize = &v
}

// GetFilterAaaaAcl returns the FilterAaaaAcl field value if set, zero value otherwise.
func (o *View) GetFilterAaaaAcl() []ACLItem {
	if o == nil || IsNil(o.FilterAaaaAcl) {
		var ret []ACLItem
		return ret
	}
	return o.FilterAaaaAcl
}

// GetFilterAaaaAclOk returns a tuple with the FilterAaaaAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetFilterAaaaAclOk() ([]ACLItem, bool) {
	if o == nil || IsNil(o.FilterAaaaAcl) {
		return nil, false
	}
	return o.FilterAaaaAcl, true
}

// HasFilterAaaaAcl returns a boolean if a field has been set.
func (o *View) HasFilterAaaaAcl() bool {
	if o != nil && !IsNil(o.FilterAaaaAcl) {
		return true
	}

	return false
}

// SetFilterAaaaAcl gets a reference to the given []ACLItem and assigns it to the FilterAaaaAcl field.
func (o *View) SetFilterAaaaAcl(v []ACLItem) {
	o.FilterAaaaAcl = v
}

// GetFilterAaaaOnV4 returns the FilterAaaaOnV4 field value if set, zero value otherwise.
func (o *View) GetFilterAaaaOnV4() string {
	if o == nil || IsNil(o.FilterAaaaOnV4) {
		var ret string
		return ret
	}
	return *o.FilterAaaaOnV4
}

// GetFilterAaaaOnV4Ok returns a tuple with the FilterAaaaOnV4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetFilterAaaaOnV4Ok() (*string, bool) {
	if o == nil || IsNil(o.FilterAaaaOnV4) {
		return nil, false
	}
	return o.FilterAaaaOnV4, true
}

// HasFilterAaaaOnV4 returns a boolean if a field has been set.
func (o *View) HasFilterAaaaOnV4() bool {
	if o != nil && !IsNil(o.FilterAaaaOnV4) {
		return true
	}

	return false
}

// SetFilterAaaaOnV4 gets a reference to the given string and assigns it to the FilterAaaaOnV4 field.
func (o *View) SetFilterAaaaOnV4(v string) {
	o.FilterAaaaOnV4 = &v
}

// GetForwarders returns the Forwarders field value if set, zero value otherwise.
func (o *View) GetForwarders() []Forwarder {
	if o == nil || IsNil(o.Forwarders) {
		var ret []Forwarder
		return ret
	}
	return o.Forwarders
}

// GetForwardersOk returns a tuple with the Forwarders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetForwardersOk() ([]Forwarder, bool) {
	if o == nil || IsNil(o.Forwarders) {
		return nil, false
	}
	return o.Forwarders, true
}

// HasForwarders returns a boolean if a field has been set.
func (o *View) HasForwarders() bool {
	if o != nil && !IsNil(o.Forwarders) {
		return true
	}

	return false
}

// SetForwarders gets a reference to the given []Forwarder and assigns it to the Forwarders field.
func (o *View) SetForwarders(v []Forwarder) {
	o.Forwarders = v
}

// GetForwardersOnly returns the ForwardersOnly field value if set, zero value otherwise.
func (o *View) GetForwardersOnly() bool {
	if o == nil || IsNil(o.ForwardersOnly) {
		var ret bool
		return ret
	}
	return *o.ForwardersOnly
}

// GetForwardersOnlyOk returns a tuple with the ForwardersOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetForwardersOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ForwardersOnly) {
		return nil, false
	}
	return o.ForwardersOnly, true
}

// HasForwardersOnly returns a boolean if a field has been set.
func (o *View) HasForwardersOnly() bool {
	if o != nil && !IsNil(o.ForwardersOnly) {
		return true
	}

	return false
}

// SetForwardersOnly gets a reference to the given bool and assigns it to the ForwardersOnly field.
func (o *View) SetForwardersOnly(v bool) {
	o.ForwardersOnly = &v
}

// GetGssTsigEnabled returns the GssTsigEnabled field value if set, zero value otherwise.
func (o *View) GetGssTsigEnabled() bool {
	if o == nil || IsNil(o.GssTsigEnabled) {
		var ret bool
		return ret
	}
	return *o.GssTsigEnabled
}

// GetGssTsigEnabledOk returns a tuple with the GssTsigEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetGssTsigEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.GssTsigEnabled) {
		return nil, false
	}
	return o.GssTsigEnabled, true
}

// HasGssTsigEnabled returns a boolean if a field has been set.
func (o *View) HasGssTsigEnabled() bool {
	if o != nil && !IsNil(o.GssTsigEnabled) {
		return true
	}

	return false
}

// SetGssTsigEnabled gets a reference to the given bool and assigns it to the GssTsigEnabled field.
func (o *View) SetGssTsigEnabled(v bool) {
	o.GssTsigEnabled = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *View) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *View) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *View) SetId(v string) {
	o.Id = &v
}

// GetInheritanceSources returns the InheritanceSources field value if set, zero value otherwise.
func (o *View) GetInheritanceSources() ViewInheritance {
	if o == nil || IsNil(o.InheritanceSources) {
		var ret ViewInheritance
		return ret
	}
	return *o.InheritanceSources
}

// GetInheritanceSourcesOk returns a tuple with the InheritanceSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetInheritanceSourcesOk() (*ViewInheritance, bool) {
	if o == nil || IsNil(o.InheritanceSources) {
		return nil, false
	}
	return o.InheritanceSources, true
}

// HasInheritanceSources returns a boolean if a field has been set.
func (o *View) HasInheritanceSources() bool {
	if o != nil && !IsNil(o.InheritanceSources) {
		return true
	}

	return false
}

// SetInheritanceSources gets a reference to the given ViewInheritance and assigns it to the InheritanceSources field.
func (o *View) SetInheritanceSources(v ViewInheritance) {
	o.InheritanceSources = &v
}

// GetIpSpaces returns the IpSpaces field value if set, zero value otherwise.
func (o *View) GetIpSpaces() []string {
	if o == nil || IsNil(o.IpSpaces) {
		var ret []string
		return ret
	}
	return o.IpSpaces
}

// GetIpSpacesOk returns a tuple with the IpSpaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetIpSpacesOk() ([]string, bool) {
	if o == nil || IsNil(o.IpSpaces) {
		return nil, false
	}
	return o.IpSpaces, true
}

// HasIpSpaces returns a boolean if a field has been set.
func (o *View) HasIpSpaces() bool {
	if o != nil && !IsNil(o.IpSpaces) {
		return true
	}

	return false
}

// SetIpSpaces gets a reference to the given []string and assigns it to the IpSpaces field.
func (o *View) SetIpSpaces(v []string) {
	o.IpSpaces = v
}

// GetLameTtl returns the LameTtl field value if set, zero value otherwise.
func (o *View) GetLameTtl() int64 {
	if o == nil || IsNil(o.LameTtl) {
		var ret int64
		return ret
	}
	return *o.LameTtl
}

// GetLameTtlOk returns a tuple with the LameTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetLameTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.LameTtl) {
		return nil, false
	}
	return o.LameTtl, true
}

// HasLameTtl returns a boolean if a field has been set.
func (o *View) HasLameTtl() bool {
	if o != nil && !IsNil(o.LameTtl) {
		return true
	}

	return false
}

// SetLameTtl gets a reference to the given int64 and assigns it to the LameTtl field.
func (o *View) SetLameTtl(v int64) {
	o.LameTtl = &v
}

// GetMatchClientsAcl returns the MatchClientsAcl field value if set, zero value otherwise.
func (o *View) GetMatchClientsAcl() []ACLItem {
	if o == nil || IsNil(o.MatchClientsAcl) {
		var ret []ACLItem
		return ret
	}
	return o.MatchClientsAcl
}

// GetMatchClientsAclOk returns a tuple with the MatchClientsAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetMatchClientsAclOk() ([]ACLItem, bool) {
	if o == nil || IsNil(o.MatchClientsAcl) {
		return nil, false
	}
	return o.MatchClientsAcl, true
}

// HasMatchClientsAcl returns a boolean if a field has been set.
func (o *View) HasMatchClientsAcl() bool {
	if o != nil && !IsNil(o.MatchClientsAcl) {
		return true
	}

	return false
}

// SetMatchClientsAcl gets a reference to the given []ACLItem and assigns it to the MatchClientsAcl field.
func (o *View) SetMatchClientsAcl(v []ACLItem) {
	o.MatchClientsAcl = v
}

// GetMatchDestinationsAcl returns the MatchDestinationsAcl field value if set, zero value otherwise.
func (o *View) GetMatchDestinationsAcl() []ACLItem {
	if o == nil || IsNil(o.MatchDestinationsAcl) {
		var ret []ACLItem
		return ret
	}
	return o.MatchDestinationsAcl
}

// GetMatchDestinationsAclOk returns a tuple with the MatchDestinationsAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetMatchDestinationsAclOk() ([]ACLItem, bool) {
	if o == nil || IsNil(o.MatchDestinationsAcl) {
		return nil, false
	}
	return o.MatchDestinationsAcl, true
}

// HasMatchDestinationsAcl returns a boolean if a field has been set.
func (o *View) HasMatchDestinationsAcl() bool {
	if o != nil && !IsNil(o.MatchDestinationsAcl) {
		return true
	}

	return false
}

// SetMatchDestinationsAcl gets a reference to the given []ACLItem and assigns it to the MatchDestinationsAcl field.
func (o *View) SetMatchDestinationsAcl(v []ACLItem) {
	o.MatchDestinationsAcl = v
}

// GetMatchRecursiveOnly returns the MatchRecursiveOnly field value if set, zero value otherwise.
func (o *View) GetMatchRecursiveOnly() bool {
	if o == nil || IsNil(o.MatchRecursiveOnly) {
		var ret bool
		return ret
	}
	return *o.MatchRecursiveOnly
}

// GetMatchRecursiveOnlyOk returns a tuple with the MatchRecursiveOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetMatchRecursiveOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.MatchRecursiveOnly) {
		return nil, false
	}
	return o.MatchRecursiveOnly, true
}

// HasMatchRecursiveOnly returns a boolean if a field has been set.
func (o *View) HasMatchRecursiveOnly() bool {
	if o != nil && !IsNil(o.MatchRecursiveOnly) {
		return true
	}

	return false
}

// SetMatchRecursiveOnly gets a reference to the given bool and assigns it to the MatchRecursiveOnly field.
func (o *View) SetMatchRecursiveOnly(v bool) {
	o.MatchRecursiveOnly = &v
}

// GetMaxCacheTtl returns the MaxCacheTtl field value if set, zero value otherwise.
func (o *View) GetMaxCacheTtl() int64 {
	if o == nil || IsNil(o.MaxCacheTtl) {
		var ret int64
		return ret
	}
	return *o.MaxCacheTtl
}

// GetMaxCacheTtlOk returns a tuple with the MaxCacheTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetMaxCacheTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxCacheTtl) {
		return nil, false
	}
	return o.MaxCacheTtl, true
}

// HasMaxCacheTtl returns a boolean if a field has been set.
func (o *View) HasMaxCacheTtl() bool {
	if o != nil && !IsNil(o.MaxCacheTtl) {
		return true
	}

	return false
}

// SetMaxCacheTtl gets a reference to the given int64 and assigns it to the MaxCacheTtl field.
func (o *View) SetMaxCacheTtl(v int64) {
	o.MaxCacheTtl = &v
}

// GetMaxNegativeTtl returns the MaxNegativeTtl field value if set, zero value otherwise.
func (o *View) GetMaxNegativeTtl() int64 {
	if o == nil || IsNil(o.MaxNegativeTtl) {
		var ret int64
		return ret
	}
	return *o.MaxNegativeTtl
}

// GetMaxNegativeTtlOk returns a tuple with the MaxNegativeTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetMaxNegativeTtlOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxNegativeTtl) {
		return nil, false
	}
	return o.MaxNegativeTtl, true
}

// HasMaxNegativeTtl returns a boolean if a field has been set.
func (o *View) HasMaxNegativeTtl() bool {
	if o != nil && !IsNil(o.MaxNegativeTtl) {
		return true
	}

	return false
}

// SetMaxNegativeTtl gets a reference to the given int64 and assigns it to the MaxNegativeTtl field.
func (o *View) SetMaxNegativeTtl(v int64) {
	o.MaxNegativeTtl = &v
}

// GetMaxUdpSize returns the MaxUdpSize field value if set, zero value otherwise.
func (o *View) GetMaxUdpSize() int64 {
	if o == nil || IsNil(o.MaxUdpSize) {
		var ret int64
		return ret
	}
	return *o.MaxUdpSize
}

// GetMaxUdpSizeOk returns a tuple with the MaxUdpSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetMaxUdpSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxUdpSize) {
		return nil, false
	}
	return o.MaxUdpSize, true
}

// HasMaxUdpSize returns a boolean if a field has been set.
func (o *View) HasMaxUdpSize() bool {
	if o != nil && !IsNil(o.MaxUdpSize) {
		return true
	}

	return false
}

// SetMaxUdpSize gets a reference to the given int64 and assigns it to the MaxUdpSize field.
func (o *View) SetMaxUdpSize(v int64) {
	o.MaxUdpSize = &v
}

// GetMinimalResponses returns the MinimalResponses field value if set, zero value otherwise.
func (o *View) GetMinimalResponses() bool {
	if o == nil || IsNil(o.MinimalResponses) {
		var ret bool
		return ret
	}
	return *o.MinimalResponses
}

// GetMinimalResponsesOk returns a tuple with the MinimalResponses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetMinimalResponsesOk() (*bool, bool) {
	if o == nil || IsNil(o.MinimalResponses) {
		return nil, false
	}
	return o.MinimalResponses, true
}

// HasMinimalResponses returns a boolean if a field has been set.
func (o *View) HasMinimalResponses() bool {
	if o != nil && !IsNil(o.MinimalResponses) {
		return true
	}

	return false
}

// SetMinimalResponses gets a reference to the given bool and assigns it to the MinimalResponses field.
func (o *View) SetMinimalResponses(v bool) {
	o.MinimalResponses = &v
}

// GetName returns the Name field value
func (o *View) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *View) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *View) SetName(v string) {
	o.Name = v
}

// GetNotify returns the Notify field value if set, zero value otherwise.
func (o *View) GetNotify() bool {
	if o == nil || IsNil(o.Notify) {
		var ret bool
		return ret
	}
	return *o.Notify
}

// GetNotifyOk returns a tuple with the Notify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.Notify) {
		return nil, false
	}
	return o.Notify, true
}

// HasNotify returns a boolean if a field has been set.
func (o *View) HasNotify() bool {
	if o != nil && !IsNil(o.Notify) {
		return true
	}

	return false
}

// SetNotify gets a reference to the given bool and assigns it to the Notify field.
func (o *View) SetNotify(v bool) {
	o.Notify = &v
}

// GetQueryAcl returns the QueryAcl field value if set, zero value otherwise.
func (o *View) GetQueryAcl() []ACLItem {
	if o == nil || IsNil(o.QueryAcl) {
		var ret []ACLItem
		return ret
	}
	return o.QueryAcl
}

// GetQueryAclOk returns a tuple with the QueryAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetQueryAclOk() ([]ACLItem, bool) {
	if o == nil || IsNil(o.QueryAcl) {
		return nil, false
	}
	return o.QueryAcl, true
}

// HasQueryAcl returns a boolean if a field has been set.
func (o *View) HasQueryAcl() bool {
	if o != nil && !IsNil(o.QueryAcl) {
		return true
	}

	return false
}

// SetQueryAcl gets a reference to the given []ACLItem and assigns it to the QueryAcl field.
func (o *View) SetQueryAcl(v []ACLItem) {
	o.QueryAcl = v
}

// GetRecursionAcl returns the RecursionAcl field value if set, zero value otherwise.
func (o *View) GetRecursionAcl() []ACLItem {
	if o == nil || IsNil(o.RecursionAcl) {
		var ret []ACLItem
		return ret
	}
	return o.RecursionAcl
}

// GetRecursionAclOk returns a tuple with the RecursionAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetRecursionAclOk() ([]ACLItem, bool) {
	if o == nil || IsNil(o.RecursionAcl) {
		return nil, false
	}
	return o.RecursionAcl, true
}

// HasRecursionAcl returns a boolean if a field has been set.
func (o *View) HasRecursionAcl() bool {
	if o != nil && !IsNil(o.RecursionAcl) {
		return true
	}

	return false
}

// SetRecursionAcl gets a reference to the given []ACLItem and assigns it to the RecursionAcl field.
func (o *View) SetRecursionAcl(v []ACLItem) {
	o.RecursionAcl = v
}

// GetRecursionEnabled returns the RecursionEnabled field value if set, zero value otherwise.
func (o *View) GetRecursionEnabled() bool {
	if o == nil || IsNil(o.RecursionEnabled) {
		var ret bool
		return ret
	}
	return *o.RecursionEnabled
}

// GetRecursionEnabledOk returns a tuple with the RecursionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetRecursionEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RecursionEnabled) {
		return nil, false
	}
	return o.RecursionEnabled, true
}

// HasRecursionEnabled returns a boolean if a field has been set.
func (o *View) HasRecursionEnabled() bool {
	if o != nil && !IsNil(o.RecursionEnabled) {
		return true
	}

	return false
}

// SetRecursionEnabled gets a reference to the given bool and assigns it to the RecursionEnabled field.
func (o *View) SetRecursionEnabled(v bool) {
	o.RecursionEnabled = &v
}

// GetSortList returns the SortList field value if set, zero value otherwise.
func (o *View) GetSortList() []SortListItem {
	if o == nil || IsNil(o.SortList) {
		var ret []SortListItem
		return ret
	}
	return o.SortList
}

// GetSortListOk returns a tuple with the SortList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetSortListOk() ([]SortListItem, bool) {
	if o == nil || IsNil(o.SortList) {
		return nil, false
	}
	return o.SortList, true
}

// HasSortList returns a boolean if a field has been set.
func (o *View) HasSortList() bool {
	if o != nil && !IsNil(o.SortList) {
		return true
	}

	return false
}

// SetSortList gets a reference to the given []SortListItem and assigns it to the SortList field.
func (o *View) SetSortList(v []SortListItem) {
	o.SortList = v
}

// GetSynthesizeAddressRecordsFromHttps returns the SynthesizeAddressRecordsFromHttps field value if set, zero value otherwise.
func (o *View) GetSynthesizeAddressRecordsFromHttps() bool {
	if o == nil || IsNil(o.SynthesizeAddressRecordsFromHttps) {
		var ret bool
		return ret
	}
	return *o.SynthesizeAddressRecordsFromHttps
}

// GetSynthesizeAddressRecordsFromHttpsOk returns a tuple with the SynthesizeAddressRecordsFromHttps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetSynthesizeAddressRecordsFromHttpsOk() (*bool, bool) {
	if o == nil || IsNil(o.SynthesizeAddressRecordsFromHttps) {
		return nil, false
	}
	return o.SynthesizeAddressRecordsFromHttps, true
}

// HasSynthesizeAddressRecordsFromHttps returns a boolean if a field has been set.
func (o *View) HasSynthesizeAddressRecordsFromHttps() bool {
	if o != nil && !IsNil(o.SynthesizeAddressRecordsFromHttps) {
		return true
	}

	return false
}

// SetSynthesizeAddressRecordsFromHttps gets a reference to the given bool and assigns it to the SynthesizeAddressRecordsFromHttps field.
func (o *View) SetSynthesizeAddressRecordsFromHttps(v bool) {
	o.SynthesizeAddressRecordsFromHttps = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *View) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *View) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *View) SetTags(v map[string]interface{}) {
	o.Tags = v
}

// GetTransferAcl returns the TransferAcl field value if set, zero value otherwise.
func (o *View) GetTransferAcl() []ACLItem {
	if o == nil || IsNil(o.TransferAcl) {
		var ret []ACLItem
		return ret
	}
	return o.TransferAcl
}

// GetTransferAclOk returns a tuple with the TransferAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetTransferAclOk() ([]ACLItem, bool) {
	if o == nil || IsNil(o.TransferAcl) {
		return nil, false
	}
	return o.TransferAcl, true
}

// HasTransferAcl returns a boolean if a field has been set.
func (o *View) HasTransferAcl() bool {
	if o != nil && !IsNil(o.TransferAcl) {
		return true
	}

	return false
}

// SetTransferAcl gets a reference to the given []ACLItem and assigns it to the TransferAcl field.
func (o *View) SetTransferAcl(v []ACLItem) {
	o.TransferAcl = v
}

// GetUpdateAcl returns the UpdateAcl field value if set, zero value otherwise.
func (o *View) GetUpdateAcl() []ACLItem {
	if o == nil || IsNil(o.UpdateAcl) {
		var ret []ACLItem
		return ret
	}
	return o.UpdateAcl
}

// GetUpdateAclOk returns a tuple with the UpdateAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUpdateAclOk() ([]ACLItem, bool) {
	if o == nil || IsNil(o.UpdateAcl) {
		return nil, false
	}
	return o.UpdateAcl, true
}

// HasUpdateAcl returns a boolean if a field has been set.
func (o *View) HasUpdateAcl() bool {
	if o != nil && !IsNil(o.UpdateAcl) {
		return true
	}

	return false
}

// SetUpdateAcl gets a reference to the given []ACLItem and assigns it to the UpdateAcl field.
func (o *View) SetUpdateAcl(v []ACLItem) {
	o.UpdateAcl = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *View) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *View) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *View) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUseForwardersForSubzones returns the UseForwardersForSubzones field value if set, zero value otherwise.
func (o *View) GetUseForwardersForSubzones() bool {
	if o == nil || IsNil(o.UseForwardersForSubzones) {
		var ret bool
		return ret
	}
	return *o.UseForwardersForSubzones
}

// GetUseForwardersForSubzonesOk returns a tuple with the UseForwardersForSubzones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseForwardersForSubzonesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseForwardersForSubzones) {
		return nil, false
	}
	return o.UseForwardersForSubzones, true
}

// HasUseForwardersForSubzones returns a boolean if a field has been set.
func (o *View) HasUseForwardersForSubzones() bool {
	if o != nil && !IsNil(o.UseForwardersForSubzones) {
		return true
	}

	return false
}

// SetUseForwardersForSubzones gets a reference to the given bool and assigns it to the UseForwardersForSubzones field.
func (o *View) SetUseForwardersForSubzones(v bool) {
	o.UseForwardersForSubzones = &v
}

// GetUseRootForwardersForLocalResolutionWithB1td returns the UseRootForwardersForLocalResolutionWithB1td field value if set, zero value otherwise.
func (o *View) GetUseRootForwardersForLocalResolutionWithB1td() bool {
	if o == nil || IsNil(o.UseRootForwardersForLocalResolutionWithB1td) {
		var ret bool
		return ret
	}
	return *o.UseRootForwardersForLocalResolutionWithB1td
}

// GetUseRootForwardersForLocalResolutionWithB1tdOk returns a tuple with the UseRootForwardersForLocalResolutionWithB1td field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetUseRootForwardersForLocalResolutionWithB1tdOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRootForwardersForLocalResolutionWithB1td) {
		return nil, false
	}
	return o.UseRootForwardersForLocalResolutionWithB1td, true
}

// HasUseRootForwardersForLocalResolutionWithB1td returns a boolean if a field has been set.
func (o *View) HasUseRootForwardersForLocalResolutionWithB1td() bool {
	if o != nil && !IsNil(o.UseRootForwardersForLocalResolutionWithB1td) {
		return true
	}

	return false
}

// SetUseRootForwardersForLocalResolutionWithB1td gets a reference to the given bool and assigns it to the UseRootForwardersForLocalResolutionWithB1td field.
func (o *View) SetUseRootForwardersForLocalResolutionWithB1td(v bool) {
	o.UseRootForwardersForLocalResolutionWithB1td = &v
}

// GetZoneAuthority returns the ZoneAuthority field value if set, zero value otherwise.
func (o *View) GetZoneAuthority() ZoneAuthority {
	if o == nil || IsNil(o.ZoneAuthority) {
		var ret ZoneAuthority
		return ret
	}
	return *o.ZoneAuthority
}

// GetZoneAuthorityOk returns a tuple with the ZoneAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetZoneAuthorityOk() (*ZoneAuthority, bool) {
	if o == nil || IsNil(o.ZoneAuthority) {
		return nil, false
	}
	return o.ZoneAuthority, true
}

// HasZoneAuthority returns a boolean if a field has been set.
func (o *View) HasZoneAuthority() bool {
	if o != nil && !IsNil(o.ZoneAuthority) {
		return true
	}

	return false
}

// SetZoneAuthority gets a reference to the given ZoneAuthority and assigns it to the ZoneAuthority field.
func (o *View) SetZoneAuthority(v ZoneAuthority) {
	o.ZoneAuthority = &v
}

func (o View) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o View) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddEdnsOptionInOutgoingQuery) {
		toSerialize["add_edns_option_in_outgoing_query"] = o.AddEdnsOptionInOutgoingQuery
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.CustomRootNs) {
		toSerialize["custom_root_ns"] = o.CustomRootNs
	}
	if !IsNil(o.CustomRootNsEnabled) {
		toSerialize["custom_root_ns_enabled"] = o.CustomRootNsEnabled
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.DnssecEnableValidation) {
		toSerialize["dnssec_enable_validation"] = o.DnssecEnableValidation
	}
	if !IsNil(o.DnssecEnabled) {
		toSerialize["dnssec_enabled"] = o.DnssecEnabled
	}
	if !IsNil(o.DnssecRootKeys) {
		toSerialize["dnssec_root_keys"] = o.DnssecRootKeys
	}
	if !IsNil(o.DnssecTrustAnchors) {
		toSerialize["dnssec_trust_anchors"] = o.DnssecTrustAnchors
	}
	if !IsNil(o.DnssecValidateExpiry) {
		toSerialize["dnssec_validate_expiry"] = o.DnssecValidateExpiry
	}
	if !IsNil(o.DtcConfig) {
		toSerialize["dtc_config"] = o.DtcConfig
	}
	if !IsNil(o.EcsEnabled) {
		toSerialize["ecs_enabled"] = o.EcsEnabled
	}
	if !IsNil(o.EcsForwarding) {
		toSerialize["ecs_forwarding"] = o.EcsForwarding
	}
	if !IsNil(o.EcsPrefixV4) {
		toSerialize["ecs_prefix_v4"] = o.EcsPrefixV4
	}
	if !IsNil(o.EcsPrefixV6) {
		toSerialize["ecs_prefix_v6"] = o.EcsPrefixV6
	}
	if !IsNil(o.EcsZones) {
		toSerialize["ecs_zones"] = o.EcsZones
	}
	if !IsNil(o.EdnsUdpSize) {
		toSerialize["edns_udp_size"] = o.EdnsUdpSize
	}
	if !IsNil(o.FilterAaaaAcl) {
		toSerialize["filter_aaaa_acl"] = o.FilterAaaaAcl
	}
	if !IsNil(o.FilterAaaaOnV4) {
		toSerialize["filter_aaaa_on_v4"] = o.FilterAaaaOnV4
	}
	if !IsNil(o.Forwarders) {
		toSerialize["forwarders"] = o.Forwarders
	}
	if !IsNil(o.ForwardersOnly) {
		toSerialize["forwarders_only"] = o.ForwardersOnly
	}
	if !IsNil(o.GssTsigEnabled) {
		toSerialize["gss_tsig_enabled"] = o.GssTsigEnabled
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InheritanceSources) {
		toSerialize["inheritance_sources"] = o.InheritanceSources
	}
	if !IsNil(o.IpSpaces) {
		toSerialize["ip_spaces"] = o.IpSpaces
	}
	if !IsNil(o.LameTtl) {
		toSerialize["lame_ttl"] = o.LameTtl
	}
	if !IsNil(o.MatchClientsAcl) {
		toSerialize["match_clients_acl"] = o.MatchClientsAcl
	}
	if !IsNil(o.MatchDestinationsAcl) {
		toSerialize["match_destinations_acl"] = o.MatchDestinationsAcl
	}
	if !IsNil(o.MatchRecursiveOnly) {
		toSerialize["match_recursive_only"] = o.MatchRecursiveOnly
	}
	if !IsNil(o.MaxCacheTtl) {
		toSerialize["max_cache_ttl"] = o.MaxCacheTtl
	}
	if !IsNil(o.MaxNegativeTtl) {
		toSerialize["max_negative_ttl"] = o.MaxNegativeTtl
	}
	if !IsNil(o.MaxUdpSize) {
		toSerialize["max_udp_size"] = o.MaxUdpSize
	}
	if !IsNil(o.MinimalResponses) {
		toSerialize["minimal_responses"] = o.MinimalResponses
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Notify) {
		toSerialize["notify"] = o.Notify
	}
	if !IsNil(o.QueryAcl) {
		toSerialize["query_acl"] = o.QueryAcl
	}
	if !IsNil(o.RecursionAcl) {
		toSerialize["recursion_acl"] = o.RecursionAcl
	}
	if !IsNil(o.RecursionEnabled) {
		toSerialize["recursion_enabled"] = o.RecursionEnabled
	}
	if !IsNil(o.SortList) {
		toSerialize["sort_list"] = o.SortList
	}
	if !IsNil(o.SynthesizeAddressRecordsFromHttps) {
		toSerialize["synthesize_address_records_from_https"] = o.SynthesizeAddressRecordsFromHttps
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.TransferAcl) {
		toSerialize["transfer_acl"] = o.TransferAcl
	}
	if !IsNil(o.UpdateAcl) {
		toSerialize["update_acl"] = o.UpdateAcl
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.UseForwardersForSubzones) {
		toSerialize["use_forwarders_for_subzones"] = o.UseForwardersForSubzones
	}
	if !IsNil(o.UseRootForwardersForLocalResolutionWithB1td) {
		toSerialize["use_root_forwarders_for_local_resolution_with_b1td"] = o.UseRootForwardersForLocalResolutionWithB1td
	}
	if !IsNil(o.ZoneAuthority) {
		toSerialize["zone_authority"] = o.ZoneAuthority
	}
	return toSerialize, nil
}

func (o *View) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varView := _View{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varView)

	if err != nil {
		return err
	}

	*o = View(varView)

	return err
}

type NullableView struct {
	value *View
	isSet bool
}

func (v NullableView) Get() *View {
	return v.value
}

func (v *NullableView) Set(val *View) {
	v.value = val
	v.isSet = true
}

func (v NullableView) IsSet() bool {
	return v.isSet
}

func (v *NullableView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableView(val *View) *NullableView {
	return &NullableView{value: val, isSet: true}
}

func (v NullableView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
