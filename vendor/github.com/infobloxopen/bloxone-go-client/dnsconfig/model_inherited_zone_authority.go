/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsconfig

import (
	"encoding/json"
)

// checks if the InheritedZoneAuthority type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InheritedZoneAuthority{}

// InheritedZoneAuthority Inheritance configuration for a field of type _ZoneAuthority_.
type InheritedZoneAuthority struct {
	DefaultTtl           *Inheritance2InheritedUInt32      `json:"default_ttl,omitempty"`
	Expire               *Inheritance2InheritedUInt32      `json:"expire,omitempty"`
	MnameBlock           *InheritedZoneAuthorityMNameBlock `json:"mname_block,omitempty"`
	NegativeTtl          *Inheritance2InheritedUInt32      `json:"negative_ttl,omitempty"`
	ProtocolRname        *Inheritance2InheritedString      `json:"protocol_rname,omitempty"`
	Refresh              *Inheritance2InheritedUInt32      `json:"refresh,omitempty"`
	Retry                *Inheritance2InheritedUInt32      `json:"retry,omitempty"`
	Rname                *Inheritance2InheritedString      `json:"rname,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InheritedZoneAuthority InheritedZoneAuthority

// NewInheritedZoneAuthority instantiates a new InheritedZoneAuthority object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInheritedZoneAuthority() *InheritedZoneAuthority {
	this := InheritedZoneAuthority{}
	return &this
}

// NewInheritedZoneAuthorityWithDefaults instantiates a new InheritedZoneAuthority object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInheritedZoneAuthorityWithDefaults() *InheritedZoneAuthority {
	this := InheritedZoneAuthority{}
	return &this
}

// GetDefaultTtl returns the DefaultTtl field value if set, zero value otherwise.
func (o *InheritedZoneAuthority) GetDefaultTtl() Inheritance2InheritedUInt32 {
	if o == nil || IsNil(o.DefaultTtl) {
		var ret Inheritance2InheritedUInt32
		return ret
	}
	return *o.DefaultTtl
}

// GetDefaultTtlOk returns a tuple with the DefaultTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InheritedZoneAuthority) GetDefaultTtlOk() (*Inheritance2InheritedUInt32, bool) {
	if o == nil || IsNil(o.DefaultTtl) {
		return nil, false
	}
	return o.DefaultTtl, true
}

// HasDefaultTtl returns a boolean if a field has been set.
func (o *InheritedZoneAuthority) HasDefaultTtl() bool {
	if o != nil && !IsNil(o.DefaultTtl) {
		return true
	}

	return false
}

// SetDefaultTtl gets a reference to the given Inheritance2InheritedUInt32 and assigns it to the DefaultTtl field.
func (o *InheritedZoneAuthority) SetDefaultTtl(v Inheritance2InheritedUInt32) {
	o.DefaultTtl = &v
}

// GetExpire returns the Expire field value if set, zero value otherwise.
func (o *InheritedZoneAuthority) GetExpire() Inheritance2InheritedUInt32 {
	if o == nil || IsNil(o.Expire) {
		var ret Inheritance2InheritedUInt32
		return ret
	}
	return *o.Expire
}

// GetExpireOk returns a tuple with the Expire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InheritedZoneAuthority) GetExpireOk() (*Inheritance2InheritedUInt32, bool) {
	if o == nil || IsNil(o.Expire) {
		return nil, false
	}
	return o.Expire, true
}

// HasExpire returns a boolean if a field has been set.
func (o *InheritedZoneAuthority) HasExpire() bool {
	if o != nil && !IsNil(o.Expire) {
		return true
	}

	return false
}

// SetExpire gets a reference to the given Inheritance2InheritedUInt32 and assigns it to the Expire field.
func (o *InheritedZoneAuthority) SetExpire(v Inheritance2InheritedUInt32) {
	o.Expire = &v
}

// GetMnameBlock returns the MnameBlock field value if set, zero value otherwise.
func (o *InheritedZoneAuthority) GetMnameBlock() InheritedZoneAuthorityMNameBlock {
	if o == nil || IsNil(o.MnameBlock) {
		var ret InheritedZoneAuthorityMNameBlock
		return ret
	}
	return *o.MnameBlock
}

// GetMnameBlockOk returns a tuple with the MnameBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InheritedZoneAuthority) GetMnameBlockOk() (*InheritedZoneAuthorityMNameBlock, bool) {
	if o == nil || IsNil(o.MnameBlock) {
		return nil, false
	}
	return o.MnameBlock, true
}

// HasMnameBlock returns a boolean if a field has been set.
func (o *InheritedZoneAuthority) HasMnameBlock() bool {
	if o != nil && !IsNil(o.MnameBlock) {
		return true
	}

	return false
}

// SetMnameBlock gets a reference to the given InheritedZoneAuthorityMNameBlock and assigns it to the MnameBlock field.
func (o *InheritedZoneAuthority) SetMnameBlock(v InheritedZoneAuthorityMNameBlock) {
	o.MnameBlock = &v
}

// GetNegativeTtl returns the NegativeTtl field value if set, zero value otherwise.
func (o *InheritedZoneAuthority) GetNegativeTtl() Inheritance2InheritedUInt32 {
	if o == nil || IsNil(o.NegativeTtl) {
		var ret Inheritance2InheritedUInt32
		return ret
	}
	return *o.NegativeTtl
}

// GetNegativeTtlOk returns a tuple with the NegativeTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InheritedZoneAuthority) GetNegativeTtlOk() (*Inheritance2InheritedUInt32, bool) {
	if o == nil || IsNil(o.NegativeTtl) {
		return nil, false
	}
	return o.NegativeTtl, true
}

// HasNegativeTtl returns a boolean if a field has been set.
func (o *InheritedZoneAuthority) HasNegativeTtl() bool {
	if o != nil && !IsNil(o.NegativeTtl) {
		return true
	}

	return false
}

// SetNegativeTtl gets a reference to the given Inheritance2InheritedUInt32 and assigns it to the NegativeTtl field.
func (o *InheritedZoneAuthority) SetNegativeTtl(v Inheritance2InheritedUInt32) {
	o.NegativeTtl = &v
}

// GetProtocolRname returns the ProtocolRname field value if set, zero value otherwise.
func (o *InheritedZoneAuthority) GetProtocolRname() Inheritance2InheritedString {
	if o == nil || IsNil(o.ProtocolRname) {
		var ret Inheritance2InheritedString
		return ret
	}
	return *o.ProtocolRname
}

// GetProtocolRnameOk returns a tuple with the ProtocolRname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InheritedZoneAuthority) GetProtocolRnameOk() (*Inheritance2InheritedString, bool) {
	if o == nil || IsNil(o.ProtocolRname) {
		return nil, false
	}
	return o.ProtocolRname, true
}

// HasProtocolRname returns a boolean if a field has been set.
func (o *InheritedZoneAuthority) HasProtocolRname() bool {
	if o != nil && !IsNil(o.ProtocolRname) {
		return true
	}

	return false
}

// SetProtocolRname gets a reference to the given Inheritance2InheritedString and assigns it to the ProtocolRname field.
func (o *InheritedZoneAuthority) SetProtocolRname(v Inheritance2InheritedString) {
	o.ProtocolRname = &v
}

// GetRefresh returns the Refresh field value if set, zero value otherwise.
func (o *InheritedZoneAuthority) GetRefresh() Inheritance2InheritedUInt32 {
	if o == nil || IsNil(o.Refresh) {
		var ret Inheritance2InheritedUInt32
		return ret
	}
	return *o.Refresh
}

// GetRefreshOk returns a tuple with the Refresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InheritedZoneAuthority) GetRefreshOk() (*Inheritance2InheritedUInt32, bool) {
	if o == nil || IsNil(o.Refresh) {
		return nil, false
	}
	return o.Refresh, true
}

// HasRefresh returns a boolean if a field has been set.
func (o *InheritedZoneAuthority) HasRefresh() bool {
	if o != nil && !IsNil(o.Refresh) {
		return true
	}

	return false
}

// SetRefresh gets a reference to the given Inheritance2InheritedUInt32 and assigns it to the Refresh field.
func (o *InheritedZoneAuthority) SetRefresh(v Inheritance2InheritedUInt32) {
	o.Refresh = &v
}

// GetRetry returns the Retry field value if set, zero value otherwise.
func (o *InheritedZoneAuthority) GetRetry() Inheritance2InheritedUInt32 {
	if o == nil || IsNil(o.Retry) {
		var ret Inheritance2InheritedUInt32
		return ret
	}
	return *o.Retry
}

// GetRetryOk returns a tuple with the Retry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InheritedZoneAuthority) GetRetryOk() (*Inheritance2InheritedUInt32, bool) {
	if o == nil || IsNil(o.Retry) {
		return nil, false
	}
	return o.Retry, true
}

// HasRetry returns a boolean if a field has been set.
func (o *InheritedZoneAuthority) HasRetry() bool {
	if o != nil && !IsNil(o.Retry) {
		return true
	}

	return false
}

// SetRetry gets a reference to the given Inheritance2InheritedUInt32 and assigns it to the Retry field.
func (o *InheritedZoneAuthority) SetRetry(v Inheritance2InheritedUInt32) {
	o.Retry = &v
}

// GetRname returns the Rname field value if set, zero value otherwise.
func (o *InheritedZoneAuthority) GetRname() Inheritance2InheritedString {
	if o == nil || IsNil(o.Rname) {
		var ret Inheritance2InheritedString
		return ret
	}
	return *o.Rname
}

// GetRnameOk returns a tuple with the Rname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InheritedZoneAuthority) GetRnameOk() (*Inheritance2InheritedString, bool) {
	if o == nil || IsNil(o.Rname) {
		return nil, false
	}
	return o.Rname, true
}

// HasRname returns a boolean if a field has been set.
func (o *InheritedZoneAuthority) HasRname() bool {
	if o != nil && !IsNil(o.Rname) {
		return true
	}

	return false
}

// SetRname gets a reference to the given Inheritance2InheritedString and assigns it to the Rname field.
func (o *InheritedZoneAuthority) SetRname(v Inheritance2InheritedString) {
	o.Rname = &v
}

func (o InheritedZoneAuthority) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InheritedZoneAuthority) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultTtl) {
		toSerialize["default_ttl"] = o.DefaultTtl
	}
	if !IsNil(o.Expire) {
		toSerialize["expire"] = o.Expire
	}
	if !IsNil(o.MnameBlock) {
		toSerialize["mname_block"] = o.MnameBlock
	}
	if !IsNil(o.NegativeTtl) {
		toSerialize["negative_ttl"] = o.NegativeTtl
	}
	if !IsNil(o.ProtocolRname) {
		toSerialize["protocol_rname"] = o.ProtocolRname
	}
	if !IsNil(o.Refresh) {
		toSerialize["refresh"] = o.Refresh
	}
	if !IsNil(o.Retry) {
		toSerialize["retry"] = o.Retry
	}
	if !IsNil(o.Rname) {
		toSerialize["rname"] = o.Rname
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InheritedZoneAuthority) UnmarshalJSON(data []byte) (err error) {
	varInheritedZoneAuthority := _InheritedZoneAuthority{}

	err = json.Unmarshal(data, &varInheritedZoneAuthority)

	if err != nil {
		return err
	}

	*o = InheritedZoneAuthority(varInheritedZoneAuthority)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "default_ttl")
		delete(additionalProperties, "expire")
		delete(additionalProperties, "mname_block")
		delete(additionalProperties, "negative_ttl")
		delete(additionalProperties, "protocol_rname")
		delete(additionalProperties, "refresh")
		delete(additionalProperties, "retry")
		delete(additionalProperties, "rname")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInheritedZoneAuthority struct {
	value *InheritedZoneAuthority
	isSet bool
}

func (v NullableInheritedZoneAuthority) Get() *InheritedZoneAuthority {
	return v.value
}

func (v *NullableInheritedZoneAuthority) Set(val *InheritedZoneAuthority) {
	v.value = val
	v.isSet = true
}

func (v NullableInheritedZoneAuthority) IsSet() bool {
	return v.isSet
}

func (v *NullableInheritedZoneAuthority) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInheritedZoneAuthority(val *InheritedZoneAuthority) *NullableInheritedZoneAuthority {
	return &NullableInheritedZoneAuthority{value: val, isSet: true}
}

func (v NullableInheritedZoneAuthority) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInheritedZoneAuthority) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
