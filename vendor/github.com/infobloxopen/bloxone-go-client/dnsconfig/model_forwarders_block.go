/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsconfig

import (
	"encoding/json"
)

// checks if the ForwardersBlock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForwardersBlock{}

// ForwardersBlock Block for fields: _forwarders_, _forwarders_only_, _use_root_forwarders_for_local_resolution_with_b1td_.
type ForwardersBlock struct {
	// Optional. Field config for _forwarders_ field from.
	Forwarders []Forwarder `json:"forwarders,omitempty"`
	// Optional. Field config for _forwarders_only_ field.
	ForwardersOnly *bool `json:"forwarders_only,omitempty"`
	// Optional. Field config for _use_root_forwarders_for_local_resolution_with_b1td_ field.
	UseRootForwardersForLocalResolutionWithB1td *bool `json:"use_root_forwarders_for_local_resolution_with_b1td,omitempty"`
	AdditionalProperties                        map[string]interface{}
}

type _ForwardersBlock ForwardersBlock

// NewForwardersBlock instantiates a new ForwardersBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForwardersBlock() *ForwardersBlock {
	this := ForwardersBlock{}
	return &this
}

// NewForwardersBlockWithDefaults instantiates a new ForwardersBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForwardersBlockWithDefaults() *ForwardersBlock {
	this := ForwardersBlock{}
	return &this
}

// GetForwarders returns the Forwarders field value if set, zero value otherwise.
func (o *ForwardersBlock) GetForwarders() []Forwarder {
	if o == nil || IsNil(o.Forwarders) {
		var ret []Forwarder
		return ret
	}
	return o.Forwarders
}

// GetForwardersOk returns a tuple with the Forwarders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForwardersBlock) GetForwardersOk() ([]Forwarder, bool) {
	if o == nil || IsNil(o.Forwarders) {
		return nil, false
	}
	return o.Forwarders, true
}

// HasForwarders returns a boolean if a field has been set.
func (o *ForwardersBlock) HasForwarders() bool {
	if o != nil && !IsNil(o.Forwarders) {
		return true
	}

	return false
}

// SetForwarders gets a reference to the given []Forwarder and assigns it to the Forwarders field.
func (o *ForwardersBlock) SetForwarders(v []Forwarder) {
	o.Forwarders = v
}

// GetForwardersOnly returns the ForwardersOnly field value if set, zero value otherwise.
func (o *ForwardersBlock) GetForwardersOnly() bool {
	if o == nil || IsNil(o.ForwardersOnly) {
		var ret bool
		return ret
	}
	return *o.ForwardersOnly
}

// GetForwardersOnlyOk returns a tuple with the ForwardersOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForwardersBlock) GetForwardersOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ForwardersOnly) {
		return nil, false
	}
	return o.ForwardersOnly, true
}

// HasForwardersOnly returns a boolean if a field has been set.
func (o *ForwardersBlock) HasForwardersOnly() bool {
	if o != nil && !IsNil(o.ForwardersOnly) {
		return true
	}

	return false
}

// SetForwardersOnly gets a reference to the given bool and assigns it to the ForwardersOnly field.
func (o *ForwardersBlock) SetForwardersOnly(v bool) {
	o.ForwardersOnly = &v
}

// GetUseRootForwardersForLocalResolutionWithB1td returns the UseRootForwardersForLocalResolutionWithB1td field value if set, zero value otherwise.
func (o *ForwardersBlock) GetUseRootForwardersForLocalResolutionWithB1td() bool {
	if o == nil || IsNil(o.UseRootForwardersForLocalResolutionWithB1td) {
		var ret bool
		return ret
	}
	return *o.UseRootForwardersForLocalResolutionWithB1td
}

// GetUseRootForwardersForLocalResolutionWithB1tdOk returns a tuple with the UseRootForwardersForLocalResolutionWithB1td field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForwardersBlock) GetUseRootForwardersForLocalResolutionWithB1tdOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRootForwardersForLocalResolutionWithB1td) {
		return nil, false
	}
	return o.UseRootForwardersForLocalResolutionWithB1td, true
}

// HasUseRootForwardersForLocalResolutionWithB1td returns a boolean if a field has been set.
func (o *ForwardersBlock) HasUseRootForwardersForLocalResolutionWithB1td() bool {
	if o != nil && !IsNil(o.UseRootForwardersForLocalResolutionWithB1td) {
		return true
	}

	return false
}

// SetUseRootForwardersForLocalResolutionWithB1td gets a reference to the given bool and assigns it to the UseRootForwardersForLocalResolutionWithB1td field.
func (o *ForwardersBlock) SetUseRootForwardersForLocalResolutionWithB1td(v bool) {
	o.UseRootForwardersForLocalResolutionWithB1td = &v
}

func (o ForwardersBlock) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForwardersBlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Forwarders) {
		toSerialize["forwarders"] = o.Forwarders
	}
	if !IsNil(o.ForwardersOnly) {
		toSerialize["forwarders_only"] = o.ForwardersOnly
	}
	if !IsNil(o.UseRootForwardersForLocalResolutionWithB1td) {
		toSerialize["use_root_forwarders_for_local_resolution_with_b1td"] = o.UseRootForwardersForLocalResolutionWithB1td
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ForwardersBlock) UnmarshalJSON(data []byte) (err error) {
	varForwardersBlock := _ForwardersBlock{}

	err = json.Unmarshal(data, &varForwardersBlock)

	if err != nil {
		return err
	}

	*o = ForwardersBlock(varForwardersBlock)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "forwarders")
		delete(additionalProperties, "forwarders_only")
		delete(additionalProperties, "use_root_forwarders_for_local_resolution_with_b1td")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableForwardersBlock struct {
	value *ForwardersBlock
	isSet bool
}

func (v NullableForwardersBlock) Get() *ForwardersBlock {
	return v.value
}

func (v *NullableForwardersBlock) Set(val *ForwardersBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableForwardersBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableForwardersBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForwardersBlock(val *ForwardersBlock) *NullableForwardersBlock {
	return &NullableForwardersBlock{value: val, isSet: true}
}

func (v NullableForwardersBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForwardersBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
