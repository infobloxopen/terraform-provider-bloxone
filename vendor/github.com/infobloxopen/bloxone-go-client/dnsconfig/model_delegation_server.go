/*
DNS Configuration API

The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsconfig

import (
	"encoding/json"
	"fmt"
)

// checks if the DelegationServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DelegationServer{}

// DelegationServer DNS zone delegation server.
type DelegationServer struct {
	// Optional. IP Address of nameserver.  Only required when fqdn of a delegation server falls under delegation fqdn
	Address *string `json:"address,omitempty"`
	// Required. FQDN of nameserver.
	Fqdn string `json:"fqdn"`
	// FQDN of nameserver in punycode.
	ProtocolFqdn         *string `json:"protocol_fqdn,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DelegationServer DelegationServer

// NewDelegationServer instantiates a new DelegationServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelegationServer(fqdn string) *DelegationServer {
	this := DelegationServer{}
	this.Fqdn = fqdn
	return &this
}

// NewDelegationServerWithDefaults instantiates a new DelegationServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDelegationServerWithDefaults() *DelegationServer {
	this := DelegationServer{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *DelegationServer) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelegationServer) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *DelegationServer) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *DelegationServer) SetAddress(v string) {
	o.Address = &v
}

// GetFqdn returns the Fqdn field value
func (o *DelegationServer) GetFqdn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value
// and a boolean to check if the value has been set.
func (o *DelegationServer) GetFqdnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fqdn, true
}

// SetFqdn sets field value
func (o *DelegationServer) SetFqdn(v string) {
	o.Fqdn = v
}

// GetProtocolFqdn returns the ProtocolFqdn field value if set, zero value otherwise.
func (o *DelegationServer) GetProtocolFqdn() string {
	if o == nil || IsNil(o.ProtocolFqdn) {
		var ret string
		return ret
	}
	return *o.ProtocolFqdn
}

// GetProtocolFqdnOk returns a tuple with the ProtocolFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelegationServer) GetProtocolFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.ProtocolFqdn) {
		return nil, false
	}
	return o.ProtocolFqdn, true
}

// HasProtocolFqdn returns a boolean if a field has been set.
func (o *DelegationServer) HasProtocolFqdn() bool {
	if o != nil && !IsNil(o.ProtocolFqdn) {
		return true
	}

	return false
}

// SetProtocolFqdn gets a reference to the given string and assigns it to the ProtocolFqdn field.
func (o *DelegationServer) SetProtocolFqdn(v string) {
	o.ProtocolFqdn = &v
}

func (o DelegationServer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DelegationServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	toSerialize["fqdn"] = o.Fqdn
	if !IsNil(o.ProtocolFqdn) {
		toSerialize["protocol_fqdn"] = o.ProtocolFqdn
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DelegationServer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fqdn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDelegationServer := _DelegationServer{}

	err = json.Unmarshal(data, &varDelegationServer)

	if err != nil {
		return err
	}

	*o = DelegationServer(varDelegationServer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "fqdn")
		delete(additionalProperties, "protocol_fqdn")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDelegationServer struct {
	value *DelegationServer
	isSet bool
}

func (v NullableDelegationServer) Get() *DelegationServer {
	return v.value
}

func (v *NullableDelegationServer) Set(val *DelegationServer) {
	v.value = val
	v.isSet = true
}

func (v NullableDelegationServer) IsSet() bool {
	return v.isSet
}

func (v *NullableDelegationServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelegationServer(val *DelegationServer) *NullableDelegationServer {
	return &NullableDelegationServer{value: val, isSet: true}
}

func (v NullableDelegationServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelegationServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
