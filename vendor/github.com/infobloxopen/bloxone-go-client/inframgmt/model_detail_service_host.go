/*
Infrastructure Management API

The **Infrastructure Management API** provides a RESTful interface to manage Infrastructure Hosts and Services objects.  The following is a list of the different Services and their string types (the string types are to be used with the APIs for the `service_type` field):  | Service name | Service type |   | ------ | ------ |   | Access Authentication | authn |   | Anycast | anycast |   | Data Connector | cdc |   | DHCP | dhcp |   | DNS | dns |   | DNS Forwarding Proxy | dfp |   | NIOS Grid Connector | orpheus |   | MS AD Sync | msad |   | NTP | ntp |   | BGP | bgp |   | RIP | rip |   | OSPF | ospf |    ---   ### Hosts API  The Hosts API is used to manage the Infrastructure Host resources. These include various operations related to hosts such as viewing, creating, updating, replacing, disconnecting, and deleting Hosts. Management of Hosts is done from the Cloud Services Portal (CSP) by navigating to the Manage -> Infrastructure -> Hosts tab.  ---   ### Services API  The Services API is used to manage the Infrastructure Service resources (a.k.a. BloxOne applications). These include various operations related to hosts such as viewing, creating, updating, starting/stopping, configuring, and deleting Services. Management of Services is done from the Cloud Services Portal (CSP) by navigating to the Manage -> Infrastructure -> Services tab.  ---   ### Detail APIs  The Detail APIs are read-only APIs used to list all the Infrastructure resources (Hosts and Services). Each resource record returned also contains information about its other associated resources and the status information for itself and the associated resource(s) (i.e., Host/Service status).  ---

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inframgmt

import (
	"encoding/json"
)

// checks if the DetailServiceHost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetailServiceHost{}

// DetailServiceHost struct for DetailServiceHost
type DetailServiceHost struct {
	// Composite Status of the Host (`online`, `degraded`, `error`, `offline`, `pending`, `awaiting approval`).
	CompositeStatus *string `json:"composite_status,omitempty"`
	// List of Host-specific configurations of this Service.
	Config *DetailServiceHostConfig `json:"config,omitempty"`
	// The name of the Host (unique).
	DisplayName *string `json:"display_name,omitempty"`
	// The resource identifier.
	Id *string `json:"id,omitempty"`
	// The IP address of the Host.
	IpAddress *string `json:"ip_address,omitempty"`
	// The legacy Host object identifier.
	LegacyId        *string `json:"legacy_id,omitempty"`
	MaintenanceMode *string `json:"maintenance_mode,omitempty"`
	// The unique On-Prem Host ID generated by the On-Prem device and assigned to the Host once it is registered and logged into the Infoblox Cloud.
	Ophid                *string `json:"ophid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DetailServiceHost DetailServiceHost

// NewDetailServiceHost instantiates a new DetailServiceHost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetailServiceHost() *DetailServiceHost {
	this := DetailServiceHost{}
	return &this
}

// NewDetailServiceHostWithDefaults instantiates a new DetailServiceHost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetailServiceHostWithDefaults() *DetailServiceHost {
	this := DetailServiceHost{}
	return &this
}

// GetCompositeStatus returns the CompositeStatus field value if set, zero value otherwise.
func (o *DetailServiceHost) GetCompositeStatus() string {
	if o == nil || IsNil(o.CompositeStatus) {
		var ret string
		return ret
	}
	return *o.CompositeStatus
}

// GetCompositeStatusOk returns a tuple with the CompositeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailServiceHost) GetCompositeStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CompositeStatus) {
		return nil, false
	}
	return o.CompositeStatus, true
}

// HasCompositeStatus returns a boolean if a field has been set.
func (o *DetailServiceHost) HasCompositeStatus() bool {
	if o != nil && !IsNil(o.CompositeStatus) {
		return true
	}

	return false
}

// SetCompositeStatus gets a reference to the given string and assigns it to the CompositeStatus field.
func (o *DetailServiceHost) SetCompositeStatus(v string) {
	o.CompositeStatus = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *DetailServiceHost) GetConfig() DetailServiceHostConfig {
	if o == nil || IsNil(o.Config) {
		var ret DetailServiceHostConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailServiceHost) GetConfigOk() (*DetailServiceHostConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *DetailServiceHost) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given DetailServiceHostConfig and assigns it to the Config field.
func (o *DetailServiceHost) SetConfig(v DetailServiceHostConfig) {
	o.Config = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DetailServiceHost) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailServiceHost) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DetailServiceHost) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DetailServiceHost) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DetailServiceHost) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailServiceHost) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DetailServiceHost) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DetailServiceHost) SetId(v string) {
	o.Id = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *DetailServiceHost) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailServiceHost) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *DetailServiceHost) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *DetailServiceHost) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetLegacyId returns the LegacyId field value if set, zero value otherwise.
func (o *DetailServiceHost) GetLegacyId() string {
	if o == nil || IsNil(o.LegacyId) {
		var ret string
		return ret
	}
	return *o.LegacyId
}

// GetLegacyIdOk returns a tuple with the LegacyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailServiceHost) GetLegacyIdOk() (*string, bool) {
	if o == nil || IsNil(o.LegacyId) {
		return nil, false
	}
	return o.LegacyId, true
}

// HasLegacyId returns a boolean if a field has been set.
func (o *DetailServiceHost) HasLegacyId() bool {
	if o != nil && !IsNil(o.LegacyId) {
		return true
	}

	return false
}

// SetLegacyId gets a reference to the given string and assigns it to the LegacyId field.
func (o *DetailServiceHost) SetLegacyId(v string) {
	o.LegacyId = &v
}

// GetMaintenanceMode returns the MaintenanceMode field value if set, zero value otherwise.
func (o *DetailServiceHost) GetMaintenanceMode() string {
	if o == nil || IsNil(o.MaintenanceMode) {
		var ret string
		return ret
	}
	return *o.MaintenanceMode
}

// GetMaintenanceModeOk returns a tuple with the MaintenanceMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailServiceHost) GetMaintenanceModeOk() (*string, bool) {
	if o == nil || IsNil(o.MaintenanceMode) {
		return nil, false
	}
	return o.MaintenanceMode, true
}

// HasMaintenanceMode returns a boolean if a field has been set.
func (o *DetailServiceHost) HasMaintenanceMode() bool {
	if o != nil && !IsNil(o.MaintenanceMode) {
		return true
	}

	return false
}

// SetMaintenanceMode gets a reference to the given string and assigns it to the MaintenanceMode field.
func (o *DetailServiceHost) SetMaintenanceMode(v string) {
	o.MaintenanceMode = &v
}

// GetOphid returns the Ophid field value if set, zero value otherwise.
func (o *DetailServiceHost) GetOphid() string {
	if o == nil || IsNil(o.Ophid) {
		var ret string
		return ret
	}
	return *o.Ophid
}

// GetOphidOk returns a tuple with the Ophid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailServiceHost) GetOphidOk() (*string, bool) {
	if o == nil || IsNil(o.Ophid) {
		return nil, false
	}
	return o.Ophid, true
}

// HasOphid returns a boolean if a field has been set.
func (o *DetailServiceHost) HasOphid() bool {
	if o != nil && !IsNil(o.Ophid) {
		return true
	}

	return false
}

// SetOphid gets a reference to the given string and assigns it to the Ophid field.
func (o *DetailServiceHost) SetOphid(v string) {
	o.Ophid = &v
}

func (o DetailServiceHost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetailServiceHost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompositeStatus) {
		toSerialize["composite_status"] = o.CompositeStatus
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ip_address"] = o.IpAddress
	}
	if !IsNil(o.LegacyId) {
		toSerialize["legacy_id"] = o.LegacyId
	}
	if !IsNil(o.MaintenanceMode) {
		toSerialize["maintenance_mode"] = o.MaintenanceMode
	}
	if !IsNil(o.Ophid) {
		toSerialize["ophid"] = o.Ophid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DetailServiceHost) UnmarshalJSON(data []byte) (err error) {
	varDetailServiceHost := _DetailServiceHost{}

	err = json.Unmarshal(data, &varDetailServiceHost)

	if err != nil {
		return err
	}

	*o = DetailServiceHost(varDetailServiceHost)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "composite_status")
		delete(additionalProperties, "config")
		delete(additionalProperties, "display_name")
		delete(additionalProperties, "id")
		delete(additionalProperties, "ip_address")
		delete(additionalProperties, "legacy_id")
		delete(additionalProperties, "maintenance_mode")
		delete(additionalProperties, "ophid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDetailServiceHost struct {
	value *DetailServiceHost
	isSet bool
}

func (v NullableDetailServiceHost) Get() *DetailServiceHost {
	return v.value
}

func (v *NullableDetailServiceHost) Set(val *DetailServiceHost) {
	v.value = val
	v.isSet = true
}

func (v NullableDetailServiceHost) IsSet() bool {
	return v.isSet
}

func (v *NullableDetailServiceHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetailServiceHost(val *DetailServiceHost) *NullableDetailServiceHost {
	return &NullableDetailServiceHost{value: val, isSet: true}
}

func (v NullableDetailServiceHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetailServiceHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
