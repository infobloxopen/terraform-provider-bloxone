/*
Infrastructure Management API

The **Infrastructure Management API** provides a RESTful interface to manage Infrastructure Hosts and Services objects.  The following is a list of the different Services and their string types (the string types are to be used with the APIs for the `service_type` field):  | Service name | Service type |   | ------ | ------ |   | Access Authentication | authn |   | Anycast | anycast |   | Data Connector | cdc |   | DHCP | dhcp |   | DNS | dns |   | DNS Forwarding Proxy | dfp |   | NIOS Grid Connector | orpheus |   | MS AD Sync | msad |   | NTP | ntp |   | BGP | bgp |   | RIP | rip |   | OSPF | ospf |    ---   ### Hosts API  The Hosts API is used to manage the Infrastructure Host resources. These include various operations related to hosts such as viewing, creating, updating, replacing, disconnecting, and deleting Hosts. Management of Hosts is done from the Cloud Services Portal (CSP) by navigating to the Manage -> Infrastructure -> Hosts tab.  ---   ### Services API  The Services API is used to manage the Infrastructure Service resources (a.k.a. BloxOne applications). These include various operations related to hosts such as viewing, creating, updating, starting/stopping, configuring, and deleting Services. Management of Services is done from the Cloud Services Portal (CSP) by navigating to the Manage -> Infrastructure -> Services tab.  ---   ### Detail APIs  The Detail APIs are read-only APIs used to list all the Infrastructure resources (Hosts and Services). Each resource record returned also contains information about its other associated resources and the status information for itself and the associated resource(s) (i.e., Host/Service status).  ---

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inframgmt

import (
	"encoding/json"
	"time"
)

// checks if the DetailHost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetailHost{}

// DetailHost struct for DetailHost
type DetailHost struct {
	// Composite Status of this Host (`online`, `degraded`, `error`, `offline`, `pending`, `awaiting approval`).
	CompositeStatus *string `json:"composite_status,omitempty"`
	// The list of Host-specific configurations for each Service deployed on this Host.
	Configs             []DetailHostServiceConfig `json:"configs,omitempty"`
	ConnectivityMonitor map[string]interface{}    `json:"connectivity_monitor,omitempty"`
	// The timestamp of creation of Host.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The description of the Host.
	Description *string `json:"description,omitempty"`
	// The name of the Host.
	DisplayName *string `json:"display_name,omitempty"`
	// The sub-type of a specific Host type.  Example: For Host type BloxOne Appliance, sub-type could be \"B105\" or \"VEP1425\"
	HostSubtype *string `json:"host_subtype,omitempty"`
	HostType    *string `json:"host_type,omitempty"`
	// The version of the Host platform services.
	HostVersion *string `json:"host_version,omitempty"`
	// The resource identifier.
	Id *string `json:"id,omitempty"`
	// The IP address of the Host.
	IpAddress *string `json:"ip_address,omitempty"`
	// The IP Space of the Host.
	IpSpace *string `json:"ip_space,omitempty"`
	// The legacy Host object identifier.
	LegacyId *string         `json:"legacy_id,omitempty"`
	Location *DetailLocation `json:"location,omitempty"`
	// The MAC address of the Host.
	MacAddress      *string `json:"mac_address,omitempty"`
	MaintenanceMode *string `json:"maintenance_mode,omitempty"`
	// The NAT IP address of the Host.
	NatIp *string `json:"nat_ip,omitempty"`
	// The unique On-Prem Host ID generated by the On-Prem device and assigned to the Host once it is registered and logged into the Infoblox Cloud.
	Ophid *string   `json:"ophid,omitempty"`
	Pool  *PoolInfo `json:"pool,omitempty"`
	// The unique serial number of the Host.
	SerialNumber *string `json:"serial_number,omitempty"`
	// The list of Services deployed on this Host.
	Services []DetailHostServiceConfig `json:"services,omitempty"`
	// The Site ID of the Host.
	SiteId *string `json:"site_id,omitempty"`
	// Tags associated with this Host.
	Tags map[string]interface{} `json:"tags,omitempty"`
	// The timezone of the Host.
	Timezone *string `json:"timezone,omitempty"`
	// The timestamp of the latest update on Host.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewDetailHost instantiates a new DetailHost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetailHost() *DetailHost {
	this := DetailHost{}
	return &this
}

// NewDetailHostWithDefaults instantiates a new DetailHost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetailHostWithDefaults() *DetailHost {
	this := DetailHost{}
	return &this
}

// GetCompositeStatus returns the CompositeStatus field value if set, zero value otherwise.
func (o *DetailHost) GetCompositeStatus() string {
	if o == nil || IsNil(o.CompositeStatus) {
		var ret string
		return ret
	}
	return *o.CompositeStatus
}

// GetCompositeStatusOk returns a tuple with the CompositeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetCompositeStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CompositeStatus) {
		return nil, false
	}
	return o.CompositeStatus, true
}

// HasCompositeStatus returns a boolean if a field has been set.
func (o *DetailHost) HasCompositeStatus() bool {
	if o != nil && !IsNil(o.CompositeStatus) {
		return true
	}

	return false
}

// SetCompositeStatus gets a reference to the given string and assigns it to the CompositeStatus field.
func (o *DetailHost) SetCompositeStatus(v string) {
	o.CompositeStatus = &v
}

// GetConfigs returns the Configs field value if set, zero value otherwise.
func (o *DetailHost) GetConfigs() []DetailHostServiceConfig {
	if o == nil || IsNil(o.Configs) {
		var ret []DetailHostServiceConfig
		return ret
	}
	return o.Configs
}

// GetConfigsOk returns a tuple with the Configs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetConfigsOk() ([]DetailHostServiceConfig, bool) {
	if o == nil || IsNil(o.Configs) {
		return nil, false
	}
	return o.Configs, true
}

// HasConfigs returns a boolean if a field has been set.
func (o *DetailHost) HasConfigs() bool {
	if o != nil && !IsNil(o.Configs) {
		return true
	}

	return false
}

// SetConfigs gets a reference to the given []DetailHostServiceConfig and assigns it to the Configs field.
func (o *DetailHost) SetConfigs(v []DetailHostServiceConfig) {
	o.Configs = v
}

// GetConnectivityMonitor returns the ConnectivityMonitor field value if set, zero value otherwise.
func (o *DetailHost) GetConnectivityMonitor() map[string]interface{} {
	if o == nil || IsNil(o.ConnectivityMonitor) {
		var ret map[string]interface{}
		return ret
	}
	return o.ConnectivityMonitor
}

// GetConnectivityMonitorOk returns a tuple with the ConnectivityMonitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetConnectivityMonitorOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ConnectivityMonitor) {
		return map[string]interface{}{}, false
	}
	return o.ConnectivityMonitor, true
}

// HasConnectivityMonitor returns a boolean if a field has been set.
func (o *DetailHost) HasConnectivityMonitor() bool {
	if o != nil && !IsNil(o.ConnectivityMonitor) {
		return true
	}

	return false
}

// SetConnectivityMonitor gets a reference to the given map[string]interface{} and assigns it to the ConnectivityMonitor field.
func (o *DetailHost) SetConnectivityMonitor(v map[string]interface{}) {
	o.ConnectivityMonitor = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DetailHost) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DetailHost) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DetailHost) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DetailHost) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DetailHost) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DetailHost) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DetailHost) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DetailHost) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DetailHost) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetHostSubtype returns the HostSubtype field value if set, zero value otherwise.
func (o *DetailHost) GetHostSubtype() string {
	if o == nil || IsNil(o.HostSubtype) {
		var ret string
		return ret
	}
	return *o.HostSubtype
}

// GetHostSubtypeOk returns a tuple with the HostSubtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetHostSubtypeOk() (*string, bool) {
	if o == nil || IsNil(o.HostSubtype) {
		return nil, false
	}
	return o.HostSubtype, true
}

// HasHostSubtype returns a boolean if a field has been set.
func (o *DetailHost) HasHostSubtype() bool {
	if o != nil && !IsNil(o.HostSubtype) {
		return true
	}

	return false
}

// SetHostSubtype gets a reference to the given string and assigns it to the HostSubtype field.
func (o *DetailHost) SetHostSubtype(v string) {
	o.HostSubtype = &v
}

// GetHostType returns the HostType field value if set, zero value otherwise.
func (o *DetailHost) GetHostType() string {
	if o == nil || IsNil(o.HostType) {
		var ret string
		return ret
	}
	return *o.HostType
}

// GetHostTypeOk returns a tuple with the HostType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetHostTypeOk() (*string, bool) {
	if o == nil || IsNil(o.HostType) {
		return nil, false
	}
	return o.HostType, true
}

// HasHostType returns a boolean if a field has been set.
func (o *DetailHost) HasHostType() bool {
	if o != nil && !IsNil(o.HostType) {
		return true
	}

	return false
}

// SetHostType gets a reference to the given string and assigns it to the HostType field.
func (o *DetailHost) SetHostType(v string) {
	o.HostType = &v
}

// GetHostVersion returns the HostVersion field value if set, zero value otherwise.
func (o *DetailHost) GetHostVersion() string {
	if o == nil || IsNil(o.HostVersion) {
		var ret string
		return ret
	}
	return *o.HostVersion
}

// GetHostVersionOk returns a tuple with the HostVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetHostVersionOk() (*string, bool) {
	if o == nil || IsNil(o.HostVersion) {
		return nil, false
	}
	return o.HostVersion, true
}

// HasHostVersion returns a boolean if a field has been set.
func (o *DetailHost) HasHostVersion() bool {
	if o != nil && !IsNil(o.HostVersion) {
		return true
	}

	return false
}

// SetHostVersion gets a reference to the given string and assigns it to the HostVersion field.
func (o *DetailHost) SetHostVersion(v string) {
	o.HostVersion = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DetailHost) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DetailHost) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DetailHost) SetId(v string) {
	o.Id = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *DetailHost) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *DetailHost) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *DetailHost) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetIpSpace returns the IpSpace field value if set, zero value otherwise.
func (o *DetailHost) GetIpSpace() string {
	if o == nil || IsNil(o.IpSpace) {
		var ret string
		return ret
	}
	return *o.IpSpace
}

// GetIpSpaceOk returns a tuple with the IpSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetIpSpaceOk() (*string, bool) {
	if o == nil || IsNil(o.IpSpace) {
		return nil, false
	}
	return o.IpSpace, true
}

// HasIpSpace returns a boolean if a field has been set.
func (o *DetailHost) HasIpSpace() bool {
	if o != nil && !IsNil(o.IpSpace) {
		return true
	}

	return false
}

// SetIpSpace gets a reference to the given string and assigns it to the IpSpace field.
func (o *DetailHost) SetIpSpace(v string) {
	o.IpSpace = &v
}

// GetLegacyId returns the LegacyId field value if set, zero value otherwise.
func (o *DetailHost) GetLegacyId() string {
	if o == nil || IsNil(o.LegacyId) {
		var ret string
		return ret
	}
	return *o.LegacyId
}

// GetLegacyIdOk returns a tuple with the LegacyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetLegacyIdOk() (*string, bool) {
	if o == nil || IsNil(o.LegacyId) {
		return nil, false
	}
	return o.LegacyId, true
}

// HasLegacyId returns a boolean if a field has been set.
func (o *DetailHost) HasLegacyId() bool {
	if o != nil && !IsNil(o.LegacyId) {
		return true
	}

	return false
}

// SetLegacyId gets a reference to the given string and assigns it to the LegacyId field.
func (o *DetailHost) SetLegacyId(v string) {
	o.LegacyId = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *DetailHost) GetLocation() DetailLocation {
	if o == nil || IsNil(o.Location) {
		var ret DetailLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetLocationOk() (*DetailLocation, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *DetailHost) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given DetailLocation and assigns it to the Location field.
func (o *DetailHost) SetLocation(v DetailLocation) {
	o.Location = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *DetailHost) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *DetailHost) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *DetailHost) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetMaintenanceMode returns the MaintenanceMode field value if set, zero value otherwise.
func (o *DetailHost) GetMaintenanceMode() string {
	if o == nil || IsNil(o.MaintenanceMode) {
		var ret string
		return ret
	}
	return *o.MaintenanceMode
}

// GetMaintenanceModeOk returns a tuple with the MaintenanceMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetMaintenanceModeOk() (*string, bool) {
	if o == nil || IsNil(o.MaintenanceMode) {
		return nil, false
	}
	return o.MaintenanceMode, true
}

// HasMaintenanceMode returns a boolean if a field has been set.
func (o *DetailHost) HasMaintenanceMode() bool {
	if o != nil && !IsNil(o.MaintenanceMode) {
		return true
	}

	return false
}

// SetMaintenanceMode gets a reference to the given string and assigns it to the MaintenanceMode field.
func (o *DetailHost) SetMaintenanceMode(v string) {
	o.MaintenanceMode = &v
}

// GetNatIp returns the NatIp field value if set, zero value otherwise.
func (o *DetailHost) GetNatIp() string {
	if o == nil || IsNil(o.NatIp) {
		var ret string
		return ret
	}
	return *o.NatIp
}

// GetNatIpOk returns a tuple with the NatIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetNatIpOk() (*string, bool) {
	if o == nil || IsNil(o.NatIp) {
		return nil, false
	}
	return o.NatIp, true
}

// HasNatIp returns a boolean if a field has been set.
func (o *DetailHost) HasNatIp() bool {
	if o != nil && !IsNil(o.NatIp) {
		return true
	}

	return false
}

// SetNatIp gets a reference to the given string and assigns it to the NatIp field.
func (o *DetailHost) SetNatIp(v string) {
	o.NatIp = &v
}

// GetOphid returns the Ophid field value if set, zero value otherwise.
func (o *DetailHost) GetOphid() string {
	if o == nil || IsNil(o.Ophid) {
		var ret string
		return ret
	}
	return *o.Ophid
}

// GetOphidOk returns a tuple with the Ophid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetOphidOk() (*string, bool) {
	if o == nil || IsNil(o.Ophid) {
		return nil, false
	}
	return o.Ophid, true
}

// HasOphid returns a boolean if a field has been set.
func (o *DetailHost) HasOphid() bool {
	if o != nil && !IsNil(o.Ophid) {
		return true
	}

	return false
}

// SetOphid gets a reference to the given string and assigns it to the Ophid field.
func (o *DetailHost) SetOphid(v string) {
	o.Ophid = &v
}

// GetPool returns the Pool field value if set, zero value otherwise.
func (o *DetailHost) GetPool() PoolInfo {
	if o == nil || IsNil(o.Pool) {
		var ret PoolInfo
		return ret
	}
	return *o.Pool
}

// GetPoolOk returns a tuple with the Pool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetPoolOk() (*PoolInfo, bool) {
	if o == nil || IsNil(o.Pool) {
		return nil, false
	}
	return o.Pool, true
}

// HasPool returns a boolean if a field has been set.
func (o *DetailHost) HasPool() bool {
	if o != nil && !IsNil(o.Pool) {
		return true
	}

	return false
}

// SetPool gets a reference to the given PoolInfo and assigns it to the Pool field.
func (o *DetailHost) SetPool(v PoolInfo) {
	o.Pool = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *DetailHost) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *DetailHost) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *DetailHost) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *DetailHost) GetServices() []DetailHostServiceConfig {
	if o == nil || IsNil(o.Services) {
		var ret []DetailHostServiceConfig
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetServicesOk() ([]DetailHostServiceConfig, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *DetailHost) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []DetailHostServiceConfig and assigns it to the Services field.
func (o *DetailHost) SetServices(v []DetailHostServiceConfig) {
	o.Services = v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *DetailHost) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *DetailHost) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *DetailHost) SetSiteId(v string) {
	o.SiteId = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DetailHost) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DetailHost) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *DetailHost) SetTags(v map[string]interface{}) {
	o.Tags = v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *DetailHost) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *DetailHost) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *DetailHost) SetTimezone(v string) {
	o.Timezone = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DetailHost) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailHost) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DetailHost) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DetailHost) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o DetailHost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetailHost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompositeStatus) {
		toSerialize["composite_status"] = o.CompositeStatus
	}
	if !IsNil(o.Configs) {
		toSerialize["configs"] = o.Configs
	}
	if !IsNil(o.ConnectivityMonitor) {
		toSerialize["connectivity_monitor"] = o.ConnectivityMonitor
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.HostSubtype) {
		toSerialize["host_subtype"] = o.HostSubtype
	}
	if !IsNil(o.HostType) {
		toSerialize["host_type"] = o.HostType
	}
	if !IsNil(o.HostVersion) {
		toSerialize["host_version"] = o.HostVersion
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ip_address"] = o.IpAddress
	}
	if !IsNil(o.IpSpace) {
		toSerialize["ip_space"] = o.IpSpace
	}
	if !IsNil(o.LegacyId) {
		toSerialize["legacy_id"] = o.LegacyId
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.MacAddress) {
		toSerialize["mac_address"] = o.MacAddress
	}
	if !IsNil(o.MaintenanceMode) {
		toSerialize["maintenance_mode"] = o.MaintenanceMode
	}
	if !IsNil(o.NatIp) {
		toSerialize["nat_ip"] = o.NatIp
	}
	if !IsNil(o.Ophid) {
		toSerialize["ophid"] = o.Ophid
	}
	if !IsNil(o.Pool) {
		toSerialize["pool"] = o.Pool
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serial_number"] = o.SerialNumber
	}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableDetailHost struct {
	value *DetailHost
	isSet bool
}

func (v NullableDetailHost) Get() *DetailHost {
	return v.value
}

func (v *NullableDetailHost) Set(val *DetailHost) {
	v.value = val
	v.isSet = true
}

func (v NullableDetailHost) IsSet() bool {
	return v.isSet
}

func (v *NullableDetailHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetailHost(val *DetailHost) *NullableDetailHost {
	return &NullableDetailHost{value: val, isSet: true}
}

func (v NullableDetailHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetailHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
