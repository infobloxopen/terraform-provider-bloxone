/*
IPAM Federation API

The DDI IPAM Federation application enables a SaaS administrator to manage multiple IPAM systems from one central control point CSP.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipamfederation

import (
	"encoding/json"
)

// checks if the NextAvailableBlockRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NextAvailableBlockRequest{}

// NextAvailableBlockRequest struct for NextAvailableBlockRequest
type NextAvailableBlockRequest struct {
	// The CIDR of the federated block. This is required, if _address_ does not specify it in its input.
	Cidr *int64 `json:"cidr,omitempty"`
	// The description for the _federation/federated_block_. May contain 0 to 1024 characters. Can include UTF-8.
	Comment *string `json:"comment,omitempty"`
	// The count of __Block__ required. If not provided, it will default to 1.
	Count *int64 `json:"count,omitempty"`
	// The resource identifier.
	Id *string `json:"id,omitempty"`
	// The name to be provided.
	Name *string `json:"name,omitempty"`
	// The tags for the federated block in JSON format.
	Tags                 map[string]interface{} `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NextAvailableBlockRequest NextAvailableBlockRequest

// NewNextAvailableBlockRequest instantiates a new NextAvailableBlockRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNextAvailableBlockRequest() *NextAvailableBlockRequest {
	this := NextAvailableBlockRequest{}
	return &this
}

// NewNextAvailableBlockRequestWithDefaults instantiates a new NextAvailableBlockRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNextAvailableBlockRequestWithDefaults() *NextAvailableBlockRequest {
	this := NextAvailableBlockRequest{}
	return &this
}

// GetCidr returns the Cidr field value if set, zero value otherwise.
func (o *NextAvailableBlockRequest) GetCidr() int64 {
	if o == nil || IsNil(o.Cidr) {
		var ret int64
		return ret
	}
	return *o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextAvailableBlockRequest) GetCidrOk() (*int64, bool) {
	if o == nil || IsNil(o.Cidr) {
		return nil, false
	}
	return o.Cidr, true
}

// HasCidr returns a boolean if a field has been set.
func (o *NextAvailableBlockRequest) HasCidr() bool {
	if o != nil && !IsNil(o.Cidr) {
		return true
	}

	return false
}

// SetCidr gets a reference to the given int64 and assigns it to the Cidr field.
func (o *NextAvailableBlockRequest) SetCidr(v int64) {
	o.Cidr = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *NextAvailableBlockRequest) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextAvailableBlockRequest) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *NextAvailableBlockRequest) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *NextAvailableBlockRequest) SetComment(v string) {
	o.Comment = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *NextAvailableBlockRequest) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextAvailableBlockRequest) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *NextAvailableBlockRequest) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *NextAvailableBlockRequest) SetCount(v int64) {
	o.Count = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NextAvailableBlockRequest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextAvailableBlockRequest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NextAvailableBlockRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NextAvailableBlockRequest) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NextAvailableBlockRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextAvailableBlockRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NextAvailableBlockRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NextAvailableBlockRequest) SetName(v string) {
	o.Name = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *NextAvailableBlockRequest) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextAvailableBlockRequest) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *NextAvailableBlockRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *NextAvailableBlockRequest) SetTags(v map[string]interface{}) {
	o.Tags = v
}

func (o NextAvailableBlockRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NextAvailableBlockRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cidr) {
		toSerialize["cidr"] = o.Cidr
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NextAvailableBlockRequest) UnmarshalJSON(data []byte) (err error) {
	varNextAvailableBlockRequest := _NextAvailableBlockRequest{}

	err = json.Unmarshal(data, &varNextAvailableBlockRequest)

	if err != nil {
		return err
	}

	*o = NextAvailableBlockRequest(varNextAvailableBlockRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cidr")
		delete(additionalProperties, "comment")
		delete(additionalProperties, "count")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNextAvailableBlockRequest struct {
	value *NextAvailableBlockRequest
	isSet bool
}

func (v NullableNextAvailableBlockRequest) Get() *NextAvailableBlockRequest {
	return v.value
}

func (v *NullableNextAvailableBlockRequest) Set(val *NextAvailableBlockRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNextAvailableBlockRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNextAvailableBlockRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNextAvailableBlockRequest(val *NextAvailableBlockRequest) *NullableNextAvailableBlockRequest {
	return &NullableNextAvailableBlockRequest{value: val, isSet: true}
}

func (v NullableNextAvailableBlockRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNextAvailableBlockRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
