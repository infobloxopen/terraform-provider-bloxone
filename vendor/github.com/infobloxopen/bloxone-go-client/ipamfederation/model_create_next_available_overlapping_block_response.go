/*
IPAM Federation API

The DDI IPAM Federation application enables a SaaS administrator to manage multiple IPAM systems from one central control point CSP.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipamfederation

import (
	"encoding/json"
)

// checks if the CreateNextAvailableOverlappingBlockResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateNextAvailableOverlappingBlockResponse{}

// CreateNextAvailableOverlappingBlockResponse The response format to allocate next available __OverlappingBlock__ objects.
type CreateNextAvailableOverlappingBlockResponse struct {
	Results              []OverlappingBlock `json:"results,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateNextAvailableOverlappingBlockResponse CreateNextAvailableOverlappingBlockResponse

// NewCreateNextAvailableOverlappingBlockResponse instantiates a new CreateNextAvailableOverlappingBlockResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateNextAvailableOverlappingBlockResponse() *CreateNextAvailableOverlappingBlockResponse {
	this := CreateNextAvailableOverlappingBlockResponse{}
	return &this
}

// NewCreateNextAvailableOverlappingBlockResponseWithDefaults instantiates a new CreateNextAvailableOverlappingBlockResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateNextAvailableOverlappingBlockResponseWithDefaults() *CreateNextAvailableOverlappingBlockResponse {
	this := CreateNextAvailableOverlappingBlockResponse{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *CreateNextAvailableOverlappingBlockResponse) GetResults() []OverlappingBlock {
	if o == nil || IsNil(o.Results) {
		var ret []OverlappingBlock
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNextAvailableOverlappingBlockResponse) GetResultsOk() ([]OverlappingBlock, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *CreateNextAvailableOverlappingBlockResponse) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []OverlappingBlock and assigns it to the Results field.
func (o *CreateNextAvailableOverlappingBlockResponse) SetResults(v []OverlappingBlock) {
	o.Results = v
}

func (o CreateNextAvailableOverlappingBlockResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateNextAvailableOverlappingBlockResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateNextAvailableOverlappingBlockResponse) UnmarshalJSON(data []byte) (err error) {
	varCreateNextAvailableOverlappingBlockResponse := _CreateNextAvailableOverlappingBlockResponse{}

	err = json.Unmarshal(data, &varCreateNextAvailableOverlappingBlockResponse)

	if err != nil {
		return err
	}

	*o = CreateNextAvailableOverlappingBlockResponse(varCreateNextAvailableOverlappingBlockResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "results")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateNextAvailableOverlappingBlockResponse struct {
	value *CreateNextAvailableOverlappingBlockResponse
	isSet bool
}

func (v NullableCreateNextAvailableOverlappingBlockResponse) Get() *CreateNextAvailableOverlappingBlockResponse {
	return v.value
}

func (v *NullableCreateNextAvailableOverlappingBlockResponse) Set(val *CreateNextAvailableOverlappingBlockResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNextAvailableOverlappingBlockResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNextAvailableOverlappingBlockResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNextAvailableOverlappingBlockResponse(val *CreateNextAvailableOverlappingBlockResponse) *NullableCreateNextAvailableOverlappingBlockResponse {
	return &NullableCreateNextAvailableOverlappingBlockResponse{value: val, isSet: true}
}

func (v NullableCreateNextAvailableOverlappingBlockResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNextAvailableOverlappingBlockResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
