/*
IPAM Federation API

The DDI IPAM Federation application enables a SaaS administrator to manage multiple IPAM systems from one central control point CSP.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipamfederation

import (
	"encoding/json"
)

// checks if the ListFederatedBlockResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListFederatedBlockResponse{}

// ListFederatedBlockResponse The response format to retrieve __FederatedBlock__ objects.
type ListFederatedBlockResponse struct {
	// A list of FederatedBlock objects.
	Results              []FederatedBlock `json:"results,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ListFederatedBlockResponse ListFederatedBlockResponse

// NewListFederatedBlockResponse instantiates a new ListFederatedBlockResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListFederatedBlockResponse() *ListFederatedBlockResponse {
	this := ListFederatedBlockResponse{}
	return &this
}

// NewListFederatedBlockResponseWithDefaults instantiates a new ListFederatedBlockResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListFederatedBlockResponseWithDefaults() *ListFederatedBlockResponse {
	this := ListFederatedBlockResponse{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *ListFederatedBlockResponse) GetResults() []FederatedBlock {
	if o == nil || IsNil(o.Results) {
		var ret []FederatedBlock
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListFederatedBlockResponse) GetResultsOk() ([]FederatedBlock, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *ListFederatedBlockResponse) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []FederatedBlock and assigns it to the Results field.
func (o *ListFederatedBlockResponse) SetResults(v []FederatedBlock) {
	o.Results = v
}

func (o ListFederatedBlockResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListFederatedBlockResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListFederatedBlockResponse) UnmarshalJSON(data []byte) (err error) {
	varListFederatedBlockResponse := _ListFederatedBlockResponse{}

	err = json.Unmarshal(data, &varListFederatedBlockResponse)

	if err != nil {
		return err
	}

	*o = ListFederatedBlockResponse(varListFederatedBlockResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "results")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListFederatedBlockResponse struct {
	value *ListFederatedBlockResponse
	isSet bool
}

func (v NullableListFederatedBlockResponse) Get() *ListFederatedBlockResponse {
	return v.value
}

func (v *NullableListFederatedBlockResponse) Set(val *ListFederatedBlockResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListFederatedBlockResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListFederatedBlockResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListFederatedBlockResponse(val *ListFederatedBlockResponse) *NullableListFederatedBlockResponse {
	return &NullableListFederatedBlockResponse{value: val, isSet: true}
}

func (v NullableListFederatedBlockResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListFederatedBlockResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
