/*
IPAM Federation API

The DDI IPAM Federation application enables a SaaS administrator to manage multiple IPAM systems from one central control point CSP.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipamfederation

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/infobloxopen/bloxone-go-client/internal"
)

type NextAvailableFederatedBlockAPI interface {
	/*
			CreateNextAvailableFederatedBlocks Retrieve the next available federated block.

			Use this method to generate the next "n" available __FederatedBlock__ object with user specified predicates.
		The response will be "n" __FederatedBlock__ objects.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param id An application specific resource identity of a resource
			@return NextAvailableFederatedBlockAPICreateNextAvailableFederatedBlocksRequest
	*/
	CreateNextAvailableFederatedBlocks(ctx context.Context, id string) NextAvailableFederatedBlockAPICreateNextAvailableFederatedBlocksRequest

	// CreateNextAvailableFederatedBlocksExecute executes the request
	//  @return CreateNextAvailableFederatedBlockResponse
	CreateNextAvailableFederatedBlocksExecute(r NextAvailableFederatedBlockAPICreateNextAvailableFederatedBlocksRequest) (*CreateNextAvailableFederatedBlockResponse, *http.Response, error)
	/*
			CreateNextAvailableOverlappingBlocks Retrieve the next available overlapping block.

			Use this method to generate the next "n" available __OverlappingBlock__ object with user specified predicates.
		The response will be "n" __OverlappingBlock__ objects.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param id An application specific resource identity of a resource
			@return NextAvailableFederatedBlockAPICreateNextAvailableOverlappingBlocksRequest
	*/
	CreateNextAvailableOverlappingBlocks(ctx context.Context, id string) NextAvailableFederatedBlockAPICreateNextAvailableOverlappingBlocksRequest

	// CreateNextAvailableOverlappingBlocksExecute executes the request
	//  @return CreateNextAvailableOverlappingBlockResponse
	CreateNextAvailableOverlappingBlocksExecute(r NextAvailableFederatedBlockAPICreateNextAvailableOverlappingBlocksRequest) (*CreateNextAvailableOverlappingBlockResponse, *http.Response, error)
	/*
			CreateNextAvailableReservedBlocks Retrieve the next available reserved block.

			Use this method to generate the next "n" available __ReservedBlock__ object with user specified predicates.
		The response will be "n" __ReservedBlock__ objects.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param id An application specific resource identity of a resource
			@return NextAvailableFederatedBlockAPICreateNextAvailableReservedBlocksRequest
	*/
	CreateNextAvailableReservedBlocks(ctx context.Context, id string) NextAvailableFederatedBlockAPICreateNextAvailableReservedBlocksRequest

	// CreateNextAvailableReservedBlocksExecute executes the request
	//  @return CreateNextAvailableReservedBlockResponse
	CreateNextAvailableReservedBlocksExecute(r NextAvailableFederatedBlockAPICreateNextAvailableReservedBlocksRequest) (*CreateNextAvailableReservedBlockResponse, *http.Response, error)
	/*
			ListNextAvailableFederatedBlocks List the next available federated block.

			Use this method to generate the next "n" available __FederatedBlock__ object with user specified predicates.
		The response will be "n" __FederatedBlock__ objects.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param id An application specific resource identity of a resource
			@return NextAvailableFederatedBlockAPIListNextAvailableFederatedBlocksRequest
	*/
	ListNextAvailableFederatedBlocks(ctx context.Context, id string) NextAvailableFederatedBlockAPIListNextAvailableFederatedBlocksRequest

	// ListNextAvailableFederatedBlocksExecute executes the request
	//  @return ListNextAvailableFederatedBlockResponse
	ListNextAvailableFederatedBlocksExecute(r NextAvailableFederatedBlockAPIListNextAvailableFederatedBlocksRequest) (*ListNextAvailableFederatedBlockResponse, *http.Response, error)
}

// NextAvailableFederatedBlockAPIService NextAvailableFederatedBlockAPI service
type NextAvailableFederatedBlockAPIService internal.Service

type NextAvailableFederatedBlockAPICreateNextAvailableFederatedBlocksRequest struct {
	ctx        context.Context
	ApiService NextAvailableFederatedBlockAPI
	id         string
	body       *NextAvailableBlockRequest
}

func (r NextAvailableFederatedBlockAPICreateNextAvailableFederatedBlocksRequest) Body(body NextAvailableBlockRequest) NextAvailableFederatedBlockAPICreateNextAvailableFederatedBlocksRequest {
	r.body = &body
	return r
}

func (r NextAvailableFederatedBlockAPICreateNextAvailableFederatedBlocksRequest) Execute() (*CreateNextAvailableFederatedBlockResponse, *http.Response, error) {
	return r.ApiService.CreateNextAvailableFederatedBlocksExecute(r)
}

/*
CreateNextAvailableFederatedBlocks Retrieve the next available federated block.

Use this method to generate the next "n" available __FederatedBlock__ object with user specified predicates.
The response will be "n" __FederatedBlock__ objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id An application specific resource identity of a resource
	@return NextAvailableFederatedBlockAPICreateNextAvailableFederatedBlocksRequest
*/
func (a *NextAvailableFederatedBlockAPIService) CreateNextAvailableFederatedBlocks(ctx context.Context, id string) NextAvailableFederatedBlockAPICreateNextAvailableFederatedBlocksRequest {
	return NextAvailableFederatedBlockAPICreateNextAvailableFederatedBlocksRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CreateNextAvailableFederatedBlockResponse
func (a *NextAvailableFederatedBlockAPIService) CreateNextAvailableFederatedBlocksExecute(r NextAvailableFederatedBlockAPICreateNextAvailableFederatedBlocksRequest) (*CreateNextAvailableFederatedBlockResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateNextAvailableFederatedBlockResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NextAvailableFederatedBlockAPIService.CreateNextAvailableFederatedBlocks")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/federation/federated_block/{id}/next_available_federated_block"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(internal.ParameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, internal.ReportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultTags) > 0 && r.body != nil {
		if r.body.Tags == nil {
			r.body.Tags = make(map[string]interface{})
		}
		for k, v := range a.Client.Cfg.DefaultTags {
			if _, ok := r.body.Tags[k]; !ok {
				r.body.Tags[k] = v
			}
		}
	}
	// body params
	localVarPostBody = r.body
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NextAvailableFederatedBlockAPICreateNextAvailableOverlappingBlocksRequest struct {
	ctx        context.Context
	ApiService NextAvailableFederatedBlockAPI
	id         string
	body       *NextAvailableBlockRequest
}

func (r NextAvailableFederatedBlockAPICreateNextAvailableOverlappingBlocksRequest) Body(body NextAvailableBlockRequest) NextAvailableFederatedBlockAPICreateNextAvailableOverlappingBlocksRequest {
	r.body = &body
	return r
}

func (r NextAvailableFederatedBlockAPICreateNextAvailableOverlappingBlocksRequest) Execute() (*CreateNextAvailableOverlappingBlockResponse, *http.Response, error) {
	return r.ApiService.CreateNextAvailableOverlappingBlocksExecute(r)
}

/*
CreateNextAvailableOverlappingBlocks Retrieve the next available overlapping block.

Use this method to generate the next "n" available __OverlappingBlock__ object with user specified predicates.
The response will be "n" __OverlappingBlock__ objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id An application specific resource identity of a resource
	@return NextAvailableFederatedBlockAPICreateNextAvailableOverlappingBlocksRequest
*/
func (a *NextAvailableFederatedBlockAPIService) CreateNextAvailableOverlappingBlocks(ctx context.Context, id string) NextAvailableFederatedBlockAPICreateNextAvailableOverlappingBlocksRequest {
	return NextAvailableFederatedBlockAPICreateNextAvailableOverlappingBlocksRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CreateNextAvailableOverlappingBlockResponse
func (a *NextAvailableFederatedBlockAPIService) CreateNextAvailableOverlappingBlocksExecute(r NextAvailableFederatedBlockAPICreateNextAvailableOverlappingBlocksRequest) (*CreateNextAvailableOverlappingBlockResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateNextAvailableOverlappingBlockResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NextAvailableFederatedBlockAPIService.CreateNextAvailableOverlappingBlocks")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/federation/federated_block/{id}/next_available_overlapping_block"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(internal.ParameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, internal.ReportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultTags) > 0 && r.body != nil {
		if r.body.Tags == nil {
			r.body.Tags = make(map[string]interface{})
		}
		for k, v := range a.Client.Cfg.DefaultTags {
			if _, ok := r.body.Tags[k]; !ok {
				r.body.Tags[k] = v
			}
		}
	}
	// body params
	localVarPostBody = r.body
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NextAvailableFederatedBlockAPICreateNextAvailableReservedBlocksRequest struct {
	ctx        context.Context
	ApiService NextAvailableFederatedBlockAPI
	id         string
	body       *NextAvailableBlockRequest
}

func (r NextAvailableFederatedBlockAPICreateNextAvailableReservedBlocksRequest) Body(body NextAvailableBlockRequest) NextAvailableFederatedBlockAPICreateNextAvailableReservedBlocksRequest {
	r.body = &body
	return r
}

func (r NextAvailableFederatedBlockAPICreateNextAvailableReservedBlocksRequest) Execute() (*CreateNextAvailableReservedBlockResponse, *http.Response, error) {
	return r.ApiService.CreateNextAvailableReservedBlocksExecute(r)
}

/*
CreateNextAvailableReservedBlocks Retrieve the next available reserved block.

Use this method to generate the next "n" available __ReservedBlock__ object with user specified predicates.
The response will be "n" __ReservedBlock__ objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id An application specific resource identity of a resource
	@return NextAvailableFederatedBlockAPICreateNextAvailableReservedBlocksRequest
*/
func (a *NextAvailableFederatedBlockAPIService) CreateNextAvailableReservedBlocks(ctx context.Context, id string) NextAvailableFederatedBlockAPICreateNextAvailableReservedBlocksRequest {
	return NextAvailableFederatedBlockAPICreateNextAvailableReservedBlocksRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CreateNextAvailableReservedBlockResponse
func (a *NextAvailableFederatedBlockAPIService) CreateNextAvailableReservedBlocksExecute(r NextAvailableFederatedBlockAPICreateNextAvailableReservedBlocksRequest) (*CreateNextAvailableReservedBlockResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *CreateNextAvailableReservedBlockResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NextAvailableFederatedBlockAPIService.CreateNextAvailableReservedBlocks")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/federation/federated_block/{id}/next_available_reserved_block"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(internal.ParameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, internal.ReportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if len(a.Client.Cfg.DefaultTags) > 0 && r.body != nil {
		if r.body.Tags == nil {
			r.body.Tags = make(map[string]interface{})
		}
		for k, v := range a.Client.Cfg.DefaultTags {
			if _, ok := r.body.Tags[k]; !ok {
				r.body.Tags[k] = v
			}
		}
	}
	// body params
	localVarPostBody = r.body
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type NextAvailableFederatedBlockAPIListNextAvailableFederatedBlocksRequest struct {
	ctx        context.Context
	ApiService NextAvailableFederatedBlockAPI
	id         string
	cidr       *int64
	count      *int64
	name       *string
	comment    *string
}

// The CIDR of the federated block. This is required, if _address_ does not specify it in its input.
func (r NextAvailableFederatedBlockAPIListNextAvailableFederatedBlocksRequest) Cidr(cidr int64) NextAvailableFederatedBlockAPIListNextAvailableFederatedBlocksRequest {
	r.cidr = &cidr
	return r
}

// The count of __Block__ required. If not provided, it will default to 1.
func (r NextAvailableFederatedBlockAPIListNextAvailableFederatedBlocksRequest) Count(count int64) NextAvailableFederatedBlockAPIListNextAvailableFederatedBlocksRequest {
	r.count = &count
	return r
}

// The name to be provided.
func (r NextAvailableFederatedBlockAPIListNextAvailableFederatedBlocksRequest) Name(name string) NextAvailableFederatedBlockAPIListNextAvailableFederatedBlocksRequest {
	r.name = &name
	return r
}

// The description for the _federation/federated_block_. May contain 0 to 1024 characters. Can include UTF-8.
func (r NextAvailableFederatedBlockAPIListNextAvailableFederatedBlocksRequest) Comment(comment string) NextAvailableFederatedBlockAPIListNextAvailableFederatedBlocksRequest {
	r.comment = &comment
	return r
}

func (r NextAvailableFederatedBlockAPIListNextAvailableFederatedBlocksRequest) Execute() (*ListNextAvailableFederatedBlockResponse, *http.Response, error) {
	return r.ApiService.ListNextAvailableFederatedBlocksExecute(r)
}

/*
ListNextAvailableFederatedBlocks List the next available federated block.

Use this method to generate the next "n" available __FederatedBlock__ object with user specified predicates.
The response will be "n" __FederatedBlock__ objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id An application specific resource identity of a resource
	@return NextAvailableFederatedBlockAPIListNextAvailableFederatedBlocksRequest
*/
func (a *NextAvailableFederatedBlockAPIService) ListNextAvailableFederatedBlocks(ctx context.Context, id string) NextAvailableFederatedBlockAPIListNextAvailableFederatedBlocksRequest {
	return NextAvailableFederatedBlockAPIListNextAvailableFederatedBlocksRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ListNextAvailableFederatedBlockResponse
func (a *NextAvailableFederatedBlockAPIService) ListNextAvailableFederatedBlocksExecute(r NextAvailableFederatedBlockAPIListNextAvailableFederatedBlocksRequest) (*ListNextAvailableFederatedBlockResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListNextAvailableFederatedBlockResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NextAvailableFederatedBlockAPIService.ListNextAvailableFederatedBlocks")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/federation/federated_block/{id}/next_available_federated_block"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(internal.ParameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cidr != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "cidr", r.cidr, "")
	}
	if r.count != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.name != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.comment != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "comment", r.comment, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
