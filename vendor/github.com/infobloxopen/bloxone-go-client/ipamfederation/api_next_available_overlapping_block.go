/*
IPAM Federation API

The DDI IPAM Federation application enables a SaaS administrator to manage multiple IPAM systems from one central control point CSP.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipamfederation

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/infobloxopen/bloxone-go-client/internal"
)

type NextAvailableOverlappingBlockAPI interface {
	/*
			ListNextAvailableOverlappingBlocks List the next available overlapping block.

			Use this method to list the next "n" available __OverlappingBlock__ object with user specified predicates.
		The response will be "n" __OverlappingBlock__ objects.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param id An application specific resource identity of a resource
			@return NextAvailableOverlappingBlockAPIListNextAvailableOverlappingBlocksRequest
	*/
	ListNextAvailableOverlappingBlocks(ctx context.Context, id string) NextAvailableOverlappingBlockAPIListNextAvailableOverlappingBlocksRequest

	// ListNextAvailableOverlappingBlocksExecute executes the request
	//  @return ListNextAvailableOverlappingBlockResponse
	ListNextAvailableOverlappingBlocksExecute(r NextAvailableOverlappingBlockAPIListNextAvailableOverlappingBlocksRequest) (*ListNextAvailableOverlappingBlockResponse, *http.Response, error)
}

// NextAvailableOverlappingBlockAPIService NextAvailableOverlappingBlockAPI service
type NextAvailableOverlappingBlockAPIService internal.Service

type NextAvailableOverlappingBlockAPIListNextAvailableOverlappingBlocksRequest struct {
	ctx        context.Context
	ApiService NextAvailableOverlappingBlockAPI
	id         string
	cidr       *int64
	count      *int64
	name       *string
	comment    *string
}

// The CIDR of the federated block. This is required, if _address_ does not specify it in its input.
func (r NextAvailableOverlappingBlockAPIListNextAvailableOverlappingBlocksRequest) Cidr(cidr int64) NextAvailableOverlappingBlockAPIListNextAvailableOverlappingBlocksRequest {
	r.cidr = &cidr
	return r
}

// The count of __Block__ required. If not provided, it will default to 1.
func (r NextAvailableOverlappingBlockAPIListNextAvailableOverlappingBlocksRequest) Count(count int64) NextAvailableOverlappingBlockAPIListNextAvailableOverlappingBlocksRequest {
	r.count = &count
	return r
}

// The name to be provided.
func (r NextAvailableOverlappingBlockAPIListNextAvailableOverlappingBlocksRequest) Name(name string) NextAvailableOverlappingBlockAPIListNextAvailableOverlappingBlocksRequest {
	r.name = &name
	return r
}

// The description for the _federation/federated_block_. May contain 0 to 1024 characters. Can include UTF-8.
func (r NextAvailableOverlappingBlockAPIListNextAvailableOverlappingBlocksRequest) Comment(comment string) NextAvailableOverlappingBlockAPIListNextAvailableOverlappingBlocksRequest {
	r.comment = &comment
	return r
}

func (r NextAvailableOverlappingBlockAPIListNextAvailableOverlappingBlocksRequest) Execute() (*ListNextAvailableOverlappingBlockResponse, *http.Response, error) {
	return r.ApiService.ListNextAvailableOverlappingBlocksExecute(r)
}

/*
ListNextAvailableOverlappingBlocks List the next available overlapping block.

Use this method to list the next "n" available __OverlappingBlock__ object with user specified predicates.
The response will be "n" __OverlappingBlock__ objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id An application specific resource identity of a resource
	@return NextAvailableOverlappingBlockAPIListNextAvailableOverlappingBlocksRequest
*/
func (a *NextAvailableOverlappingBlockAPIService) ListNextAvailableOverlappingBlocks(ctx context.Context, id string) NextAvailableOverlappingBlockAPIListNextAvailableOverlappingBlocksRequest {
	return NextAvailableOverlappingBlockAPIListNextAvailableOverlappingBlocksRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ListNextAvailableOverlappingBlockResponse
func (a *NextAvailableOverlappingBlockAPIService) ListNextAvailableOverlappingBlocksExecute(r NextAvailableOverlappingBlockAPIListNextAvailableOverlappingBlocksRequest) (*ListNextAvailableOverlappingBlockResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListNextAvailableOverlappingBlockResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "NextAvailableOverlappingBlockAPIService.ListNextAvailableOverlappingBlocks")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/federation/federated_block/{id}/next_available_overlapping_block"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(internal.ParameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cidr != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "cidr", r.cidr, "")
	}
	if r.count != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.name != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.comment != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "comment", r.comment, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
