/*
Host Activation Service

Host activation service provides a RESTful interface to manage cert and join token object. Join tokens are essentially a password that allows on-prem hosts to auto-associate themselves to a customer's account and receive a signed cert.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infraprovision

import (
	"encoding/json"
)

// checks if the RevokeCertRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevokeCertRequest{}

// RevokeCertRequest struct for RevokeCertRequest
type RevokeCertRequest struct {
	CertSerial *string `json:"cert_serial,omitempty"`
	// On-prem host ID which can be obtained either from on-prem or BloxOne UI portal(Manage > Infrastructure > Hosts > Select the onprem > click on 3 dots on top right side > General Information > Ophid) .
	Ophid                *string `json:"ophid,omitempty"`
	RevokeReason         *string `json:"revoke_reason,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RevokeCertRequest RevokeCertRequest

// NewRevokeCertRequest instantiates a new RevokeCertRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevokeCertRequest() *RevokeCertRequest {
	this := RevokeCertRequest{}
	return &this
}

// NewRevokeCertRequestWithDefaults instantiates a new RevokeCertRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevokeCertRequestWithDefaults() *RevokeCertRequest {
	this := RevokeCertRequest{}
	return &this
}

// GetCertSerial returns the CertSerial field value if set, zero value otherwise.
func (o *RevokeCertRequest) GetCertSerial() string {
	if o == nil || IsNil(o.CertSerial) {
		var ret string
		return ret
	}
	return *o.CertSerial
}

// GetCertSerialOk returns a tuple with the CertSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevokeCertRequest) GetCertSerialOk() (*string, bool) {
	if o == nil || IsNil(o.CertSerial) {
		return nil, false
	}
	return o.CertSerial, true
}

// HasCertSerial returns a boolean if a field has been set.
func (o *RevokeCertRequest) HasCertSerial() bool {
	if o != nil && !IsNil(o.CertSerial) {
		return true
	}

	return false
}

// SetCertSerial gets a reference to the given string and assigns it to the CertSerial field.
func (o *RevokeCertRequest) SetCertSerial(v string) {
	o.CertSerial = &v
}

// GetOphid returns the Ophid field value if set, zero value otherwise.
func (o *RevokeCertRequest) GetOphid() string {
	if o == nil || IsNil(o.Ophid) {
		var ret string
		return ret
	}
	return *o.Ophid
}

// GetOphidOk returns a tuple with the Ophid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevokeCertRequest) GetOphidOk() (*string, bool) {
	if o == nil || IsNil(o.Ophid) {
		return nil, false
	}
	return o.Ophid, true
}

// HasOphid returns a boolean if a field has been set.
func (o *RevokeCertRequest) HasOphid() bool {
	if o != nil && !IsNil(o.Ophid) {
		return true
	}

	return false
}

// SetOphid gets a reference to the given string and assigns it to the Ophid field.
func (o *RevokeCertRequest) SetOphid(v string) {
	o.Ophid = &v
}

// GetRevokeReason returns the RevokeReason field value if set, zero value otherwise.
func (o *RevokeCertRequest) GetRevokeReason() string {
	if o == nil || IsNil(o.RevokeReason) {
		var ret string
		return ret
	}
	return *o.RevokeReason
}

// GetRevokeReasonOk returns a tuple with the RevokeReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevokeCertRequest) GetRevokeReasonOk() (*string, bool) {
	if o == nil || IsNil(o.RevokeReason) {
		return nil, false
	}
	return o.RevokeReason, true
}

// HasRevokeReason returns a boolean if a field has been set.
func (o *RevokeCertRequest) HasRevokeReason() bool {
	if o != nil && !IsNil(o.RevokeReason) {
		return true
	}

	return false
}

// SetRevokeReason gets a reference to the given string and assigns it to the RevokeReason field.
func (o *RevokeCertRequest) SetRevokeReason(v string) {
	o.RevokeReason = &v
}

func (o RevokeCertRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevokeCertRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CertSerial) {
		toSerialize["cert_serial"] = o.CertSerial
	}
	if !IsNil(o.Ophid) {
		toSerialize["ophid"] = o.Ophid
	}
	if !IsNil(o.RevokeReason) {
		toSerialize["revoke_reason"] = o.RevokeReason
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RevokeCertRequest) UnmarshalJSON(data []byte) (err error) {
	varRevokeCertRequest := _RevokeCertRequest{}

	err = json.Unmarshal(data, &varRevokeCertRequest)

	if err != nil {
		return err
	}

	*o = RevokeCertRequest(varRevokeCertRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cert_serial")
		delete(additionalProperties, "ophid")
		delete(additionalProperties, "revoke_reason")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRevokeCertRequest struct {
	value *RevokeCertRequest
	isSet bool
}

func (v NullableRevokeCertRequest) Get() *RevokeCertRequest {
	return v.value
}

func (v *NullableRevokeCertRequest) Set(val *RevokeCertRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRevokeCertRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRevokeCertRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevokeCertRequest(val *RevokeCertRequest) *NullableRevokeCertRequest {
	return &NullableRevokeCertRequest{value: val, isSet: true}
}

func (v NullableRevokeCertRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevokeCertRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
