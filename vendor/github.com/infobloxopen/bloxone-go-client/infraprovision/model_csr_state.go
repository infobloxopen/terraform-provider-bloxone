/*
Host Activation Service

Host activation service provides a RESTful interface to manage cert and join token object. Join tokens are essentially a password that allows on-prem hosts to auto-associate themselves to a customer's account and receive a signed cert.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infraprovision

import (
	"encoding/json"
	"fmt"
)

// CSRState the model 'CSRState'
type CSRState string

// List of hostactivationCSRState
const (
	CSRSTATE_UNKNOWN  CSRState = "UNKNOWN"
	CSRSTATE_NEW      CSRState = "NEW"
	CSRSTATE_VERIFIED CSRState = "VERIFIED"
	CSRSTATE_DENIED   CSRState = "DENIED"
	CSRSTATE_TIMEOUT  CSRState = "TIMEOUT"
	CSRSTATE_RENEWED  CSRState = "RENEWED"
)

// All allowed values of CSRState enum
var AllowedCSRStateEnumValues = []CSRState{
	"UNKNOWN",
	"NEW",
	"VERIFIED",
	"DENIED",
	"TIMEOUT",
	"RENEWED",
}

func (v *CSRState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CSRState(value)
	for _, existing := range AllowedCSRStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CSRState", value)
}

// NewCSRStateFromValue returns a pointer to a valid CSRState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCSRStateFromValue(v string) (*CSRState, error) {
	ev := CSRState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CSRState: valid values are %v", v, AllowedCSRStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CSRState) IsValid() bool {
	for _, existing := range AllowedCSRStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to hostactivationCSRState value
func (v CSRState) Ptr() *CSRState {
	return &v
}

type NullableCSRState struct {
	value *CSRState
	isSet bool
}

func (v NullableCSRState) Get() *CSRState {
	return v.value
}

func (v *NullableCSRState) Set(val *CSRState) {
	v.value = val
	v.isSet = true
}

func (v NullableCSRState) IsSet() bool {
	return v.isSet
}

func (v *NullableCSRState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSRState(val *CSRState) *NullableCSRState {
	return &NullableCSRState{value: val, isSet: true}
}

func (v NullableCSRState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSRState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
