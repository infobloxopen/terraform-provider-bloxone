/*
Host Activation Service

Host activation service provides a RESTful interface to manage cert and join token object. Join tokens are essentially a password that allows on-prem hosts to auto-associate themselves to a customer's account and receive a signed cert.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package infraprovision

import (
	"encoding/json"
)

// checks if the ApproveCSRRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApproveCSRRequest{}

// ApproveCSRRequest struct for ApproveCSRRequest
type ApproveCSRRequest struct {
	ActivationCode       *string `json:"activation_code,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApproveCSRRequest ApproveCSRRequest

// NewApproveCSRRequest instantiates a new ApproveCSRRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApproveCSRRequest() *ApproveCSRRequest {
	this := ApproveCSRRequest{}
	return &this
}

// NewApproveCSRRequestWithDefaults instantiates a new ApproveCSRRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApproveCSRRequestWithDefaults() *ApproveCSRRequest {
	this := ApproveCSRRequest{}
	return &this
}

// GetActivationCode returns the ActivationCode field value if set, zero value otherwise.
func (o *ApproveCSRRequest) GetActivationCode() string {
	if o == nil || IsNil(o.ActivationCode) {
		var ret string
		return ret
	}
	return *o.ActivationCode
}

// GetActivationCodeOk returns a tuple with the ActivationCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproveCSRRequest) GetActivationCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ActivationCode) {
		return nil, false
	}
	return o.ActivationCode, true
}

// HasActivationCode returns a boolean if a field has been set.
func (o *ApproveCSRRequest) HasActivationCode() bool {
	if o != nil && !IsNil(o.ActivationCode) {
		return true
	}

	return false
}

// SetActivationCode gets a reference to the given string and assigns it to the ActivationCode field.
func (o *ApproveCSRRequest) SetActivationCode(v string) {
	o.ActivationCode = &v
}

func (o ApproveCSRRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApproveCSRRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivationCode) {
		toSerialize["activation_code"] = o.ActivationCode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApproveCSRRequest) UnmarshalJSON(data []byte) (err error) {
	varApproveCSRRequest := _ApproveCSRRequest{}

	err = json.Unmarshal(data, &varApproveCSRRequest)

	if err != nil {
		return err
	}

	*o = ApproveCSRRequest(varApproveCSRRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "activation_code")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApproveCSRRequest struct {
	value *ApproveCSRRequest
	isSet bool
}

func (v NullableApproveCSRRequest) Get() *ApproveCSRRequest {
	return v.value
}

func (v *NullableApproveCSRRequest) Set(val *ApproveCSRRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApproveCSRRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApproveCSRRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApproveCSRRequest(val *ApproveCSRRequest) *NullableApproveCSRRequest {
	return &NullableApproveCSRRequest{value: val, isSet: true}
}

func (v NullableApproveCSRRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApproveCSRRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
