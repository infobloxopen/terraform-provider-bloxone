/*
Discovery Configuration API V2

The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clouddiscovery

import (
	"encoding/json"
)

// checks if the DestinationConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DestinationConfig{}

// DestinationConfig struct for DestinationConfig
type DestinationConfig struct {
	Dns                  *DNSConfig  `json:"dns,omitempty"`
	Ipam                 *IPAMConfig `json:"ipam,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DestinationConfig DestinationConfig

// NewDestinationConfig instantiates a new DestinationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationConfig() *DestinationConfig {
	this := DestinationConfig{}
	return &this
}

// NewDestinationConfigWithDefaults instantiates a new DestinationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationConfigWithDefaults() *DestinationConfig {
	this := DestinationConfig{}
	return &this
}

// GetDns returns the Dns field value if set, zero value otherwise.
func (o *DestinationConfig) GetDns() DNSConfig {
	if o == nil || IsNil(o.Dns) {
		var ret DNSConfig
		return ret
	}
	return *o.Dns
}

// GetDnsOk returns a tuple with the Dns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationConfig) GetDnsOk() (*DNSConfig, bool) {
	if o == nil || IsNil(o.Dns) {
		return nil, false
	}
	return o.Dns, true
}

// HasDns returns a boolean if a field has been set.
func (o *DestinationConfig) HasDns() bool {
	if o != nil && !IsNil(o.Dns) {
		return true
	}

	return false
}

// SetDns gets a reference to the given DNSConfig and assigns it to the Dns field.
func (o *DestinationConfig) SetDns(v DNSConfig) {
	o.Dns = &v
}

// GetIpam returns the Ipam field value if set, zero value otherwise.
func (o *DestinationConfig) GetIpam() IPAMConfig {
	if o == nil || IsNil(o.Ipam) {
		var ret IPAMConfig
		return ret
	}
	return *o.Ipam
}

// GetIpamOk returns a tuple with the Ipam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationConfig) GetIpamOk() (*IPAMConfig, bool) {
	if o == nil || IsNil(o.Ipam) {
		return nil, false
	}
	return o.Ipam, true
}

// HasIpam returns a boolean if a field has been set.
func (o *DestinationConfig) HasIpam() bool {
	if o != nil && !IsNil(o.Ipam) {
		return true
	}

	return false
}

// SetIpam gets a reference to the given IPAMConfig and assigns it to the Ipam field.
func (o *DestinationConfig) SetIpam(v IPAMConfig) {
	o.Ipam = &v
}

func (o DestinationConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DestinationConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dns) {
		toSerialize["dns"] = o.Dns
	}
	if !IsNil(o.Ipam) {
		toSerialize["ipam"] = o.Ipam
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DestinationConfig) UnmarshalJSON(data []byte) (err error) {
	varDestinationConfig := _DestinationConfig{}

	err = json.Unmarshal(data, &varDestinationConfig)

	if err != nil {
		return err
	}

	*o = DestinationConfig(varDestinationConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dns")
		delete(additionalProperties, "ipam")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDestinationConfig struct {
	value *DestinationConfig
	isSet bool
}

func (v NullableDestinationConfig) Get() *DestinationConfig {
	return v.value
}

func (v *NullableDestinationConfig) Set(val *DestinationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationConfig(val *DestinationConfig) *NullableDestinationConfig {
	return &NullableDestinationConfig{value: val, isSet: true}
}

func (v NullableDestinationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
