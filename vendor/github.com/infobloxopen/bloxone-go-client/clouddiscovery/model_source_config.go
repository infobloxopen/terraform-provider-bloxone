/*
Discovery Configuration API V2

The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clouddiscovery

import (
	"encoding/json"
	"time"
)

// checks if the SourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceConfig{}

// SourceConfig Source configuration
type SourceConfig struct {
	// Account Schedule ID.
	AccountScheduleId *string   `json:"account_schedule_id,omitempty"`
	Accounts          []Account `json:"accounts,omitempty"`
	// Cloud Credential ID.
	CloudCredentialId *string `json:"cloud_credential_id,omitempty"`
	// Timestamp when the object has been created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Credential configuration. Ex.: '{    \"access_identifier\": \"arn:aws:iam::1234:role/access_for_discovery\",    \"region\": \"us-east-1\",    \"enclave\": \"commercial/gov\"  }'.
	CredentialConfig *CredentialConfig `json:"credential_config,omitempty"`
	// Timestamp when the object has been deleted.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Auto-generated unique source config ID. Format BloxID.
	Id *string `json:"id,omitempty"`
	// Provider account IDs such as accountID/ SubscriptionID to be restricted for a given source_config.
	RestrictedToAccounts []string `json:"restricted_to_accounts,omitempty"`
	// Timestamp when the object has been updated.
	UpdatedAt            *time.Time `json:"updated_at,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SourceConfig SourceConfig

// NewSourceConfig instantiates a new SourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceConfig() *SourceConfig {
	this := SourceConfig{}
	return &this
}

// NewSourceConfigWithDefaults instantiates a new SourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceConfigWithDefaults() *SourceConfig {
	this := SourceConfig{}
	return &this
}

// GetAccountScheduleId returns the AccountScheduleId field value if set, zero value otherwise.
func (o *SourceConfig) GetAccountScheduleId() string {
	if o == nil || IsNil(o.AccountScheduleId) {
		var ret string
		return ret
	}
	return *o.AccountScheduleId
}

// GetAccountScheduleIdOk returns a tuple with the AccountScheduleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConfig) GetAccountScheduleIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountScheduleId) {
		return nil, false
	}
	return o.AccountScheduleId, true
}

// HasAccountScheduleId returns a boolean if a field has been set.
func (o *SourceConfig) HasAccountScheduleId() bool {
	if o != nil && !IsNil(o.AccountScheduleId) {
		return true
	}

	return false
}

// SetAccountScheduleId gets a reference to the given string and assigns it to the AccountScheduleId field.
func (o *SourceConfig) SetAccountScheduleId(v string) {
	o.AccountScheduleId = &v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *SourceConfig) GetAccounts() []Account {
	if o == nil || IsNil(o.Accounts) {
		var ret []Account
		return ret
	}
	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConfig) GetAccountsOk() ([]Account, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *SourceConfig) HasAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []Account and assigns it to the Accounts field.
func (o *SourceConfig) SetAccounts(v []Account) {
	o.Accounts = v
}

// GetCloudCredentialId returns the CloudCredentialId field value if set, zero value otherwise.
func (o *SourceConfig) GetCloudCredentialId() string {
	if o == nil || IsNil(o.CloudCredentialId) {
		var ret string
		return ret
	}
	return *o.CloudCredentialId
}

// GetCloudCredentialIdOk returns a tuple with the CloudCredentialId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConfig) GetCloudCredentialIdOk() (*string, bool) {
	if o == nil || IsNil(o.CloudCredentialId) {
		return nil, false
	}
	return o.CloudCredentialId, true
}

// HasCloudCredentialId returns a boolean if a field has been set.
func (o *SourceConfig) HasCloudCredentialId() bool {
	if o != nil && !IsNil(o.CloudCredentialId) {
		return true
	}

	return false
}

// SetCloudCredentialId gets a reference to the given string and assigns it to the CloudCredentialId field.
func (o *SourceConfig) SetCloudCredentialId(v string) {
	o.CloudCredentialId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SourceConfig) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConfig) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SourceConfig) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SourceConfig) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCredentialConfig returns the CredentialConfig field value if set, zero value otherwise.
func (o *SourceConfig) GetCredentialConfig() CredentialConfig {
	if o == nil || IsNil(o.CredentialConfig) {
		var ret CredentialConfig
		return ret
	}
	return *o.CredentialConfig
}

// GetCredentialConfigOk returns a tuple with the CredentialConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConfig) GetCredentialConfigOk() (*CredentialConfig, bool) {
	if o == nil || IsNil(o.CredentialConfig) {
		return nil, false
	}
	return o.CredentialConfig, true
}

// HasCredentialConfig returns a boolean if a field has been set.
func (o *SourceConfig) HasCredentialConfig() bool {
	if o != nil && !IsNil(o.CredentialConfig) {
		return true
	}

	return false
}

// SetCredentialConfig gets a reference to the given CredentialConfig and assigns it to the CredentialConfig field.
func (o *SourceConfig) SetCredentialConfig(v CredentialConfig) {
	o.CredentialConfig = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *SourceConfig) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConfig) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *SourceConfig) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *SourceConfig) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SourceConfig) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConfig) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SourceConfig) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SourceConfig) SetId(v string) {
	o.Id = &v
}

// GetRestrictedToAccounts returns the RestrictedToAccounts field value if set, zero value otherwise.
func (o *SourceConfig) GetRestrictedToAccounts() []string {
	if o == nil || IsNil(o.RestrictedToAccounts) {
		var ret []string
		return ret
	}
	return o.RestrictedToAccounts
}

// GetRestrictedToAccountsOk returns a tuple with the RestrictedToAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConfig) GetRestrictedToAccountsOk() ([]string, bool) {
	if o == nil || IsNil(o.RestrictedToAccounts) {
		return nil, false
	}
	return o.RestrictedToAccounts, true
}

// HasRestrictedToAccounts returns a boolean if a field has been set.
func (o *SourceConfig) HasRestrictedToAccounts() bool {
	if o != nil && !IsNil(o.RestrictedToAccounts) {
		return true
	}

	return false
}

// SetRestrictedToAccounts gets a reference to the given []string and assigns it to the RestrictedToAccounts field.
func (o *SourceConfig) SetRestrictedToAccounts(v []string) {
	o.RestrictedToAccounts = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SourceConfig) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConfig) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SourceConfig) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *SourceConfig) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o SourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountScheduleId) {
		toSerialize["account_schedule_id"] = o.AccountScheduleId
	}
	if !IsNil(o.Accounts) {
		toSerialize["accounts"] = o.Accounts
	}
	if !IsNil(o.CloudCredentialId) {
		toSerialize["cloud_credential_id"] = o.CloudCredentialId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.CredentialConfig) {
		toSerialize["credential_config"] = o.CredentialConfig
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RestrictedToAccounts) {
		toSerialize["restricted_to_accounts"] = o.RestrictedToAccounts
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SourceConfig) UnmarshalJSON(data []byte) (err error) {
	varSourceConfig := _SourceConfig{}

	err = json.Unmarshal(data, &varSourceConfig)

	if err != nil {
		return err
	}

	*o = SourceConfig(varSourceConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "account_schedule_id")
		delete(additionalProperties, "accounts")
		delete(additionalProperties, "cloud_credential_id")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "credential_config")
		delete(additionalProperties, "deleted_at")
		delete(additionalProperties, "id")
		delete(additionalProperties, "restricted_to_accounts")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSourceConfig struct {
	value *SourceConfig
	isSet bool
}

func (v NullableSourceConfig) Get() *SourceConfig {
	return v.value
}

func (v *NullableSourceConfig) Set(val *SourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceConfig(val *SourceConfig) *NullableSourceConfig {
	return &NullableSourceConfig{value: val, isSet: true}
}

func (v NullableSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
