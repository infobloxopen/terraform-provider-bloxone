/*
Discovery Configuration API V2

The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clouddiscovery

import (
	"encoding/json"
)

// checks if the SubAccountV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubAccountV2{}

// SubAccountV2 struct for SubAccountV2
type SubAccountV2 struct {
	Id                   *string `json:"id,omitempty"`
	Name                 *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SubAccountV2 SubAccountV2

// NewSubAccountV2 instantiates a new SubAccountV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubAccountV2() *SubAccountV2 {
	this := SubAccountV2{}
	return &this
}

// NewSubAccountV2WithDefaults instantiates a new SubAccountV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubAccountV2WithDefaults() *SubAccountV2 {
	this := SubAccountV2{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubAccountV2) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubAccountV2) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubAccountV2) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubAccountV2) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SubAccountV2) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubAccountV2) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SubAccountV2) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SubAccountV2) SetName(v string) {
	o.Name = &v
}

func (o SubAccountV2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubAccountV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubAccountV2) UnmarshalJSON(data []byte) (err error) {
	varSubAccountV2 := _SubAccountV2{}

	err = json.Unmarshal(data, &varSubAccountV2)

	if err != nil {
		return err
	}

	*o = SubAccountV2(varSubAccountV2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubAccountV2 struct {
	value *SubAccountV2
	isSet bool
}

func (v NullableSubAccountV2) Get() *SubAccountV2 {
	return v.value
}

func (v *NullableSubAccountV2) Set(val *SubAccountV2) {
	v.value = val
	v.isSet = true
}

func (v NullableSubAccountV2) IsSet() bool {
	return v.isSet
}

func (v *NullableSubAccountV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubAccountV2(val *SubAccountV2) *NullableSubAccountV2 {
	return &NullableSubAccountV2{value: val, isSet: true}
}

func (v NullableSubAccountV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubAccountV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
