/*
Discovery Configuration API V2

The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clouddiscovery

import (
	"encoding/json"
)

// checks if the ObjectType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectType{}

// ObjectType struct for ObjectType
type ObjectType struct {
	DiscoverNew          *bool    `json:"discover_new,omitempty"`
	Objects              []Object `json:"objects,omitempty"`
	Version              *float32 `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ObjectType ObjectType

// NewObjectType instantiates a new ObjectType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectType() *ObjectType {
	this := ObjectType{}
	return &this
}

// NewObjectTypeWithDefaults instantiates a new ObjectType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectTypeWithDefaults() *ObjectType {
	this := ObjectType{}
	return &this
}

// GetDiscoverNew returns the DiscoverNew field value if set, zero value otherwise.
func (o *ObjectType) GetDiscoverNew() bool {
	if o == nil || IsNil(o.DiscoverNew) {
		var ret bool
		return ret
	}
	return *o.DiscoverNew
}

// GetDiscoverNewOk returns a tuple with the DiscoverNew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectType) GetDiscoverNewOk() (*bool, bool) {
	if o == nil || IsNil(o.DiscoverNew) {
		return nil, false
	}
	return o.DiscoverNew, true
}

// HasDiscoverNew returns a boolean if a field has been set.
func (o *ObjectType) HasDiscoverNew() bool {
	if o != nil && !IsNil(o.DiscoverNew) {
		return true
	}

	return false
}

// SetDiscoverNew gets a reference to the given bool and assigns it to the DiscoverNew field.
func (o *ObjectType) SetDiscoverNew(v bool) {
	o.DiscoverNew = &v
}

// GetObjects returns the Objects field value if set, zero value otherwise.
func (o *ObjectType) GetObjects() []Object {
	if o == nil || IsNil(o.Objects) {
		var ret []Object
		return ret
	}
	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectType) GetObjectsOk() ([]Object, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *ObjectType) HasObjects() bool {
	if o != nil && !IsNil(o.Objects) {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []Object and assigns it to the Objects field.
func (o *ObjectType) SetObjects(v []Object) {
	o.Objects = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ObjectType) GetVersion() float32 {
	if o == nil || IsNil(o.Version) {
		var ret float32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectType) GetVersionOk() (*float32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ObjectType) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given float32 and assigns it to the Version field.
func (o *ObjectType) SetVersion(v float32) {
	o.Version = &v
}

func (o ObjectType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DiscoverNew) {
		toSerialize["discover_new"] = o.DiscoverNew
	}
	if !IsNil(o.Objects) {
		toSerialize["objects"] = o.Objects
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ObjectType) UnmarshalJSON(data []byte) (err error) {
	varObjectType := _ObjectType{}

	err = json.Unmarshal(data, &varObjectType)

	if err != nil {
		return err
	}

	*o = ObjectType(varObjectType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "discover_new")
		delete(additionalProperties, "objects")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableObjectType struct {
	value *ObjectType
	isSet bool
}

func (v NullableObjectType) Get() *ObjectType {
	return v.value
}

func (v *NullableObjectType) Set(val *ObjectType) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectType) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectType(val *ObjectType) *NullableObjectType {
	return &NullableObjectType{value: val, isSet: true}
}

func (v NullableObjectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
