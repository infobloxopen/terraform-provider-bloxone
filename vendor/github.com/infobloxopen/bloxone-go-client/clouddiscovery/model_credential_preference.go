/*
Discovery Configuration API V2

The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clouddiscovery

import (
	"encoding/json"
)

// checks if the CredentialPreference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CredentialPreference{}

// CredentialPreference struct for CredentialPreference
type CredentialPreference struct {
	AccessIdentifierType *string `json:"access_identifier_type,omitempty"`
	CredentialType       *string `json:"credential_type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CredentialPreference CredentialPreference

// NewCredentialPreference instantiates a new CredentialPreference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCredentialPreference() *CredentialPreference {
	this := CredentialPreference{}
	return &this
}

// NewCredentialPreferenceWithDefaults instantiates a new CredentialPreference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCredentialPreferenceWithDefaults() *CredentialPreference {
	this := CredentialPreference{}
	return &this
}

// GetAccessIdentifierType returns the AccessIdentifierType field value if set, zero value otherwise.
func (o *CredentialPreference) GetAccessIdentifierType() string {
	if o == nil || IsNil(o.AccessIdentifierType) {
		var ret string
		return ret
	}
	return *o.AccessIdentifierType
}

// GetAccessIdentifierTypeOk returns a tuple with the AccessIdentifierType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialPreference) GetAccessIdentifierTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AccessIdentifierType) {
		return nil, false
	}
	return o.AccessIdentifierType, true
}

// HasAccessIdentifierType returns a boolean if a field has been set.
func (o *CredentialPreference) HasAccessIdentifierType() bool {
	if o != nil && !IsNil(o.AccessIdentifierType) {
		return true
	}

	return false
}

// SetAccessIdentifierType gets a reference to the given string and assigns it to the AccessIdentifierType field.
func (o *CredentialPreference) SetAccessIdentifierType(v string) {
	o.AccessIdentifierType = &v
}

// GetCredentialType returns the CredentialType field value if set, zero value otherwise.
func (o *CredentialPreference) GetCredentialType() string {
	if o == nil || IsNil(o.CredentialType) {
		var ret string
		return ret
	}
	return *o.CredentialType
}

// GetCredentialTypeOk returns a tuple with the CredentialType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialPreference) GetCredentialTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CredentialType) {
		return nil, false
	}
	return o.CredentialType, true
}

// HasCredentialType returns a boolean if a field has been set.
func (o *CredentialPreference) HasCredentialType() bool {
	if o != nil && !IsNil(o.CredentialType) {
		return true
	}

	return false
}

// SetCredentialType gets a reference to the given string and assigns it to the CredentialType field.
func (o *CredentialPreference) SetCredentialType(v string) {
	o.CredentialType = &v
}

func (o CredentialPreference) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CredentialPreference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessIdentifierType) {
		toSerialize["access_identifier_type"] = o.AccessIdentifierType
	}
	if !IsNil(o.CredentialType) {
		toSerialize["credential_type"] = o.CredentialType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CredentialPreference) UnmarshalJSON(data []byte) (err error) {
	varCredentialPreference := _CredentialPreference{}

	err = json.Unmarshal(data, &varCredentialPreference)

	if err != nil {
		return err
	}

	*o = CredentialPreference(varCredentialPreference)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "access_identifier_type")
		delete(additionalProperties, "credential_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCredentialPreference struct {
	value *CredentialPreference
	isSet bool
}

func (v NullableCredentialPreference) Get() *CredentialPreference {
	return v.value
}

func (v *NullableCredentialPreference) Set(val *CredentialPreference) {
	v.value = val
	v.isSet = true
}

func (v NullableCredentialPreference) IsSet() bool {
	return v.isSet
}

func (v *NullableCredentialPreference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredentialPreference(val *CredentialPreference) *NullableCredentialPreference {
	return &NullableCredentialPreference{value: val, isSet: true}
}

func (v NullableCredentialPreference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredentialPreference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
