/*
Discovery Configuration API V2

The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clouddiscovery

import (
	"encoding/json"
)

// checks if the ProviderReadResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProviderReadResponse{}

// ProviderReadResponse The Provider object read response format.
type ProviderReadResponse struct {
	Result               *DiscoveryConfig `json:"result,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProviderReadResponse ProviderReadResponse

// NewProviderReadResponse instantiates a new ProviderReadResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderReadResponse() *ProviderReadResponse {
	this := ProviderReadResponse{}
	return &this
}

// NewProviderReadResponseWithDefaults instantiates a new ProviderReadResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderReadResponseWithDefaults() *ProviderReadResponse {
	this := ProviderReadResponse{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *ProviderReadResponse) GetResult() DiscoveryConfig {
	if o == nil || IsNil(o.Result) {
		var ret DiscoveryConfig
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderReadResponse) GetResultOk() (*DiscoveryConfig, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *ProviderReadResponse) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given DiscoveryConfig and assigns it to the Result field.
func (o *ProviderReadResponse) SetResult(v DiscoveryConfig) {
	o.Result = &v
}

func (o ProviderReadResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProviderReadResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProviderReadResponse) UnmarshalJSON(data []byte) (err error) {
	varProviderReadResponse := _ProviderReadResponse{}

	err = json.Unmarshal(data, &varProviderReadResponse)

	if err != nil {
		return err
	}

	*o = ProviderReadResponse(varProviderReadResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "result")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProviderReadResponse struct {
	value *ProviderReadResponse
	isSet bool
}

func (v NullableProviderReadResponse) Get() *ProviderReadResponse {
	return v.value
}

func (v *NullableProviderReadResponse) Set(val *ProviderReadResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderReadResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderReadResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderReadResponse(val *ProviderReadResponse) *NullableProviderReadResponse {
	return &NullableProviderReadResponse{value: val, isSet: true}
}

func (v NullableProviderReadResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderReadResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
