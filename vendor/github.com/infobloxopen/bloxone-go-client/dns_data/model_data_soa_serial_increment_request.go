/*
DNS Data API

The DNS Data is a BloxOne DDI service providing primary authoritative zone support. DNS Data is authoritative for all DNS resource records and is acting as a primary DNS server. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns_data

import (
	"encoding/json"
)

// checks if the DataSOASerialIncrementRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataSOASerialIncrementRequest{}

// DataSOASerialIncrementRequest struct for DataSOASerialIncrementRequest
type DataSOASerialIncrementRequest struct {
	Fields *ProtobufFieldMask `json:"fields,omitempty"`
	// The resource identifier.
	Id *string `json:"id,omitempty"`
	// Default increment SOA serial number by 1,000.
	SerialIncrement *int64 `json:"serial_increment,omitempty"`
}

// NewDataSOASerialIncrementRequest instantiates a new DataSOASerialIncrementRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSOASerialIncrementRequest() *DataSOASerialIncrementRequest {
	this := DataSOASerialIncrementRequest{}
	return &this
}

// NewDataSOASerialIncrementRequestWithDefaults instantiates a new DataSOASerialIncrementRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSOASerialIncrementRequestWithDefaults() *DataSOASerialIncrementRequest {
	this := DataSOASerialIncrementRequest{}
	return &this
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *DataSOASerialIncrementRequest) GetFields() ProtobufFieldMask {
	if o == nil || IsNil(o.Fields) {
		var ret ProtobufFieldMask
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSOASerialIncrementRequest) GetFieldsOk() (*ProtobufFieldMask, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *DataSOASerialIncrementRequest) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given ProtobufFieldMask and assigns it to the Fields field.
func (o *DataSOASerialIncrementRequest) SetFields(v ProtobufFieldMask) {
	o.Fields = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataSOASerialIncrementRequest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSOASerialIncrementRequest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataSOASerialIncrementRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DataSOASerialIncrementRequest) SetId(v string) {
	o.Id = &v
}

// GetSerialIncrement returns the SerialIncrement field value if set, zero value otherwise.
func (o *DataSOASerialIncrementRequest) GetSerialIncrement() int64 {
	if o == nil || IsNil(o.SerialIncrement) {
		var ret int64
		return ret
	}
	return *o.SerialIncrement
}

// GetSerialIncrementOk returns a tuple with the SerialIncrement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSOASerialIncrementRequest) GetSerialIncrementOk() (*int64, bool) {
	if o == nil || IsNil(o.SerialIncrement) {
		return nil, false
	}
	return o.SerialIncrement, true
}

// HasSerialIncrement returns a boolean if a field has been set.
func (o *DataSOASerialIncrementRequest) HasSerialIncrement() bool {
	if o != nil && !IsNil(o.SerialIncrement) {
		return true
	}

	return false
}

// SetSerialIncrement gets a reference to the given int64 and assigns it to the SerialIncrement field.
func (o *DataSOASerialIncrementRequest) SetSerialIncrement(v int64) {
	o.SerialIncrement = &v
}

func (o DataSOASerialIncrementRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataSOASerialIncrementRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SerialIncrement) {
		toSerialize["serial_increment"] = o.SerialIncrement
	}
	return toSerialize, nil
}

type NullableDataSOASerialIncrementRequest struct {
	value *DataSOASerialIncrementRequest
	isSet bool
}

func (v NullableDataSOASerialIncrementRequest) Get() *DataSOASerialIncrementRequest {
	return v.value
}

func (v *NullableDataSOASerialIncrementRequest) Set(val *DataSOASerialIncrementRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSOASerialIncrementRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSOASerialIncrementRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSOASerialIncrementRequest(val *DataSOASerialIncrementRequest) *NullableDataSOASerialIncrementRequest {
	return &NullableDataSOASerialIncrementRequest{value: val, isSet: true}
}

func (v NullableDataSOASerialIncrementRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSOASerialIncrementRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
