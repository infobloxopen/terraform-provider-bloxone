/*
DDI Keys API

The DDI Keys application is a BloxOne DDI service for managing TSIG keys and GSS-TSIG (Kerberos) keys which are used by other BloxOne DDI applications. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keys

import (
	"encoding/json"
	"time"
)

// checks if the KeysTSIGKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeysTSIGKey{}

// KeysTSIGKey A __TSIGKey__ object (_keys/tsig_) represents a TSIG key.
type KeysTSIGKey struct {
	// The TSIG key algorithm.  Valid values are: * _hmac_sha1_ * _hmac_sha224_ * _hmac_sha256_ * _hmac_sha384_ * _hmac_sha512_  Defaults to _hmac_sha256_.
	Algorithm *string `json:"algorithm,omitempty"`
	// The description for the TSIG key. May contain 0 to 1024 characters. Can include UTF-8.
	Comment *string `json:"comment,omitempty"`
	// Time when the object has been created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The resource identifier.
	Id *string `json:"id,omitempty"`
	// The TSIG key name in the absolute domain name format.
	Name string `json:"name"`
	// The TSIG key name supplied during a create/update operation that is converted to canonical form in punycode.
	ProtocolName *string `json:"protocol_name,omitempty"`
	// The TSIG key secret as a Base64 encoded string.
	Secret string `json:"secret"`
	// The tags for the TSIG key in JSON format.
	Tags map[string]interface{} `json:"tags,omitempty"`
	// Time when the object has been updated. Equals to _created_at_ if not updated after creation.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewKeysTSIGKey instantiates a new KeysTSIGKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeysTSIGKey(name string, secret string) *KeysTSIGKey {
	this := KeysTSIGKey{}
	this.Name = name
	this.Secret = secret
	return &this
}

// NewKeysTSIGKeyWithDefaults instantiates a new KeysTSIGKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeysTSIGKeyWithDefaults() *KeysTSIGKey {
	this := KeysTSIGKey{}
	return &this
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *KeysTSIGKey) GetAlgorithm() string {
	if o == nil || IsNil(o.Algorithm) {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysTSIGKey) GetAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.Algorithm) {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *KeysTSIGKey) HasAlgorithm() bool {
	if o != nil && !IsNil(o.Algorithm) {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *KeysTSIGKey) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *KeysTSIGKey) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysTSIGKey) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *KeysTSIGKey) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *KeysTSIGKey) SetComment(v string) {
	o.Comment = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *KeysTSIGKey) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysTSIGKey) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *KeysTSIGKey) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *KeysTSIGKey) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KeysTSIGKey) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysTSIGKey) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KeysTSIGKey) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *KeysTSIGKey) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *KeysTSIGKey) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KeysTSIGKey) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KeysTSIGKey) SetName(v string) {
	o.Name = v
}

// GetProtocolName returns the ProtocolName field value if set, zero value otherwise.
func (o *KeysTSIGKey) GetProtocolName() string {
	if o == nil || IsNil(o.ProtocolName) {
		var ret string
		return ret
	}
	return *o.ProtocolName
}

// GetProtocolNameOk returns a tuple with the ProtocolName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysTSIGKey) GetProtocolNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProtocolName) {
		return nil, false
	}
	return o.ProtocolName, true
}

// HasProtocolName returns a boolean if a field has been set.
func (o *KeysTSIGKey) HasProtocolName() bool {
	if o != nil && !IsNil(o.ProtocolName) {
		return true
	}

	return false
}

// SetProtocolName gets a reference to the given string and assigns it to the ProtocolName field.
func (o *KeysTSIGKey) SetProtocolName(v string) {
	o.ProtocolName = &v
}

// GetSecret returns the Secret field value
func (o *KeysTSIGKey) GetSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Secret
}

// GetSecretOk returns a tuple with the Secret field value
// and a boolean to check if the value has been set.
func (o *KeysTSIGKey) GetSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Secret, true
}

// SetSecret sets field value
func (o *KeysTSIGKey) SetSecret(v string) {
	o.Secret = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *KeysTSIGKey) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysTSIGKey) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *KeysTSIGKey) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *KeysTSIGKey) SetTags(v map[string]interface{}) {
	o.Tags = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *KeysTSIGKey) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysTSIGKey) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *KeysTSIGKey) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *KeysTSIGKey) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o KeysTSIGKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeysTSIGKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Algorithm) {
		toSerialize["algorithm"] = o.Algorithm
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.ProtocolName) {
		toSerialize["protocol_name"] = o.ProtocolName
	}
	toSerialize["secret"] = o.Secret
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableKeysTSIGKey struct {
	value *KeysTSIGKey
	isSet bool
}

func (v NullableKeysTSIGKey) Get() *KeysTSIGKey {
	return v.value
}

func (v *NullableKeysTSIGKey) Set(val *KeysTSIGKey) {
	v.value = val
	v.isSet = true
}

func (v NullableKeysTSIGKey) IsSet() bool {
	return v.isSet
}

func (v *NullableKeysTSIGKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeysTSIGKey(val *KeysTSIGKey) *NullableKeysTSIGKey {
	return &NullableKeysTSIGKey{value: val, isSet: true}
}

func (v NullableKeysTSIGKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeysTSIGKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
