/*
DDI Keys API

The DDI Keys application is a BloxOne DDI service for managing TSIG keys and GSS-TSIG (Kerberos) keys which are used by other BloxOne DDI applications. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keys

import (
	"encoding/json"
)

// checks if the KeysUpdateTSIGKeyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeysUpdateTSIGKeyResponse{}

// KeysUpdateTSIGKeyResponse The response format to update __TSIGKey__ object.
type KeysUpdateTSIGKeyResponse struct {
	Result *KeysTSIGKey `json:"result,omitempty"`
}

// NewKeysUpdateTSIGKeyResponse instantiates a new KeysUpdateTSIGKeyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeysUpdateTSIGKeyResponse() *KeysUpdateTSIGKeyResponse {
	this := KeysUpdateTSIGKeyResponse{}
	return &this
}

// NewKeysUpdateTSIGKeyResponseWithDefaults instantiates a new KeysUpdateTSIGKeyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeysUpdateTSIGKeyResponseWithDefaults() *KeysUpdateTSIGKeyResponse {
	this := KeysUpdateTSIGKeyResponse{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *KeysUpdateTSIGKeyResponse) GetResult() KeysTSIGKey {
	if o == nil || IsNil(o.Result) {
		var ret KeysTSIGKey
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysUpdateTSIGKeyResponse) GetResultOk() (*KeysTSIGKey, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *KeysUpdateTSIGKeyResponse) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given KeysTSIGKey and assigns it to the Result field.
func (o *KeysUpdateTSIGKeyResponse) SetResult(v KeysTSIGKey) {
	o.Result = &v
}

func (o KeysUpdateTSIGKeyResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeysUpdateTSIGKeyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return toSerialize, nil
}

type NullableKeysUpdateTSIGKeyResponse struct {
	value *KeysUpdateTSIGKeyResponse
	isSet bool
}

func (v NullableKeysUpdateTSIGKeyResponse) Get() *KeysUpdateTSIGKeyResponse {
	return v.value
}

func (v *NullableKeysUpdateTSIGKeyResponse) Set(val *KeysUpdateTSIGKeyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKeysUpdateTSIGKeyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKeysUpdateTSIGKeyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeysUpdateTSIGKeyResponse(val *KeysUpdateTSIGKeyResponse) *NullableKeysUpdateTSIGKeyResponse {
	return &NullableKeysUpdateTSIGKeyResponse{value: val, isSet: true}
}

func (v NullableKeysUpdateTSIGKeyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeysUpdateTSIGKeyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
