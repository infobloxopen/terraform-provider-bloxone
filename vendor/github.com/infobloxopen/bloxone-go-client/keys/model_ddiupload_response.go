/*
DDI Keys API

The DDI Keys application is a BloxOne DDI service for managing TSIG keys and GSS-TSIG (Kerberos) keys which are used by other BloxOne DDI applications. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keys

import (
	"encoding/json"
)

// checks if the DdiuploadResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DdiuploadResponse{}

// DdiuploadResponse The response format for uploading content.
type DdiuploadResponse struct {
	KerberosKeys *KerberosKeys `json:"kerberos_keys,omitempty"`
	// May contain any non-critical warning messages after processing the content.
	Warning *string `json:"warning,omitempty"`
}

// NewDdiuploadResponse instantiates a new DdiuploadResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDdiuploadResponse() *DdiuploadResponse {
	this := DdiuploadResponse{}
	return &this
}

// NewDdiuploadResponseWithDefaults instantiates a new DdiuploadResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDdiuploadResponseWithDefaults() *DdiuploadResponse {
	this := DdiuploadResponse{}
	return &this
}

// GetKerberosKeys returns the KerberosKeys field value if set, zero value otherwise.
func (o *DdiuploadResponse) GetKerberosKeys() KerberosKeys {
	if o == nil || IsNil(o.KerberosKeys) {
		var ret KerberosKeys
		return ret
	}
	return *o.KerberosKeys
}

// GetKerberosKeysOk returns a tuple with the KerberosKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdiuploadResponse) GetKerberosKeysOk() (*KerberosKeys, bool) {
	if o == nil || IsNil(o.KerberosKeys) {
		return nil, false
	}
	return o.KerberosKeys, true
}

// HasKerberosKeys returns a boolean if a field has been set.
func (o *DdiuploadResponse) HasKerberosKeys() bool {
	if o != nil && !IsNil(o.KerberosKeys) {
		return true
	}

	return false
}

// SetKerberosKeys gets a reference to the given KerberosKeys and assigns it to the KerberosKeys field.
func (o *DdiuploadResponse) SetKerberosKeys(v KerberosKeys) {
	o.KerberosKeys = &v
}

// GetWarning returns the Warning field value if set, zero value otherwise.
func (o *DdiuploadResponse) GetWarning() string {
	if o == nil || IsNil(o.Warning) {
		var ret string
		return ret
	}
	return *o.Warning
}

// GetWarningOk returns a tuple with the Warning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdiuploadResponse) GetWarningOk() (*string, bool) {
	if o == nil || IsNil(o.Warning) {
		return nil, false
	}
	return o.Warning, true
}

// HasWarning returns a boolean if a field has been set.
func (o *DdiuploadResponse) HasWarning() bool {
	if o != nil && !IsNil(o.Warning) {
		return true
	}

	return false
}

// SetWarning gets a reference to the given string and assigns it to the Warning field.
func (o *DdiuploadResponse) SetWarning(v string) {
	o.Warning = &v
}

func (o DdiuploadResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DdiuploadResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KerberosKeys) {
		toSerialize["kerberos_keys"] = o.KerberosKeys
	}
	if !IsNil(o.Warning) {
		toSerialize["warning"] = o.Warning
	}
	return toSerialize, nil
}

type NullableDdiuploadResponse struct {
	value *DdiuploadResponse
	isSet bool
}

func (v NullableDdiuploadResponse) Get() *DdiuploadResponse {
	return v.value
}

func (v *NullableDdiuploadResponse) Set(val *DdiuploadResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDdiuploadResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDdiuploadResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDdiuploadResponse(val *DdiuploadResponse) *NullableDdiuploadResponse {
	return &NullableDdiuploadResponse{value: val, isSet: true}
}

func (v NullableDdiuploadResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDdiuploadResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
