/*
DDI Keys API

The DDI Keys application is a BloxOne DDI service for managing TSIG keys and GSS-TSIG (Kerberos) keys which are used by other BloxOne DDI applications. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keys

import (
	"encoding/json"
)

// checks if the KeysGenerateTSIGResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeysGenerateTSIGResult{}

// KeysGenerateTSIGResult The generated TSIG key.
type KeysGenerateTSIGResult struct {
	// The random TSIG key secret generated by the specified algorithm as a Base64 encoded string.
	Secret *string `json:"secret,omitempty"`
}

// NewKeysGenerateTSIGResult instantiates a new KeysGenerateTSIGResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeysGenerateTSIGResult() *KeysGenerateTSIGResult {
	this := KeysGenerateTSIGResult{}
	return &this
}

// NewKeysGenerateTSIGResultWithDefaults instantiates a new KeysGenerateTSIGResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeysGenerateTSIGResultWithDefaults() *KeysGenerateTSIGResult {
	this := KeysGenerateTSIGResult{}
	return &this
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *KeysGenerateTSIGResult) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysGenerateTSIGResult) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *KeysGenerateTSIGResult) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *KeysGenerateTSIGResult) SetSecret(v string) {
	o.Secret = &v
}

func (o KeysGenerateTSIGResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeysGenerateTSIGResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	return toSerialize, nil
}

type NullableKeysGenerateTSIGResult struct {
	value *KeysGenerateTSIGResult
	isSet bool
}

func (v NullableKeysGenerateTSIGResult) Get() *KeysGenerateTSIGResult {
	return v.value
}

func (v *NullableKeysGenerateTSIGResult) Set(val *KeysGenerateTSIGResult) {
	v.value = val
	v.isSet = true
}

func (v NullableKeysGenerateTSIGResult) IsSet() bool {
	return v.isSet
}

func (v *NullableKeysGenerateTSIGResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeysGenerateTSIGResult(val *KeysGenerateTSIGResult) *NullableKeysGenerateTSIGResult {
	return &NullableKeysGenerateTSIGResult{value: val, isSet: true}
}

func (v NullableKeysGenerateTSIGResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeysGenerateTSIGResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
