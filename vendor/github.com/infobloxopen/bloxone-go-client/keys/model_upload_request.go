/*
DDI Keys API

The DDI Keys application is a BloxOne DDI service for managing TSIG keys and GSS-TSIG (Kerberos) keys which are used by other BloxOne DDI applications. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keys

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UploadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadRequest{}

// UploadRequest The request format for uploading content.
type UploadRequest struct {
	// The description for uploaded content. May contain 0 to 1024 characters. Can include UTF-8.
	Comment *string `json:"comment,omitempty"`
	// Base64 encoded content.
	Content string             `json:"content"`
	Fields  *ProtobufFieldMask `json:"fields,omitempty"`
	// The tags for uploaded content in JSON format.
	Tags map[string]interface{} `json:"tags,omitempty"`
	Type UploadContentType      `json:"type"`
}

type _UploadRequest UploadRequest

// NewUploadRequest instantiates a new UploadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadRequest(content string, type_ UploadContentType) *UploadRequest {
	this := UploadRequest{}
	this.Content = content
	this.Type = type_
	return &this
}

// NewUploadRequestWithDefaults instantiates a new UploadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadRequestWithDefaults() *UploadRequest {
	this := UploadRequest{}
	var type_ UploadContentType = UPLOADCONTENTTYPE_UNKNOWN
	this.Type = type_
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *UploadRequest) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadRequest) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *UploadRequest) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *UploadRequest) SetComment(v string) {
	o.Comment = &v
}

// GetContent returns the Content field value
func (o *UploadRequest) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *UploadRequest) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *UploadRequest) SetContent(v string) {
	o.Content = v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *UploadRequest) GetFields() ProtobufFieldMask {
	if o == nil || IsNil(o.Fields) {
		var ret ProtobufFieldMask
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadRequest) GetFieldsOk() (*ProtobufFieldMask, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *UploadRequest) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given ProtobufFieldMask and assigns it to the Fields field.
func (o *UploadRequest) SetFields(v ProtobufFieldMask) {
	o.Fields = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UploadRequest) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadRequest) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UploadRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *UploadRequest) SetTags(v map[string]interface{}) {
	o.Tags = v
}

// GetType returns the Type field value
func (o *UploadRequest) GetType() UploadContentType {
	if o == nil {
		var ret UploadContentType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UploadRequest) GetTypeOk() (*UploadContentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UploadRequest) SetType(v UploadContentType) {
	o.Type = v
}

func (o UploadRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	toSerialize["content"] = o.Content
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *UploadRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUploadRequest := _UploadRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUploadRequest)

	if err != nil {
		return err
	}

	*o = UploadRequest(varUploadRequest)

	return err
}

type NullableUploadRequest struct {
	value *UploadRequest
	isSet bool
}

func (v NullableUploadRequest) Get() *UploadRequest {
	return v.value
}

func (v *NullableUploadRequest) Set(val *UploadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadRequest(val *UploadRequest) *NullableUploadRequest {
	return &NullableUploadRequest{value: val, isSet: true}
}

func (v NullableUploadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
