/*
DDI Keys API

The DDI Keys application is a BloxOne DDI service for managing TSIG keys and GSS-TSIG (Kerberos) keys which are used by other BloxOne DDI applications. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keys

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	"github.com/infobloxopen/bloxone-go-client/internal"
)

type GenerateTsigAPI interface {
	/*
		GenerateTSIG Generate TSIG key with a random secret.

		Use this method to generate a TSIG key with a random secret using the specified algorithm.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return GenerateTsigAPIGenerateTSIGRequest
	*/
	GenerateTSIG(ctx context.Context) GenerateTsigAPIGenerateTSIGRequest

	// GenerateTSIGExecute executes the request
	//  @return GenerateTSIGResponse
	GenerateTSIGExecute(r GenerateTsigAPIGenerateTSIGRequest) (*GenerateTSIGResponse, *http.Response, error)
}

// GenerateTsigAPIService GenerateTsigAPI service
type GenerateTsigAPIService internal.Service

type GenerateTsigAPIGenerateTSIGRequest struct {
	ctx        context.Context
	ApiService GenerateTsigAPI
	algorithm  *string
}

// The TSIG key algorithm.  Valid values are: * _hmac_sha256_ * _hmac_sha1_ * _hmac_sha224_ * _hmac_sha384_ * _hmac_sha512_  Defaults to _hmac_sha256_.
func (r GenerateTsigAPIGenerateTSIGRequest) Algorithm(algorithm string) GenerateTsigAPIGenerateTSIGRequest {
	r.algorithm = &algorithm
	return r
}

func (r GenerateTsigAPIGenerateTSIGRequest) Execute() (*GenerateTSIGResponse, *http.Response, error) {
	return r.ApiService.GenerateTSIGExecute(r)
}

/*
GenerateTSIG Generate TSIG key with a random secret.

Use this method to generate a TSIG key with a random secret using the specified algorithm.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return GenerateTsigAPIGenerateTSIGRequest
*/
func (a *GenerateTsigAPIService) GenerateTSIG(ctx context.Context) GenerateTsigAPIGenerateTSIGRequest {
	return GenerateTsigAPIGenerateTSIGRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GenerateTSIGResponse
func (a *GenerateTsigAPIService) GenerateTSIGExecute(r GenerateTsigAPIGenerateTSIGRequest) (*GenerateTSIGResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *GenerateTSIGResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "GenerateTsigAPIService.GenerateTSIG")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/keys/generate_tsig"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.algorithm != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "algorithm", r.algorithm, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
