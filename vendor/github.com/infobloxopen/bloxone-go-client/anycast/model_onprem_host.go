/*
BloxOne Anycast API

Anycast capability enables HA (High Availability) configuration of BloxOne applications that run on equipment located on customer's premises (on-prem hosts). Anycast supports DNS, as well as DNS-forwarding services.  Anycast-enabled application setups use multiple on-premises installations for one particular application type. Multiple application instances are configured to use the same endpoint address. Anycast capability is collocated with such application instance, monitoring the local application instance and advertising to the upstream router (a customer equipment) a per-instance, local route to the common application endpoint address, as long as the local application instance is available. Depending on the type of the upstream router, the customer may configure local route advertisement via either BGP (Boarder Gateway Protocol) or OSPF (Open Shortest Path First) routing protocols. Both protocols may be enabled as well. Multiple routes to the common application service address provide redundancy without the need to reconfigure application clients.  Should an application instance become unavailable, the local route advertisements stop, resulting in withdrawal of the route (in the upstream router) to the application instance that has gone out of service and ensuring that subsequent application requests thus get routed to the remaining available application instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package anycast

import (
	"encoding/json"
	"time"
)

// checks if the OnpremHost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnpremHost{}

// OnpremHost struct for OnpremHost
type OnpremHost struct {
	AnycastConfigRefs []AnycastConfigRef `json:"anycast_config_refs,omitempty"`
	ConfigBgp         *BgpConfig         `json:"config_bgp,omitempty"`
	ConfigOspf        *OspfConfig        `json:"config_ospf,omitempty"`
	ConfigOspfv3      *Ospfv3Config      `json:"config_ospfv3,omitempty"`
	CreatedAt         *time.Time         `json:"created_at,omitempty"`
	Id                *int64             `json:"id,omitempty"`
	// IPv4 address of the on-prem host
	IpAddress *string `json:"ip_address,omitempty"`
	// IPv6 address of the on-prem host
	Ipv6Address *string    `json:"ipv6_address,omitempty"`
	Name        *string    `json:"name,omitempty"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// NewOnpremHost instantiates a new OnpremHost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnpremHost() *OnpremHost {
	this := OnpremHost{}
	return &this
}

// NewOnpremHostWithDefaults instantiates a new OnpremHost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnpremHostWithDefaults() *OnpremHost {
	this := OnpremHost{}
	return &this
}

// GetAnycastConfigRefs returns the AnycastConfigRefs field value if set, zero value otherwise.
func (o *OnpremHost) GetAnycastConfigRefs() []AnycastConfigRef {
	if o == nil || IsNil(o.AnycastConfigRefs) {
		var ret []AnycastConfigRef
		return ret
	}
	return o.AnycastConfigRefs
}

// GetAnycastConfigRefsOk returns a tuple with the AnycastConfigRefs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnpremHost) GetAnycastConfigRefsOk() ([]AnycastConfigRef, bool) {
	if o == nil || IsNil(o.AnycastConfigRefs) {
		return nil, false
	}
	return o.AnycastConfigRefs, true
}

// HasAnycastConfigRefs returns a boolean if a field has been set.
func (o *OnpremHost) HasAnycastConfigRefs() bool {
	if o != nil && !IsNil(o.AnycastConfigRefs) {
		return true
	}

	return false
}

// SetAnycastConfigRefs gets a reference to the given []AnycastConfigRef and assigns it to the AnycastConfigRefs field.
func (o *OnpremHost) SetAnycastConfigRefs(v []AnycastConfigRef) {
	o.AnycastConfigRefs = v
}

// GetConfigBgp returns the ConfigBgp field value if set, zero value otherwise.
func (o *OnpremHost) GetConfigBgp() BgpConfig {
	if o == nil || IsNil(o.ConfigBgp) {
		var ret BgpConfig
		return ret
	}
	return *o.ConfigBgp
}

// GetConfigBgpOk returns a tuple with the ConfigBgp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnpremHost) GetConfigBgpOk() (*BgpConfig, bool) {
	if o == nil || IsNil(o.ConfigBgp) {
		return nil, false
	}
	return o.ConfigBgp, true
}

// HasConfigBgp returns a boolean if a field has been set.
func (o *OnpremHost) HasConfigBgp() bool {
	if o != nil && !IsNil(o.ConfigBgp) {
		return true
	}

	return false
}

// SetConfigBgp gets a reference to the given BgpConfig and assigns it to the ConfigBgp field.
func (o *OnpremHost) SetConfigBgp(v BgpConfig) {
	o.ConfigBgp = &v
}

// GetConfigOspf returns the ConfigOspf field value if set, zero value otherwise.
func (o *OnpremHost) GetConfigOspf() OspfConfig {
	if o == nil || IsNil(o.ConfigOspf) {
		var ret OspfConfig
		return ret
	}
	return *o.ConfigOspf
}

// GetConfigOspfOk returns a tuple with the ConfigOspf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnpremHost) GetConfigOspfOk() (*OspfConfig, bool) {
	if o == nil || IsNil(o.ConfigOspf) {
		return nil, false
	}
	return o.ConfigOspf, true
}

// HasConfigOspf returns a boolean if a field has been set.
func (o *OnpremHost) HasConfigOspf() bool {
	if o != nil && !IsNil(o.ConfigOspf) {
		return true
	}

	return false
}

// SetConfigOspf gets a reference to the given OspfConfig and assigns it to the ConfigOspf field.
func (o *OnpremHost) SetConfigOspf(v OspfConfig) {
	o.ConfigOspf = &v
}

// GetConfigOspfv3 returns the ConfigOspfv3 field value if set, zero value otherwise.
func (o *OnpremHost) GetConfigOspfv3() Ospfv3Config {
	if o == nil || IsNil(o.ConfigOspfv3) {
		var ret Ospfv3Config
		return ret
	}
	return *o.ConfigOspfv3
}

// GetConfigOspfv3Ok returns a tuple with the ConfigOspfv3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnpremHost) GetConfigOspfv3Ok() (*Ospfv3Config, bool) {
	if o == nil || IsNil(o.ConfigOspfv3) {
		return nil, false
	}
	return o.ConfigOspfv3, true
}

// HasConfigOspfv3 returns a boolean if a field has been set.
func (o *OnpremHost) HasConfigOspfv3() bool {
	if o != nil && !IsNil(o.ConfigOspfv3) {
		return true
	}

	return false
}

// SetConfigOspfv3 gets a reference to the given Ospfv3Config and assigns it to the ConfigOspfv3 field.
func (o *OnpremHost) SetConfigOspfv3(v Ospfv3Config) {
	o.ConfigOspfv3 = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *OnpremHost) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnpremHost) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *OnpremHost) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *OnpremHost) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OnpremHost) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnpremHost) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OnpremHost) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *OnpremHost) SetId(v int64) {
	o.Id = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *OnpremHost) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnpremHost) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *OnpremHost) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *OnpremHost) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetIpv6Address returns the Ipv6Address field value if set, zero value otherwise.
func (o *OnpremHost) GetIpv6Address() string {
	if o == nil || IsNil(o.Ipv6Address) {
		var ret string
		return ret
	}
	return *o.Ipv6Address
}

// GetIpv6AddressOk returns a tuple with the Ipv6Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnpremHost) GetIpv6AddressOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6Address) {
		return nil, false
	}
	return o.Ipv6Address, true
}

// HasIpv6Address returns a boolean if a field has been set.
func (o *OnpremHost) HasIpv6Address() bool {
	if o != nil && !IsNil(o.Ipv6Address) {
		return true
	}

	return false
}

// SetIpv6Address gets a reference to the given string and assigns it to the Ipv6Address field.
func (o *OnpremHost) SetIpv6Address(v string) {
	o.Ipv6Address = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OnpremHost) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnpremHost) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OnpremHost) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OnpremHost) SetName(v string) {
	o.Name = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *OnpremHost) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnpremHost) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *OnpremHost) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *OnpremHost) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o OnpremHost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnpremHost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AnycastConfigRefs) {
		toSerialize["anycast_config_refs"] = o.AnycastConfigRefs
	}
	if !IsNil(o.ConfigBgp) {
		toSerialize["config_bgp"] = o.ConfigBgp
	}
	if !IsNil(o.ConfigOspf) {
		toSerialize["config_ospf"] = o.ConfigOspf
	}
	if !IsNil(o.ConfigOspfv3) {
		toSerialize["config_ospfv3"] = o.ConfigOspfv3
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ip_address"] = o.IpAddress
	}
	if !IsNil(o.Ipv6Address) {
		toSerialize["ipv6_address"] = o.Ipv6Address
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableOnpremHost struct {
	value *OnpremHost
	isSet bool
}

func (v NullableOnpremHost) Get() *OnpremHost {
	return v.value
}

func (v *NullableOnpremHost) Set(val *OnpremHost) {
	v.value = val
	v.isSet = true
}

func (v NullableOnpremHost) IsSet() bool {
	return v.isSet
}

func (v *NullableOnpremHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnpremHost(val *OnpremHost) *NullableOnpremHost {
	return &NullableOnpremHost{value: val, isSet: true}
}

func (v NullableOnpremHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnpremHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
