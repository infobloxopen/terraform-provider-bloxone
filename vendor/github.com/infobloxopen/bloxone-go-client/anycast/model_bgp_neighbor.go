/*
BloxOne Anycast API

Anycast capability enables HA (High Availability) configuration of BloxOne applications that run on equipment located on customer's premises (on-prem hosts). Anycast supports DNS, as well as DNS-forwarding services.  Anycast-enabled application setups use multiple on-premises installations for one particular application type. Multiple application instances are configured to use the same endpoint address. Anycast capability is collocated with such application instance, monitoring the local application instance and advertising to the upstream router (a customer equipment) a per-instance, local route to the common application endpoint address, as long as the local application instance is available. Depending on the type of the upstream router, the customer may configure local route advertisement via either BGP (Boarder Gateway Protocol) or OSPF (Open Shortest Path First) routing protocols. Both protocols may be enabled as well. Multiple routes to the common application service address provide redundancy without the need to reconfigure application clients.  Should an application instance become unavailable, the local route advertisements stop, resulting in withdrawal of the route (in the upstream router) to the application instance that has gone out of service and ensuring that subsequent application requests thus get routed to the remaining available application instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package anycast

import (
	"encoding/json"
)

// checks if the BgpNeighbor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BgpNeighbor{}

// BgpNeighbor struct for BgpNeighbor
type BgpNeighbor struct {
	Asn *int64 `json:"asn,omitempty"`
	// Examples:     ASDOT        ASPLAIN     INTEGER     VALID/INVALID     0.1          1           1           Valid     1            1           1           Valid     65535        65535       65535       Valid     0.65535      65535       65535       Valid     1.0          65536       65536       Valid     1.1          65537       65537       Valid     1.65535      131071      131071      Valid     65535.0      4294901760  4294901760  Valid     65535.1      4294901761  4294901761  Valid     65535.65535  4294967295  4294967295  Valid      0.65536                              Invalid     65535.655536                         Invalid     65536.0                              Invalid     65536.65535                          Invalid                  4294967296              Invalid
	AsnText *string `json:"asn_text,omitempty"`
	// IPv4 address of the BGP neighbor
	IpAddress   *string `json:"ip_address,omitempty"`
	MaxHopCount *int64  `json:"max_hop_count,omitempty"`
	Multihop    *bool   `json:"multihop,omitempty"`
	Password    *string `json:"password,omitempty"`
}

// NewBgpNeighbor instantiates a new BgpNeighbor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgpNeighbor() *BgpNeighbor {
	this := BgpNeighbor{}
	return &this
}

// NewBgpNeighborWithDefaults instantiates a new BgpNeighbor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpNeighborWithDefaults() *BgpNeighbor {
	this := BgpNeighbor{}
	return &this
}

// GetAsn returns the Asn field value if set, zero value otherwise.
func (o *BgpNeighbor) GetAsn() int64 {
	if o == nil || IsNil(o.Asn) {
		var ret int64
		return ret
	}
	return *o.Asn
}

// GetAsnOk returns a tuple with the Asn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpNeighbor) GetAsnOk() (*int64, bool) {
	if o == nil || IsNil(o.Asn) {
		return nil, false
	}
	return o.Asn, true
}

// HasAsn returns a boolean if a field has been set.
func (o *BgpNeighbor) HasAsn() bool {
	if o != nil && !IsNil(o.Asn) {
		return true
	}

	return false
}

// SetAsn gets a reference to the given int64 and assigns it to the Asn field.
func (o *BgpNeighbor) SetAsn(v int64) {
	o.Asn = &v
}

// GetAsnText returns the AsnText field value if set, zero value otherwise.
func (o *BgpNeighbor) GetAsnText() string {
	if o == nil || IsNil(o.AsnText) {
		var ret string
		return ret
	}
	return *o.AsnText
}

// GetAsnTextOk returns a tuple with the AsnText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpNeighbor) GetAsnTextOk() (*string, bool) {
	if o == nil || IsNil(o.AsnText) {
		return nil, false
	}
	return o.AsnText, true
}

// HasAsnText returns a boolean if a field has been set.
func (o *BgpNeighbor) HasAsnText() bool {
	if o != nil && !IsNil(o.AsnText) {
		return true
	}

	return false
}

// SetAsnText gets a reference to the given string and assigns it to the AsnText field.
func (o *BgpNeighbor) SetAsnText(v string) {
	o.AsnText = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *BgpNeighbor) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpNeighbor) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *BgpNeighbor) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *BgpNeighbor) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetMaxHopCount returns the MaxHopCount field value if set, zero value otherwise.
func (o *BgpNeighbor) GetMaxHopCount() int64 {
	if o == nil || IsNil(o.MaxHopCount) {
		var ret int64
		return ret
	}
	return *o.MaxHopCount
}

// GetMaxHopCountOk returns a tuple with the MaxHopCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpNeighbor) GetMaxHopCountOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxHopCount) {
		return nil, false
	}
	return o.MaxHopCount, true
}

// HasMaxHopCount returns a boolean if a field has been set.
func (o *BgpNeighbor) HasMaxHopCount() bool {
	if o != nil && !IsNil(o.MaxHopCount) {
		return true
	}

	return false
}

// SetMaxHopCount gets a reference to the given int64 and assigns it to the MaxHopCount field.
func (o *BgpNeighbor) SetMaxHopCount(v int64) {
	o.MaxHopCount = &v
}

// GetMultihop returns the Multihop field value if set, zero value otherwise.
func (o *BgpNeighbor) GetMultihop() bool {
	if o == nil || IsNil(o.Multihop) {
		var ret bool
		return ret
	}
	return *o.Multihop
}

// GetMultihopOk returns a tuple with the Multihop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpNeighbor) GetMultihopOk() (*bool, bool) {
	if o == nil || IsNil(o.Multihop) {
		return nil, false
	}
	return o.Multihop, true
}

// HasMultihop returns a boolean if a field has been set.
func (o *BgpNeighbor) HasMultihop() bool {
	if o != nil && !IsNil(o.Multihop) {
		return true
	}

	return false
}

// SetMultihop gets a reference to the given bool and assigns it to the Multihop field.
func (o *BgpNeighbor) SetMultihop(v bool) {
	o.Multihop = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *BgpNeighbor) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpNeighbor) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *BgpNeighbor) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *BgpNeighbor) SetPassword(v string) {
	o.Password = &v
}

func (o BgpNeighbor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BgpNeighbor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Asn) {
		toSerialize["asn"] = o.Asn
	}
	if !IsNil(o.AsnText) {
		toSerialize["asn_text"] = o.AsnText
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ip_address"] = o.IpAddress
	}
	if !IsNil(o.MaxHopCount) {
		toSerialize["max_hop_count"] = o.MaxHopCount
	}
	if !IsNil(o.Multihop) {
		toSerialize["multihop"] = o.Multihop
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

type NullableBgpNeighbor struct {
	value *BgpNeighbor
	isSet bool
}

func (v NullableBgpNeighbor) Get() *BgpNeighbor {
	return v.value
}

func (v *NullableBgpNeighbor) Set(val *BgpNeighbor) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpNeighbor) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpNeighbor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpNeighbor(val *BgpNeighbor) *NullableBgpNeighbor {
	return &NullableBgpNeighbor{value: val, isSet: true}
}

func (v NullableBgpNeighbor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpNeighbor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
