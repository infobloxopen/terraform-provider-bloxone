/*
BloxOne Anycast API

Anycast capability enables HA (High Availability) configuration of BloxOne applications that run on equipment located on customer's premises (on-prem hosts). Anycast supports DNS, as well as DNS-forwarding services.  Anycast-enabled application setups use multiple on-premises installations for one particular application type. Multiple application instances are configured to use the same endpoint address. Anycast capability is collocated with such application instance, monitoring the local application instance and advertising to the upstream router (a customer equipment) a per-instance, local route to the common application endpoint address, as long as the local application instance is available. Depending on the type of the upstream router, the customer may configure local route advertisement via either BGP (Boarder Gateway Protocol) or OSPF (Open Shortest Path First) routing protocols. Both protocols may be enabled as well. Multiple routes to the common application service address provide redundancy without the need to reconfigure application clients.  Should an application instance become unavailable, the local route advertisements stop, resulting in withdrawal of the route (in the upstream router) to the application instance that has gone out of service and ensuring that subsequent application requests thus get routed to the remaining available application instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package anycast

import (
	"encoding/json"
)

// checks if the ServiceStatusUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceStatusUpdateRequest{}

// ServiceStatusUpdateRequest struct for ServiceStatusUpdateRequest
type ServiceStatusUpdateRequest struct {
	AppName              *string            `json:"appName,omitempty"`
	Message              *string            `json:"message,omitempty"`
	Ophid                *string            `json:"ophid,omitempty"`
	StatusCode           *ServiceStatusCode `json:"statusCode,omitempty"`
	Version              *string            `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServiceStatusUpdateRequest ServiceStatusUpdateRequest

// NewServiceStatusUpdateRequest instantiates a new ServiceStatusUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceStatusUpdateRequest() *ServiceStatusUpdateRequest {
	this := ServiceStatusUpdateRequest{}
	var statusCode ServiceStatusCode = SERVICESTATUSCODE_SUCCESS
	this.StatusCode = &statusCode
	return &this
}

// NewServiceStatusUpdateRequestWithDefaults instantiates a new ServiceStatusUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceStatusUpdateRequestWithDefaults() *ServiceStatusUpdateRequest {
	this := ServiceStatusUpdateRequest{}
	var statusCode ServiceStatusCode = SERVICESTATUSCODE_SUCCESS
	this.StatusCode = &statusCode
	return &this
}

// GetAppName returns the AppName field value if set, zero value otherwise.
func (o *ServiceStatusUpdateRequest) GetAppName() string {
	if o == nil || IsNil(o.AppName) {
		var ret string
		return ret
	}
	return *o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceStatusUpdateRequest) GetAppNameOk() (*string, bool) {
	if o == nil || IsNil(o.AppName) {
		return nil, false
	}
	return o.AppName, true
}

// HasAppName returns a boolean if a field has been set.
func (o *ServiceStatusUpdateRequest) HasAppName() bool {
	if o != nil && !IsNil(o.AppName) {
		return true
	}

	return false
}

// SetAppName gets a reference to the given string and assigns it to the AppName field.
func (o *ServiceStatusUpdateRequest) SetAppName(v string) {
	o.AppName = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ServiceStatusUpdateRequest) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceStatusUpdateRequest) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ServiceStatusUpdateRequest) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ServiceStatusUpdateRequest) SetMessage(v string) {
	o.Message = &v
}

// GetOphid returns the Ophid field value if set, zero value otherwise.
func (o *ServiceStatusUpdateRequest) GetOphid() string {
	if o == nil || IsNil(o.Ophid) {
		var ret string
		return ret
	}
	return *o.Ophid
}

// GetOphidOk returns a tuple with the Ophid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceStatusUpdateRequest) GetOphidOk() (*string, bool) {
	if o == nil || IsNil(o.Ophid) {
		return nil, false
	}
	return o.Ophid, true
}

// HasOphid returns a boolean if a field has been set.
func (o *ServiceStatusUpdateRequest) HasOphid() bool {
	if o != nil && !IsNil(o.Ophid) {
		return true
	}

	return false
}

// SetOphid gets a reference to the given string and assigns it to the Ophid field.
func (o *ServiceStatusUpdateRequest) SetOphid(v string) {
	o.Ophid = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *ServiceStatusUpdateRequest) GetStatusCode() ServiceStatusCode {
	if o == nil || IsNil(o.StatusCode) {
		var ret ServiceStatusCode
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceStatusUpdateRequest) GetStatusCodeOk() (*ServiceStatusCode, bool) {
	if o == nil || IsNil(o.StatusCode) {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *ServiceStatusUpdateRequest) HasStatusCode() bool {
	if o != nil && !IsNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given ServiceStatusCode and assigns it to the StatusCode field.
func (o *ServiceStatusUpdateRequest) SetStatusCode(v ServiceStatusCode) {
	o.StatusCode = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ServiceStatusUpdateRequest) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceStatusUpdateRequest) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ServiceStatusUpdateRequest) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ServiceStatusUpdateRequest) SetVersion(v string) {
	o.Version = &v
}

func (o ServiceStatusUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceStatusUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppName) {
		toSerialize["appName"] = o.AppName
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Ophid) {
		toSerialize["ophid"] = o.Ophid
	}
	if !IsNil(o.StatusCode) {
		toSerialize["statusCode"] = o.StatusCode
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceStatusUpdateRequest) UnmarshalJSON(data []byte) (err error) {
	varServiceStatusUpdateRequest := _ServiceStatusUpdateRequest{}

	err = json.Unmarshal(data, &varServiceStatusUpdateRequest)

	if err != nil {
		return err
	}

	*o = ServiceStatusUpdateRequest(varServiceStatusUpdateRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "appName")
		delete(additionalProperties, "message")
		delete(additionalProperties, "ophid")
		delete(additionalProperties, "statusCode")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceStatusUpdateRequest struct {
	value *ServiceStatusUpdateRequest
	isSet bool
}

func (v NullableServiceStatusUpdateRequest) Get() *ServiceStatusUpdateRequest {
	return v.value
}

func (v *NullableServiceStatusUpdateRequest) Set(val *ServiceStatusUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceStatusUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceStatusUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceStatusUpdateRequest(val *ServiceStatusUpdateRequest) *NullableServiceStatusUpdateRequest {
	return &NullableServiceStatusUpdateRequest{value: val, isSet: true}
}

func (v NullableServiceStatusUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceStatusUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
