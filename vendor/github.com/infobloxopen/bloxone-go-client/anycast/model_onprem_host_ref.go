/*
BloxOne Anycast API

Anycast capability enables HA (High Availability) configuration of BloxOne applications that run on equipment located on customer's premises (on-prem hosts). Anycast supports DNS, as well as DNS-forwarding services.  Anycast-enabled application setups use multiple on-premises installations for one particular application type. Multiple application instances are configured to use the same endpoint address. Anycast capability is collocated with such application instance, monitoring the local application instance and advertising to the upstream router (a customer equipment) a per-instance, local route to the common application endpoint address, as long as the local application instance is available. Depending on the type of the upstream router, the customer may configure local route advertisement via either BGP (Boarder Gateway Protocol) or OSPF (Open Shortest Path First) routing protocols. Both protocols may be enabled as well. Multiple routes to the common application service address provide redundancy without the need to reconfigure application clients.  Should an application instance become unavailable, the local route advertisements stop, resulting in withdrawal of the route (in the upstream router) to the application instance that has gone out of service and ensuring that subsequent application requests thus get routed to the remaining available application instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package anycast

import (
	"encoding/json"
)

// checks if the OnpremHostRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnpremHostRef{}

// OnpremHostRef Struct on-prem host reference.
type OnpremHostRef struct {
	Id *int64 `json:"id,omitempty"`
	// IPv4 address of the host in string format
	IpAddress *string `json:"ip_address,omitempty"`
	// IPv6 address of the host in string format
	Ipv6Address *string `json:"ipv6_address,omitempty"`
	Name        *string `json:"name,omitempty"`
	// Unique 32-character string identifier assigned to the host
	Ophid         *string `json:"ophid,omitempty"`
	RuntimeStatus *string `json:"runtime_status,omitempty"`
}

// NewOnpremHostRef instantiates a new OnpremHostRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnpremHostRef() *OnpremHostRef {
	this := OnpremHostRef{}
	return &this
}

// NewOnpremHostRefWithDefaults instantiates a new OnpremHostRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnpremHostRefWithDefaults() *OnpremHostRef {
	this := OnpremHostRef{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OnpremHostRef) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnpremHostRef) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OnpremHostRef) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *OnpremHostRef) SetId(v int64) {
	o.Id = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *OnpremHostRef) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnpremHostRef) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *OnpremHostRef) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *OnpremHostRef) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetIpv6Address returns the Ipv6Address field value if set, zero value otherwise.
func (o *OnpremHostRef) GetIpv6Address() string {
	if o == nil || IsNil(o.Ipv6Address) {
		var ret string
		return ret
	}
	return *o.Ipv6Address
}

// GetIpv6AddressOk returns a tuple with the Ipv6Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnpremHostRef) GetIpv6AddressOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6Address) {
		return nil, false
	}
	return o.Ipv6Address, true
}

// HasIpv6Address returns a boolean if a field has been set.
func (o *OnpremHostRef) HasIpv6Address() bool {
	if o != nil && !IsNil(o.Ipv6Address) {
		return true
	}

	return false
}

// SetIpv6Address gets a reference to the given string and assigns it to the Ipv6Address field.
func (o *OnpremHostRef) SetIpv6Address(v string) {
	o.Ipv6Address = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OnpremHostRef) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnpremHostRef) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OnpremHostRef) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OnpremHostRef) SetName(v string) {
	o.Name = &v
}

// GetOphid returns the Ophid field value if set, zero value otherwise.
func (o *OnpremHostRef) GetOphid() string {
	if o == nil || IsNil(o.Ophid) {
		var ret string
		return ret
	}
	return *o.Ophid
}

// GetOphidOk returns a tuple with the Ophid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnpremHostRef) GetOphidOk() (*string, bool) {
	if o == nil || IsNil(o.Ophid) {
		return nil, false
	}
	return o.Ophid, true
}

// HasOphid returns a boolean if a field has been set.
func (o *OnpremHostRef) HasOphid() bool {
	if o != nil && !IsNil(o.Ophid) {
		return true
	}

	return false
}

// SetOphid gets a reference to the given string and assigns it to the Ophid field.
func (o *OnpremHostRef) SetOphid(v string) {
	o.Ophid = &v
}

// GetRuntimeStatus returns the RuntimeStatus field value if set, zero value otherwise.
func (o *OnpremHostRef) GetRuntimeStatus() string {
	if o == nil || IsNil(o.RuntimeStatus) {
		var ret string
		return ret
	}
	return *o.RuntimeStatus
}

// GetRuntimeStatusOk returns a tuple with the RuntimeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnpremHostRef) GetRuntimeStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RuntimeStatus) {
		return nil, false
	}
	return o.RuntimeStatus, true
}

// HasRuntimeStatus returns a boolean if a field has been set.
func (o *OnpremHostRef) HasRuntimeStatus() bool {
	if o != nil && !IsNil(o.RuntimeStatus) {
		return true
	}

	return false
}

// SetRuntimeStatus gets a reference to the given string and assigns it to the RuntimeStatus field.
func (o *OnpremHostRef) SetRuntimeStatus(v string) {
	o.RuntimeStatus = &v
}

func (o OnpremHostRef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnpremHostRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ip_address"] = o.IpAddress
	}
	if !IsNil(o.Ipv6Address) {
		toSerialize["ipv6_address"] = o.Ipv6Address
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Ophid) {
		toSerialize["ophid"] = o.Ophid
	}
	if !IsNil(o.RuntimeStatus) {
		toSerialize["runtime_status"] = o.RuntimeStatus
	}
	return toSerialize, nil
}

type NullableOnpremHostRef struct {
	value *OnpremHostRef
	isSet bool
}

func (v NullableOnpremHostRef) Get() *OnpremHostRef {
	return v.value
}

func (v *NullableOnpremHostRef) Set(val *OnpremHostRef) {
	v.value = val
	v.isSet = true
}

func (v NullableOnpremHostRef) IsSet() bool {
	return v.isSet
}

func (v *NullableOnpremHostRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnpremHostRef(val *OnpremHostRef) *NullableOnpremHostRef {
	return &NullableOnpremHostRef{value: val, isSet: true}
}

func (v NullableOnpremHostRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnpremHostRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
