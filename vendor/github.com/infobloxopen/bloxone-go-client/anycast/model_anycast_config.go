/*
BloxOne Anycast API

Anycast capability enables HA (High Availability) configuration of BloxOne applications that run on equipment located on customer's premises (on-prem hosts). Anycast supports DNS, as well as DNS-forwarding services.  Anycast-enabled application setups use multiple on-premises installations for one particular application type. Multiple application instances are configured to use the same endpoint address. Anycast capability is collocated with such application instance, monitoring the local application instance and advertising to the upstream router (a customer equipment) a per-instance, local route to the common application endpoint address, as long as the local application instance is available. Depending on the type of the upstream router, the customer may configure local route advertisement via either BGP (Boarder Gateway Protocol) or OSPF (Open Shortest Path First) routing protocols. Both protocols may be enabled as well. Multiple routes to the common application service address provide redundancy without the need to reconfigure application clients.  Should an application instance become unavailable, the local route advertisements stop, resulting in withdrawal of the route (in the upstream router) to the application instance that has gone out of service and ensuring that subsequent application requests thus get routed to the remaining available application instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package anycast

import (
	"encoding/json"
	"time"
)

// checks if the AnycastConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnycastConfig{}

// AnycastConfig struct for AnycastConfig
type AnycastConfig struct {
	AccountId            *int64                 `json:"account_id,omitempty"`
	AnycastIpAddress     *string                `json:"anycast_ip_address,omitempty"`
	AnycastIpv6Address   *string                `json:"anycast_ipv6_address,omitempty"`
	CreatedAt            *time.Time             `json:"created_at,omitempty"`
	Description          *string                `json:"description,omitempty"`
	Fields               *BufFieldMask          `json:"fields,omitempty"`
	Id                   *int64                 `json:"id,omitempty"`
	IsConfigured         *bool                  `json:"is_configured,omitempty"`
	Name                 *string                `json:"name,omitempty"`
	OnpremHosts          []OnpremHostRef        `json:"onprem_hosts,omitempty"`
	RuntimeStatus        *string                `json:"runtime_status,omitempty"`
	Service              *string                `json:"service,omitempty"`
	Tags                 map[string]interface{} `json:"tags,omitempty"`
	UpdatedAt            *time.Time             `json:"updated_at,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AnycastConfig AnycastConfig

// NewAnycastConfig instantiates a new AnycastConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnycastConfig() *AnycastConfig {
	this := AnycastConfig{}
	return &this
}

// NewAnycastConfigWithDefaults instantiates a new AnycastConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnycastConfigWithDefaults() *AnycastConfig {
	this := AnycastConfig{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *AnycastConfig) GetAccountId() int64 {
	if o == nil || IsNil(o.AccountId) {
		var ret int64
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnycastConfig) GetAccountIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *AnycastConfig) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given int64 and assigns it to the AccountId field.
func (o *AnycastConfig) SetAccountId(v int64) {
	o.AccountId = &v
}

// GetAnycastIpAddress returns the AnycastIpAddress field value if set, zero value otherwise.
func (o *AnycastConfig) GetAnycastIpAddress() string {
	if o == nil || IsNil(o.AnycastIpAddress) {
		var ret string
		return ret
	}
	return *o.AnycastIpAddress
}

// GetAnycastIpAddressOk returns a tuple with the AnycastIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnycastConfig) GetAnycastIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.AnycastIpAddress) {
		return nil, false
	}
	return o.AnycastIpAddress, true
}

// HasAnycastIpAddress returns a boolean if a field has been set.
func (o *AnycastConfig) HasAnycastIpAddress() bool {
	if o != nil && !IsNil(o.AnycastIpAddress) {
		return true
	}

	return false
}

// SetAnycastIpAddress gets a reference to the given string and assigns it to the AnycastIpAddress field.
func (o *AnycastConfig) SetAnycastIpAddress(v string) {
	o.AnycastIpAddress = &v
}

// GetAnycastIpv6Address returns the AnycastIpv6Address field value if set, zero value otherwise.
func (o *AnycastConfig) GetAnycastIpv6Address() string {
	if o == nil || IsNil(o.AnycastIpv6Address) {
		var ret string
		return ret
	}
	return *o.AnycastIpv6Address
}

// GetAnycastIpv6AddressOk returns a tuple with the AnycastIpv6Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnycastConfig) GetAnycastIpv6AddressOk() (*string, bool) {
	if o == nil || IsNil(o.AnycastIpv6Address) {
		return nil, false
	}
	return o.AnycastIpv6Address, true
}

// HasAnycastIpv6Address returns a boolean if a field has been set.
func (o *AnycastConfig) HasAnycastIpv6Address() bool {
	if o != nil && !IsNil(o.AnycastIpv6Address) {
		return true
	}

	return false
}

// SetAnycastIpv6Address gets a reference to the given string and assigns it to the AnycastIpv6Address field.
func (o *AnycastConfig) SetAnycastIpv6Address(v string) {
	o.AnycastIpv6Address = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AnycastConfig) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnycastConfig) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AnycastConfig) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *AnycastConfig) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AnycastConfig) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnycastConfig) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AnycastConfig) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AnycastConfig) SetDescription(v string) {
	o.Description = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *AnycastConfig) GetFields() BufFieldMask {
	if o == nil || IsNil(o.Fields) {
		var ret BufFieldMask
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnycastConfig) GetFieldsOk() (*BufFieldMask, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *AnycastConfig) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given BufFieldMask and assigns it to the Fields field.
func (o *AnycastConfig) SetFields(v BufFieldMask) {
	o.Fields = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AnycastConfig) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnycastConfig) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AnycastConfig) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *AnycastConfig) SetId(v int64) {
	o.Id = &v
}

// GetIsConfigured returns the IsConfigured field value if set, zero value otherwise.
func (o *AnycastConfig) GetIsConfigured() bool {
	if o == nil || IsNil(o.IsConfigured) {
		var ret bool
		return ret
	}
	return *o.IsConfigured
}

// GetIsConfiguredOk returns a tuple with the IsConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnycastConfig) GetIsConfiguredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsConfigured) {
		return nil, false
	}
	return o.IsConfigured, true
}

// HasIsConfigured returns a boolean if a field has been set.
func (o *AnycastConfig) HasIsConfigured() bool {
	if o != nil && !IsNil(o.IsConfigured) {
		return true
	}

	return false
}

// SetIsConfigured gets a reference to the given bool and assigns it to the IsConfigured field.
func (o *AnycastConfig) SetIsConfigured(v bool) {
	o.IsConfigured = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AnycastConfig) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnycastConfig) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AnycastConfig) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AnycastConfig) SetName(v string) {
	o.Name = &v
}

// GetOnpremHosts returns the OnpremHosts field value if set, zero value otherwise.
func (o *AnycastConfig) GetOnpremHosts() []OnpremHostRef {
	if o == nil || IsNil(o.OnpremHosts) {
		var ret []OnpremHostRef
		return ret
	}
	return o.OnpremHosts
}

// GetOnpremHostsOk returns a tuple with the OnpremHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnycastConfig) GetOnpremHostsOk() ([]OnpremHostRef, bool) {
	if o == nil || IsNil(o.OnpremHosts) {
		return nil, false
	}
	return o.OnpremHosts, true
}

// HasOnpremHosts returns a boolean if a field has been set.
func (o *AnycastConfig) HasOnpremHosts() bool {
	if o != nil && !IsNil(o.OnpremHosts) {
		return true
	}

	return false
}

// SetOnpremHosts gets a reference to the given []OnpremHostRef and assigns it to the OnpremHosts field.
func (o *AnycastConfig) SetOnpremHosts(v []OnpremHostRef) {
	o.OnpremHosts = v
}

// GetRuntimeStatus returns the RuntimeStatus field value if set, zero value otherwise.
func (o *AnycastConfig) GetRuntimeStatus() string {
	if o == nil || IsNil(o.RuntimeStatus) {
		var ret string
		return ret
	}
	return *o.RuntimeStatus
}

// GetRuntimeStatusOk returns a tuple with the RuntimeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnycastConfig) GetRuntimeStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RuntimeStatus) {
		return nil, false
	}
	return o.RuntimeStatus, true
}

// HasRuntimeStatus returns a boolean if a field has been set.
func (o *AnycastConfig) HasRuntimeStatus() bool {
	if o != nil && !IsNil(o.RuntimeStatus) {
		return true
	}

	return false
}

// SetRuntimeStatus gets a reference to the given string and assigns it to the RuntimeStatus field.
func (o *AnycastConfig) SetRuntimeStatus(v string) {
	o.RuntimeStatus = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *AnycastConfig) GetService() string {
	if o == nil || IsNil(o.Service) {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnycastConfig) GetServiceOk() (*string, bool) {
	if o == nil || IsNil(o.Service) {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *AnycastConfig) HasService() bool {
	if o != nil && !IsNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *AnycastConfig) SetService(v string) {
	o.Service = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *AnycastConfig) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnycastConfig) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *AnycastConfig) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *AnycastConfig) SetTags(v map[string]interface{}) {
	o.Tags = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AnycastConfig) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnycastConfig) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AnycastConfig) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *AnycastConfig) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o AnycastConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnycastConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.AnycastIpAddress) {
		toSerialize["anycast_ip_address"] = o.AnycastIpAddress
	}
	if !IsNil(o.AnycastIpv6Address) {
		toSerialize["anycast_ipv6_address"] = o.AnycastIpv6Address
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsConfigured) {
		toSerialize["is_configured"] = o.IsConfigured
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OnpremHosts) {
		toSerialize["onprem_hosts"] = o.OnpremHosts
	}
	if !IsNil(o.RuntimeStatus) {
		toSerialize["runtime_status"] = o.RuntimeStatus
	}
	if !IsNil(o.Service) {
		toSerialize["service"] = o.Service
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AnycastConfig) UnmarshalJSON(data []byte) (err error) {
	varAnycastConfig := _AnycastConfig{}

	err = json.Unmarshal(data, &varAnycastConfig)

	if err != nil {
		return err
	}

	*o = AnycastConfig(varAnycastConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "anycast_ip_address")
		delete(additionalProperties, "anycast_ipv6_address")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "description")
		delete(additionalProperties, "fields")
		delete(additionalProperties, "id")
		delete(additionalProperties, "is_configured")
		delete(additionalProperties, "name")
		delete(additionalProperties, "onprem_hosts")
		delete(additionalProperties, "runtime_status")
		delete(additionalProperties, "service")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAnycastConfig struct {
	value *AnycastConfig
	isSet bool
}

func (v NullableAnycastConfig) Get() *AnycastConfig {
	return v.value
}

func (v *NullableAnycastConfig) Set(val *AnycastConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAnycastConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAnycastConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnycastConfig(val *AnycastConfig) *NullableAnycastConfig {
	return &NullableAnycastConfig{value: val, isSet: true}
}

func (v NullableAnycastConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnycastConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
