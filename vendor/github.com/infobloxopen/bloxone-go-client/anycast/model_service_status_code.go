/*
BloxOne Anycast API

Anycast capability enables HA (High Availability) configuration of BloxOne applications that run on equipment located on customer's premises (on-prem hosts). Anycast supports DNS, as well as DNS-forwarding services.  Anycast-enabled application setups use multiple on-premises installations for one particular application type. Multiple application instances are configured to use the same endpoint address. Anycast capability is collocated with such application instance, monitoring the local application instance and advertising to the upstream router (a customer equipment) a per-instance, local route to the common application endpoint address, as long as the local application instance is available. Depending on the type of the upstream router, the customer may configure local route advertisement via either BGP (Boarder Gateway Protocol) or OSPF (Open Shortest Path First) routing protocols. Both protocols may be enabled as well. Multiple routes to the common application service address provide redundancy without the need to reconfigure application clients.  Should an application instance become unavailable, the local route advertisements stop, resulting in withdrawal of the route (in the upstream router) to the application instance that has gone out of service and ensuring that subsequent application requests thus get routed to the remaining available application instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package anycast

import (
	"encoding/json"
	"fmt"
)

// ServiceStatusCode the model 'ServiceStatusCode'
type ServiceStatusCode string

// List of serviceStatusCode
const (
	SERVICESTATUSCODE_SUCCESS            ServiceStatusCode = "SUCCESS"
	SERVICESTATUSCODE_GENERAL_FAILURE    ServiceStatusCode = "GENERAL_FAILURE"
	SERVICESTATUSCODE_HASH_FAILURE       ServiceStatusCode = "HASH_FAILURE"
	SERVICESTATUSCODE_VALIDATION_FAILURE ServiceStatusCode = "VALIDATION_FAILURE"
	SERVICESTATUSCODE_COPY_FAILURE       ServiceStatusCode = "COPY_FAILURE"
	SERVICESTATUSCODE_RELOAD_FAILIURE    ServiceStatusCode = "RELOAD_FAILIURE"
)

// All allowed values of ServiceStatusCode enum
var AllowedServiceStatusCodeEnumValues = []ServiceStatusCode{
	"SUCCESS",
	"GENERAL_FAILURE",
	"HASH_FAILURE",
	"VALIDATION_FAILURE",
	"COPY_FAILURE",
	"RELOAD_FAILIURE",
}

func (v *ServiceStatusCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceStatusCode(value)
	for _, existing := range AllowedServiceStatusCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceStatusCode", value)
}

// NewServiceStatusCodeFromValue returns a pointer to a valid ServiceStatusCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceStatusCodeFromValue(v string) (*ServiceStatusCode, error) {
	ev := ServiceStatusCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceStatusCode: valid values are %v", v, AllowedServiceStatusCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceStatusCode) IsValid() bool {
	for _, existing := range AllowedServiceStatusCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to serviceStatusCode value
func (v ServiceStatusCode) Ptr() *ServiceStatusCode {
	return &v
}

type NullableServiceStatusCode struct {
	value *ServiceStatusCode
	isSet bool
}

func (v NullableServiceStatusCode) Get() *ServiceStatusCode {
	return v.value
}

func (v *NullableServiceStatusCode) Set(val *ServiceStatusCode) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceStatusCode) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceStatusCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceStatusCode(val *ServiceStatusCode) *NullableServiceStatusCode {
	return &NullableServiceStatusCode{value: val, isSet: true}
}

func (v NullableServiceStatusCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceStatusCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
