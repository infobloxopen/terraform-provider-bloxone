/*
BloxOne Anycast API

Anycast capability enables HA (High Availability) configuration of BloxOne applications that run on equipment located on customer's premises (on-prem hosts). Anycast supports DNS, as well as DNS-forwarding services.  Anycast-enabled application setups use multiple on-premises installations for one particular application type. Multiple application instances are configured to use the same endpoint address. Anycast capability is collocated with such application instance, monitoring the local application instance and advertising to the upstream router (a customer equipment) a per-instance, local route to the common application endpoint address, as long as the local application instance is available. Depending on the type of the upstream router, the customer may configure local route advertisement via either BGP (Boarder Gateway Protocol) or OSPF (Open Shortest Path First) routing protocols. Both protocols may be enabled as well. Multiple routes to the common application service address provide redundancy without the need to reconfigure application clients.  Should an application instance become unavailable, the local route advertisements stop, resulting in withdrawal of the route (in the upstream router) to the application instance that has gone out of service and ensuring that subsequent application requests thus get routed to the remaining available application instances.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package anycast

import (
	"encoding/json"
)

// checks if the ProtoAnycastVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProtoAnycastVersion{}

// ProtoAnycastVersion struct for ProtoAnycastVersion
type ProtoAnycastVersion struct {
	AccountId *int64  `json:"account_id,omitempty"`
	Version   *string `json:"version,omitempty"`
}

// NewProtoAnycastVersion instantiates a new ProtoAnycastVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtoAnycastVersion() *ProtoAnycastVersion {
	this := ProtoAnycastVersion{}
	return &this
}

// NewProtoAnycastVersionWithDefaults instantiates a new ProtoAnycastVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtoAnycastVersionWithDefaults() *ProtoAnycastVersion {
	this := ProtoAnycastVersion{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *ProtoAnycastVersion) GetAccountId() int64 {
	if o == nil || IsNil(o.AccountId) {
		var ret int64
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoAnycastVersion) GetAccountIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *ProtoAnycastVersion) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given int64 and assigns it to the AccountId field.
func (o *ProtoAnycastVersion) SetAccountId(v int64) {
	o.AccountId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ProtoAnycastVersion) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtoAnycastVersion) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ProtoAnycastVersion) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ProtoAnycastVersion) SetVersion(v string) {
	o.Version = &v
}

func (o ProtoAnycastVersion) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProtoAnycastVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableProtoAnycastVersion struct {
	value *ProtoAnycastVersion
	isSet bool
}

func (v NullableProtoAnycastVersion) Get() *ProtoAnycastVersion {
	return v.value
}

func (v *NullableProtoAnycastVersion) Set(val *ProtoAnycastVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableProtoAnycastVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableProtoAnycastVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtoAnycastVersion(val *ProtoAnycastVersion) *NullableProtoAnycastVersion {
	return &NullableProtoAnycastVersion{value: val, isSet: true}
}

func (v NullableProtoAnycastVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtoAnycastVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
