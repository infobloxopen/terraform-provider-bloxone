/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the IpamsvcGlobal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpamsvcGlobal{}

// IpamsvcGlobal The global DHCP configuration (_dhcp/global_). Used by default unless more specific configuration exists. There is only one instance of this object.
type IpamsvcGlobal struct {
	AsmConfig *IpamsvcASMConfig `json:"asm_config,omitempty"`
	// The Kerberos principal name. It uses the typical Kerberos notation: <SERVICE-NAME>/<server-domain-name>@<REALM>.  Defaults to empty.
	ClientPrincipal *string `json:"client_principal,omitempty"`
	// The global configuration to control who does the DDNS updates.  Valid values are: * _client_: DHCP server updates DNS if requested by client. * _server_: DHCP server always updates DNS, overriding an update request from the client, unless the client requests no updates. * _ignore_: DHCP server always updates DNS, even if the client says not to. * _over_client_update_: Same as _server_. DHCP server always updates DNS, overriding an update request from the client, unless the client requests no updates. * _over_no_update_: DHCP server updates DNS even if the client requests that no updates be done. If the client requests to do the update, DHCP server allows it.  Defaults to _client_.
	DdnsClientUpdate *string `json:"ddns_client_update,omitempty"`
	// The mode used for resolving conflicts while performing DDNS updates.  Valid values are: * _check_with_dhcid_: It includes adding a DHCID record and checking that record via conflict detection as per RFC 4703. * _no_check_with_dhcid_: This will ignore conflict detection but add a DHCID record when creating/updating an entry. * _check_exists_with_dhcid_: This will check if there is an existing DHCID record but does not verify the value of the record matches the update. This will also update the DHCID record for the entry. * _no_check_without_dhcid_: This ignores conflict detection and will not add a DHCID record when creating/updating a DDNS entry.  Defaults to _check_with_dhcid_.
	DdnsConflictResolutionMode *string `json:"ddns_conflict_resolution_mode,omitempty"`
	// The domain suffix for DDNS updates. FQDN, may be empty.  Must be specified if _ddns_enabled_ is _true_.  Defaults to empty.
	DdnsDomain *string `json:"ddns_domain,omitempty"`
	// Indicates if DDNS updates should be performed for leases.  All other ddns_* configuration fields are ignored when this flag is unset.  At a minimum, _ddns_domain_ and _ddns_zones_ must be configured to enable DDNS.  Defaults to _false_.
	DdnsEnabled *bool `json:"ddns_enabled,omitempty"`
	// Indicates if DDNS needs to generate a hostname when not supplied by the client.  Defaults to _false_.
	DdnsGenerateName *bool `json:"ddns_generate_name,omitempty"`
	// The prefix used in the generation of an FQDN.  When generating a name, DHCP server will construct the name in the format: [ddns-generated-prefix]-[address-text].[ddns-qualifying-suffix]. where address-text is simply the lease IP address converted to a hyphenated string.  Defaults to \"myhost\".
	DdnsGeneratedPrefix *string `json:"ddns_generated_prefix,omitempty"`
	// Determines if DDNS updates are enabled at the global level. Defaults to _true_.
	DdnsSendUpdates *bool `json:"ddns_send_updates,omitempty"`
	// DDNS TTL value - to be calculated as a simple percentage of the lease's lifetime, using the parameter's value as the percentage. It is specified as a percentage (e.g. 25, 75). Defaults to unspecified.
	DdnsTtlPercent *float32 `json:"ddns_ttl_percent,omitempty"`
	// Instructs the DHCP server to always update the DNS information when a lease is renewed even if its DNS information has not changed.  Defaults to _false_.
	DdnsUpdateOnRenew *bool `json:"ddns_update_on_renew,omitempty"`
	// When true, DHCP server will apply conflict resolution, as described in RFC 4703, when attempting to fulfill the update request.  When false, DHCP server will simply attempt to update the DNS entries per the request, regardless of whether or not they conflict with existing entries owned by other DHCP4 clients.  Defaults to _true_.
	DdnsUseConflictResolution *bool `json:"ddns_use_conflict_resolution,omitempty"`
	// DNS zones that DDNS updates can be sent to. There is no resolver fallback. The target zone must be explicitly configured for the update to be performed.  Updates are sent to the closest enclosing zone.  Error if _ddns_enabled_ is _true_ and the _ddns_domain_ does not have a corresponding entry in _ddns_zones_.  Error if there are items with duplicate zone in the list.  Defaults to empty list.
	DdnsZones  []IpamsvcDDNSZone  `json:"ddns_zones,omitempty"`
	DhcpConfig *IpamsvcDHCPConfig `json:"dhcp_config,omitempty"`
	// The list of DHCP options or group of options for IPv4. An option list is ordered and may include both option groups and specific options. Multiple occurrences of the same option or group is not an error. The last occurrence of an option in the list will be used.  Error if the graph of referenced groups contains cycles.  Defaults to empty list.
	DhcpOptions []IpamsvcOptionItem `json:"dhcp_options,omitempty"`
	// The list of DHCP options or group of options for IPv6. An option list is ordered and may include both option groups and specific options. Multiple occurrences of the same option or group is not an error. The last occurrence of an option in the list will be used.  Error if the graph of referenced groups contains cycles.  Defaults to empty list.
	DhcpOptionsV6 []IpamsvcOptionItem              `json:"dhcp_options_v6,omitempty"`
	DhcpThreshold *IpamsvcDHCPUtilizationThreshold `json:"dhcp_threshold,omitempty"`
	// The behavior when GSS-TSIG should be used (a matching external DNS server is configured) but no GSS-TSIG key is available. If configured to _false_ (the default) this DNS server is skipped, if configured to _true_ the DNS server is ignored and the DNS update is sent with the configured DHCP-DDNS protection e.g. TSIG key or without any protection when none was configured.  Defaults to _false_.
	GssTsigFallback *bool `json:"gss_tsig_fallback,omitempty"`
	// The configuration for header option filename field.
	HeaderOptionFilename *string `json:"header_option_filename,omitempty"`
	// The configuration for header option server address field.
	HeaderOptionServerAddress *string `json:"header_option_server_address,omitempty"`
	// The configuration for header option server name field.
	HeaderOptionServerName *string `json:"header_option_server_name,omitempty"`
	// The character to replace non-matching characters with, when hostname rewrite is enabled in global configuration.  Any single ASCII character or no character if the invalid characters should be removed without replacement.  Defaults to \"-\".
	HostnameRewriteChar *string `json:"hostname_rewrite_char,omitempty"`
	// The global configuration to indicate if the hostnames supplied by the client will be rewritten prior to DDNS update by replacing every character that does not match _hostname_rewrite_regex_ by _hostname_rewrite_char_.  Defaults to _false_.
	HostnameRewriteEnabled *bool `json:"hostname_rewrite_enabled,omitempty"`
	// The regex bracket expression to match valid characters when hostname rewrite is enabled in global configuration.  Must begin with \"[\" and end with \"]\" and be a compilable POSIX regex.  Defaults to \"[^a-zA-Z0-9_.]\".
	HostnameRewriteRegex *string `json:"hostname_rewrite_regex,omitempty"`
	// The resource identifier.
	Id *string `json:"id,omitempty"`
	// Address of Kerberos Key Distribution Center.  Defaults to empty.
	KerberosKdc *string `json:"kerberos_kdc,omitempty"`
	// _kerberos_keys_ contains a list of keys for GSS-TSIG signed dynamic updates.  Defaults to empty.
	KerberosKeys []IpamsvcKerberosKey `json:"kerberos_keys,omitempty"`
	// Time interval (in seconds) the keys for each configured external DNS server are checked for rekeying, i.e. a new key is created to replace the current usable one when its age is greater than the _kerberos_rekey_interval_ value.  Defaults to 120 seconds.
	KerberosRekeyInterval *int64 `json:"kerberos_rekey_interval,omitempty"`
	// Time interval (in seconds) to retry to create a key if any error occurred previously for any configured external DNS server.  Defaults to 30 seconds.
	KerberosRetryInterval *int64 `json:"kerberos_retry_interval,omitempty"`
	// Lifetime (in seconds) of GSS-TSIG keys in the TKEY protocol.  Defaults to 160 seconds.
	KerberosTkeyLifetime *int64 `json:"kerberos_tkey_lifetime,omitempty"`
	// Determines which protocol is used to establish the security context with the external DNS servers, TCP or UDP.  Defaults to _tcp_.
	KerberosTkeyProtocol *string `json:"kerberos_tkey_protocol,omitempty"`
	// When enabled, DHCP Server will prefer option 12 over option 81 in the incoming client request.  Defaults to _false_.
	PreferOption12 *bool `json:"prefer_option_12,omitempty"`
	// When enabled, DHCP Server will remove the suffix from the option 81 in the incoming client request.  Defaults to _false_.
	RemoveSuffixOption81 *bool `json:"remove_suffix_option_81,omitempty"`
	// The Kerberos principal name of the external DNS server that will receive updates.  Defaults to empty.
	ServerPrincipal *string `json:"server_principal,omitempty"`
	// The resource identifier.
	VendorSpecificOptionOptionSpace *string `json:"vendor_specific_option_option_space,omitempty"`
}

// NewIpamsvcGlobal instantiates a new IpamsvcGlobal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpamsvcGlobal() *IpamsvcGlobal {
	this := IpamsvcGlobal{}
	return &this
}

// NewIpamsvcGlobalWithDefaults instantiates a new IpamsvcGlobal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpamsvcGlobalWithDefaults() *IpamsvcGlobal {
	this := IpamsvcGlobal{}
	return &this
}

// GetAsmConfig returns the AsmConfig field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetAsmConfig() IpamsvcASMConfig {
	if o == nil || IsNil(o.AsmConfig) {
		var ret IpamsvcASMConfig
		return ret
	}
	return *o.AsmConfig
}

// GetAsmConfigOk returns a tuple with the AsmConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetAsmConfigOk() (*IpamsvcASMConfig, bool) {
	if o == nil || IsNil(o.AsmConfig) {
		return nil, false
	}
	return o.AsmConfig, true
}

// HasAsmConfig returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasAsmConfig() bool {
	if o != nil && !IsNil(o.AsmConfig) {
		return true
	}

	return false
}

// SetAsmConfig gets a reference to the given IpamsvcASMConfig and assigns it to the AsmConfig field.
func (o *IpamsvcGlobal) SetAsmConfig(v IpamsvcASMConfig) {
	o.AsmConfig = &v
}

// GetClientPrincipal returns the ClientPrincipal field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetClientPrincipal() string {
	if o == nil || IsNil(o.ClientPrincipal) {
		var ret string
		return ret
	}
	return *o.ClientPrincipal
}

// GetClientPrincipalOk returns a tuple with the ClientPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetClientPrincipalOk() (*string, bool) {
	if o == nil || IsNil(o.ClientPrincipal) {
		return nil, false
	}
	return o.ClientPrincipal, true
}

// HasClientPrincipal returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasClientPrincipal() bool {
	if o != nil && !IsNil(o.ClientPrincipal) {
		return true
	}

	return false
}

// SetClientPrincipal gets a reference to the given string and assigns it to the ClientPrincipal field.
func (o *IpamsvcGlobal) SetClientPrincipal(v string) {
	o.ClientPrincipal = &v
}

// GetDdnsClientUpdate returns the DdnsClientUpdate field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetDdnsClientUpdate() string {
	if o == nil || IsNil(o.DdnsClientUpdate) {
		var ret string
		return ret
	}
	return *o.DdnsClientUpdate
}

// GetDdnsClientUpdateOk returns a tuple with the DdnsClientUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetDdnsClientUpdateOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsClientUpdate) {
		return nil, false
	}
	return o.DdnsClientUpdate, true
}

// HasDdnsClientUpdate returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasDdnsClientUpdate() bool {
	if o != nil && !IsNil(o.DdnsClientUpdate) {
		return true
	}

	return false
}

// SetDdnsClientUpdate gets a reference to the given string and assigns it to the DdnsClientUpdate field.
func (o *IpamsvcGlobal) SetDdnsClientUpdate(v string) {
	o.DdnsClientUpdate = &v
}

// GetDdnsConflictResolutionMode returns the DdnsConflictResolutionMode field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetDdnsConflictResolutionMode() string {
	if o == nil || IsNil(o.DdnsConflictResolutionMode) {
		var ret string
		return ret
	}
	return *o.DdnsConflictResolutionMode
}

// GetDdnsConflictResolutionModeOk returns a tuple with the DdnsConflictResolutionMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetDdnsConflictResolutionModeOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsConflictResolutionMode) {
		return nil, false
	}
	return o.DdnsConflictResolutionMode, true
}

// HasDdnsConflictResolutionMode returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasDdnsConflictResolutionMode() bool {
	if o != nil && !IsNil(o.DdnsConflictResolutionMode) {
		return true
	}

	return false
}

// SetDdnsConflictResolutionMode gets a reference to the given string and assigns it to the DdnsConflictResolutionMode field.
func (o *IpamsvcGlobal) SetDdnsConflictResolutionMode(v string) {
	o.DdnsConflictResolutionMode = &v
}

// GetDdnsDomain returns the DdnsDomain field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetDdnsDomain() string {
	if o == nil || IsNil(o.DdnsDomain) {
		var ret string
		return ret
	}
	return *o.DdnsDomain
}

// GetDdnsDomainOk returns a tuple with the DdnsDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetDdnsDomainOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsDomain) {
		return nil, false
	}
	return o.DdnsDomain, true
}

// HasDdnsDomain returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasDdnsDomain() bool {
	if o != nil && !IsNil(o.DdnsDomain) {
		return true
	}

	return false
}

// SetDdnsDomain gets a reference to the given string and assigns it to the DdnsDomain field.
func (o *IpamsvcGlobal) SetDdnsDomain(v string) {
	o.DdnsDomain = &v
}

// GetDdnsEnabled returns the DdnsEnabled field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetDdnsEnabled() bool {
	if o == nil || IsNil(o.DdnsEnabled) {
		var ret bool
		return ret
	}
	return *o.DdnsEnabled
}

// GetDdnsEnabledOk returns a tuple with the DdnsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetDdnsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsEnabled) {
		return nil, false
	}
	return o.DdnsEnabled, true
}

// HasDdnsEnabled returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasDdnsEnabled() bool {
	if o != nil && !IsNil(o.DdnsEnabled) {
		return true
	}

	return false
}

// SetDdnsEnabled gets a reference to the given bool and assigns it to the DdnsEnabled field.
func (o *IpamsvcGlobal) SetDdnsEnabled(v bool) {
	o.DdnsEnabled = &v
}

// GetDdnsGenerateName returns the DdnsGenerateName field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetDdnsGenerateName() bool {
	if o == nil || IsNil(o.DdnsGenerateName) {
		var ret bool
		return ret
	}
	return *o.DdnsGenerateName
}

// GetDdnsGenerateNameOk returns a tuple with the DdnsGenerateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetDdnsGenerateNameOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsGenerateName) {
		return nil, false
	}
	return o.DdnsGenerateName, true
}

// HasDdnsGenerateName returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasDdnsGenerateName() bool {
	if o != nil && !IsNil(o.DdnsGenerateName) {
		return true
	}

	return false
}

// SetDdnsGenerateName gets a reference to the given bool and assigns it to the DdnsGenerateName field.
func (o *IpamsvcGlobal) SetDdnsGenerateName(v bool) {
	o.DdnsGenerateName = &v
}

// GetDdnsGeneratedPrefix returns the DdnsGeneratedPrefix field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetDdnsGeneratedPrefix() string {
	if o == nil || IsNil(o.DdnsGeneratedPrefix) {
		var ret string
		return ret
	}
	return *o.DdnsGeneratedPrefix
}

// GetDdnsGeneratedPrefixOk returns a tuple with the DdnsGeneratedPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetDdnsGeneratedPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsGeneratedPrefix) {
		return nil, false
	}
	return o.DdnsGeneratedPrefix, true
}

// HasDdnsGeneratedPrefix returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasDdnsGeneratedPrefix() bool {
	if o != nil && !IsNil(o.DdnsGeneratedPrefix) {
		return true
	}

	return false
}

// SetDdnsGeneratedPrefix gets a reference to the given string and assigns it to the DdnsGeneratedPrefix field.
func (o *IpamsvcGlobal) SetDdnsGeneratedPrefix(v string) {
	o.DdnsGeneratedPrefix = &v
}

// GetDdnsSendUpdates returns the DdnsSendUpdates field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetDdnsSendUpdates() bool {
	if o == nil || IsNil(o.DdnsSendUpdates) {
		var ret bool
		return ret
	}
	return *o.DdnsSendUpdates
}

// GetDdnsSendUpdatesOk returns a tuple with the DdnsSendUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetDdnsSendUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsSendUpdates) {
		return nil, false
	}
	return o.DdnsSendUpdates, true
}

// HasDdnsSendUpdates returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasDdnsSendUpdates() bool {
	if o != nil && !IsNil(o.DdnsSendUpdates) {
		return true
	}

	return false
}

// SetDdnsSendUpdates gets a reference to the given bool and assigns it to the DdnsSendUpdates field.
func (o *IpamsvcGlobal) SetDdnsSendUpdates(v bool) {
	o.DdnsSendUpdates = &v
}

// GetDdnsTtlPercent returns the DdnsTtlPercent field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetDdnsTtlPercent() float32 {
	if o == nil || IsNil(o.DdnsTtlPercent) {
		var ret float32
		return ret
	}
	return *o.DdnsTtlPercent
}

// GetDdnsTtlPercentOk returns a tuple with the DdnsTtlPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetDdnsTtlPercentOk() (*float32, bool) {
	if o == nil || IsNil(o.DdnsTtlPercent) {
		return nil, false
	}
	return o.DdnsTtlPercent, true
}

// HasDdnsTtlPercent returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasDdnsTtlPercent() bool {
	if o != nil && !IsNil(o.DdnsTtlPercent) {
		return true
	}

	return false
}

// SetDdnsTtlPercent gets a reference to the given float32 and assigns it to the DdnsTtlPercent field.
func (o *IpamsvcGlobal) SetDdnsTtlPercent(v float32) {
	o.DdnsTtlPercent = &v
}

// GetDdnsUpdateOnRenew returns the DdnsUpdateOnRenew field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetDdnsUpdateOnRenew() bool {
	if o == nil || IsNil(o.DdnsUpdateOnRenew) {
		var ret bool
		return ret
	}
	return *o.DdnsUpdateOnRenew
}

// GetDdnsUpdateOnRenewOk returns a tuple with the DdnsUpdateOnRenew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetDdnsUpdateOnRenewOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsUpdateOnRenew) {
		return nil, false
	}
	return o.DdnsUpdateOnRenew, true
}

// HasDdnsUpdateOnRenew returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasDdnsUpdateOnRenew() bool {
	if o != nil && !IsNil(o.DdnsUpdateOnRenew) {
		return true
	}

	return false
}

// SetDdnsUpdateOnRenew gets a reference to the given bool and assigns it to the DdnsUpdateOnRenew field.
func (o *IpamsvcGlobal) SetDdnsUpdateOnRenew(v bool) {
	o.DdnsUpdateOnRenew = &v
}

// GetDdnsUseConflictResolution returns the DdnsUseConflictResolution field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetDdnsUseConflictResolution() bool {
	if o == nil || IsNil(o.DdnsUseConflictResolution) {
		var ret bool
		return ret
	}
	return *o.DdnsUseConflictResolution
}

// GetDdnsUseConflictResolutionOk returns a tuple with the DdnsUseConflictResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetDdnsUseConflictResolutionOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsUseConflictResolution) {
		return nil, false
	}
	return o.DdnsUseConflictResolution, true
}

// HasDdnsUseConflictResolution returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasDdnsUseConflictResolution() bool {
	if o != nil && !IsNil(o.DdnsUseConflictResolution) {
		return true
	}

	return false
}

// SetDdnsUseConflictResolution gets a reference to the given bool and assigns it to the DdnsUseConflictResolution field.
func (o *IpamsvcGlobal) SetDdnsUseConflictResolution(v bool) {
	o.DdnsUseConflictResolution = &v
}

// GetDdnsZones returns the DdnsZones field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetDdnsZones() []IpamsvcDDNSZone {
	if o == nil || IsNil(o.DdnsZones) {
		var ret []IpamsvcDDNSZone
		return ret
	}
	return o.DdnsZones
}

// GetDdnsZonesOk returns a tuple with the DdnsZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetDdnsZonesOk() ([]IpamsvcDDNSZone, bool) {
	if o == nil || IsNil(o.DdnsZones) {
		return nil, false
	}
	return o.DdnsZones, true
}

// HasDdnsZones returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasDdnsZones() bool {
	if o != nil && !IsNil(o.DdnsZones) {
		return true
	}

	return false
}

// SetDdnsZones gets a reference to the given []IpamsvcDDNSZone and assigns it to the DdnsZones field.
func (o *IpamsvcGlobal) SetDdnsZones(v []IpamsvcDDNSZone) {
	o.DdnsZones = v
}

// GetDhcpConfig returns the DhcpConfig field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetDhcpConfig() IpamsvcDHCPConfig {
	if o == nil || IsNil(o.DhcpConfig) {
		var ret IpamsvcDHCPConfig
		return ret
	}
	return *o.DhcpConfig
}

// GetDhcpConfigOk returns a tuple with the DhcpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetDhcpConfigOk() (*IpamsvcDHCPConfig, bool) {
	if o == nil || IsNil(o.DhcpConfig) {
		return nil, false
	}
	return o.DhcpConfig, true
}

// HasDhcpConfig returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasDhcpConfig() bool {
	if o != nil && !IsNil(o.DhcpConfig) {
		return true
	}

	return false
}

// SetDhcpConfig gets a reference to the given IpamsvcDHCPConfig and assigns it to the DhcpConfig field.
func (o *IpamsvcGlobal) SetDhcpConfig(v IpamsvcDHCPConfig) {
	o.DhcpConfig = &v
}

// GetDhcpOptions returns the DhcpOptions field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetDhcpOptions() []IpamsvcOptionItem {
	if o == nil || IsNil(o.DhcpOptions) {
		var ret []IpamsvcOptionItem
		return ret
	}
	return o.DhcpOptions
}

// GetDhcpOptionsOk returns a tuple with the DhcpOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetDhcpOptionsOk() ([]IpamsvcOptionItem, bool) {
	if o == nil || IsNil(o.DhcpOptions) {
		return nil, false
	}
	return o.DhcpOptions, true
}

// HasDhcpOptions returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasDhcpOptions() bool {
	if o != nil && !IsNil(o.DhcpOptions) {
		return true
	}

	return false
}

// SetDhcpOptions gets a reference to the given []IpamsvcOptionItem and assigns it to the DhcpOptions field.
func (o *IpamsvcGlobal) SetDhcpOptions(v []IpamsvcOptionItem) {
	o.DhcpOptions = v
}

// GetDhcpOptionsV6 returns the DhcpOptionsV6 field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetDhcpOptionsV6() []IpamsvcOptionItem {
	if o == nil || IsNil(o.DhcpOptionsV6) {
		var ret []IpamsvcOptionItem
		return ret
	}
	return o.DhcpOptionsV6
}

// GetDhcpOptionsV6Ok returns a tuple with the DhcpOptionsV6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetDhcpOptionsV6Ok() ([]IpamsvcOptionItem, bool) {
	if o == nil || IsNil(o.DhcpOptionsV6) {
		return nil, false
	}
	return o.DhcpOptionsV6, true
}

// HasDhcpOptionsV6 returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasDhcpOptionsV6() bool {
	if o != nil && !IsNil(o.DhcpOptionsV6) {
		return true
	}

	return false
}

// SetDhcpOptionsV6 gets a reference to the given []IpamsvcOptionItem and assigns it to the DhcpOptionsV6 field.
func (o *IpamsvcGlobal) SetDhcpOptionsV6(v []IpamsvcOptionItem) {
	o.DhcpOptionsV6 = v
}

// GetDhcpThreshold returns the DhcpThreshold field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetDhcpThreshold() IpamsvcDHCPUtilizationThreshold {
	if o == nil || IsNil(o.DhcpThreshold) {
		var ret IpamsvcDHCPUtilizationThreshold
		return ret
	}
	return *o.DhcpThreshold
}

// GetDhcpThresholdOk returns a tuple with the DhcpThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetDhcpThresholdOk() (*IpamsvcDHCPUtilizationThreshold, bool) {
	if o == nil || IsNil(o.DhcpThreshold) {
		return nil, false
	}
	return o.DhcpThreshold, true
}

// HasDhcpThreshold returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasDhcpThreshold() bool {
	if o != nil && !IsNil(o.DhcpThreshold) {
		return true
	}

	return false
}

// SetDhcpThreshold gets a reference to the given IpamsvcDHCPUtilizationThreshold and assigns it to the DhcpThreshold field.
func (o *IpamsvcGlobal) SetDhcpThreshold(v IpamsvcDHCPUtilizationThreshold) {
	o.DhcpThreshold = &v
}

// GetGssTsigFallback returns the GssTsigFallback field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetGssTsigFallback() bool {
	if o == nil || IsNil(o.GssTsigFallback) {
		var ret bool
		return ret
	}
	return *o.GssTsigFallback
}

// GetGssTsigFallbackOk returns a tuple with the GssTsigFallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetGssTsigFallbackOk() (*bool, bool) {
	if o == nil || IsNil(o.GssTsigFallback) {
		return nil, false
	}
	return o.GssTsigFallback, true
}

// HasGssTsigFallback returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasGssTsigFallback() bool {
	if o != nil && !IsNil(o.GssTsigFallback) {
		return true
	}

	return false
}

// SetGssTsigFallback gets a reference to the given bool and assigns it to the GssTsigFallback field.
func (o *IpamsvcGlobal) SetGssTsigFallback(v bool) {
	o.GssTsigFallback = &v
}

// GetHeaderOptionFilename returns the HeaderOptionFilename field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetHeaderOptionFilename() string {
	if o == nil || IsNil(o.HeaderOptionFilename) {
		var ret string
		return ret
	}
	return *o.HeaderOptionFilename
}

// GetHeaderOptionFilenameOk returns a tuple with the HeaderOptionFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetHeaderOptionFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.HeaderOptionFilename) {
		return nil, false
	}
	return o.HeaderOptionFilename, true
}

// HasHeaderOptionFilename returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasHeaderOptionFilename() bool {
	if o != nil && !IsNil(o.HeaderOptionFilename) {
		return true
	}

	return false
}

// SetHeaderOptionFilename gets a reference to the given string and assigns it to the HeaderOptionFilename field.
func (o *IpamsvcGlobal) SetHeaderOptionFilename(v string) {
	o.HeaderOptionFilename = &v
}

// GetHeaderOptionServerAddress returns the HeaderOptionServerAddress field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetHeaderOptionServerAddress() string {
	if o == nil || IsNil(o.HeaderOptionServerAddress) {
		var ret string
		return ret
	}
	return *o.HeaderOptionServerAddress
}

// GetHeaderOptionServerAddressOk returns a tuple with the HeaderOptionServerAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetHeaderOptionServerAddressOk() (*string, bool) {
	if o == nil || IsNil(o.HeaderOptionServerAddress) {
		return nil, false
	}
	return o.HeaderOptionServerAddress, true
}

// HasHeaderOptionServerAddress returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasHeaderOptionServerAddress() bool {
	if o != nil && !IsNil(o.HeaderOptionServerAddress) {
		return true
	}

	return false
}

// SetHeaderOptionServerAddress gets a reference to the given string and assigns it to the HeaderOptionServerAddress field.
func (o *IpamsvcGlobal) SetHeaderOptionServerAddress(v string) {
	o.HeaderOptionServerAddress = &v
}

// GetHeaderOptionServerName returns the HeaderOptionServerName field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetHeaderOptionServerName() string {
	if o == nil || IsNil(o.HeaderOptionServerName) {
		var ret string
		return ret
	}
	return *o.HeaderOptionServerName
}

// GetHeaderOptionServerNameOk returns a tuple with the HeaderOptionServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetHeaderOptionServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.HeaderOptionServerName) {
		return nil, false
	}
	return o.HeaderOptionServerName, true
}

// HasHeaderOptionServerName returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasHeaderOptionServerName() bool {
	if o != nil && !IsNil(o.HeaderOptionServerName) {
		return true
	}

	return false
}

// SetHeaderOptionServerName gets a reference to the given string and assigns it to the HeaderOptionServerName field.
func (o *IpamsvcGlobal) SetHeaderOptionServerName(v string) {
	o.HeaderOptionServerName = &v
}

// GetHostnameRewriteChar returns the HostnameRewriteChar field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetHostnameRewriteChar() string {
	if o == nil || IsNil(o.HostnameRewriteChar) {
		var ret string
		return ret
	}
	return *o.HostnameRewriteChar
}

// GetHostnameRewriteCharOk returns a tuple with the HostnameRewriteChar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetHostnameRewriteCharOk() (*string, bool) {
	if o == nil || IsNil(o.HostnameRewriteChar) {
		return nil, false
	}
	return o.HostnameRewriteChar, true
}

// HasHostnameRewriteChar returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasHostnameRewriteChar() bool {
	if o != nil && !IsNil(o.HostnameRewriteChar) {
		return true
	}

	return false
}

// SetHostnameRewriteChar gets a reference to the given string and assigns it to the HostnameRewriteChar field.
func (o *IpamsvcGlobal) SetHostnameRewriteChar(v string) {
	o.HostnameRewriteChar = &v
}

// GetHostnameRewriteEnabled returns the HostnameRewriteEnabled field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetHostnameRewriteEnabled() bool {
	if o == nil || IsNil(o.HostnameRewriteEnabled) {
		var ret bool
		return ret
	}
	return *o.HostnameRewriteEnabled
}

// GetHostnameRewriteEnabledOk returns a tuple with the HostnameRewriteEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetHostnameRewriteEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.HostnameRewriteEnabled) {
		return nil, false
	}
	return o.HostnameRewriteEnabled, true
}

// HasHostnameRewriteEnabled returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasHostnameRewriteEnabled() bool {
	if o != nil && !IsNil(o.HostnameRewriteEnabled) {
		return true
	}

	return false
}

// SetHostnameRewriteEnabled gets a reference to the given bool and assigns it to the HostnameRewriteEnabled field.
func (o *IpamsvcGlobal) SetHostnameRewriteEnabled(v bool) {
	o.HostnameRewriteEnabled = &v
}

// GetHostnameRewriteRegex returns the HostnameRewriteRegex field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetHostnameRewriteRegex() string {
	if o == nil || IsNil(o.HostnameRewriteRegex) {
		var ret string
		return ret
	}
	return *o.HostnameRewriteRegex
}

// GetHostnameRewriteRegexOk returns a tuple with the HostnameRewriteRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetHostnameRewriteRegexOk() (*string, bool) {
	if o == nil || IsNil(o.HostnameRewriteRegex) {
		return nil, false
	}
	return o.HostnameRewriteRegex, true
}

// HasHostnameRewriteRegex returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasHostnameRewriteRegex() bool {
	if o != nil && !IsNil(o.HostnameRewriteRegex) {
		return true
	}

	return false
}

// SetHostnameRewriteRegex gets a reference to the given string and assigns it to the HostnameRewriteRegex field.
func (o *IpamsvcGlobal) SetHostnameRewriteRegex(v string) {
	o.HostnameRewriteRegex = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IpamsvcGlobal) SetId(v string) {
	o.Id = &v
}

// GetKerberosKdc returns the KerberosKdc field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetKerberosKdc() string {
	if o == nil || IsNil(o.KerberosKdc) {
		var ret string
		return ret
	}
	return *o.KerberosKdc
}

// GetKerberosKdcOk returns a tuple with the KerberosKdc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetKerberosKdcOk() (*string, bool) {
	if o == nil || IsNil(o.KerberosKdc) {
		return nil, false
	}
	return o.KerberosKdc, true
}

// HasKerberosKdc returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasKerberosKdc() bool {
	if o != nil && !IsNil(o.KerberosKdc) {
		return true
	}

	return false
}

// SetKerberosKdc gets a reference to the given string and assigns it to the KerberosKdc field.
func (o *IpamsvcGlobal) SetKerberosKdc(v string) {
	o.KerberosKdc = &v
}

// GetKerberosKeys returns the KerberosKeys field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetKerberosKeys() []IpamsvcKerberosKey {
	if o == nil || IsNil(o.KerberosKeys) {
		var ret []IpamsvcKerberosKey
		return ret
	}
	return o.KerberosKeys
}

// GetKerberosKeysOk returns a tuple with the KerberosKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetKerberosKeysOk() ([]IpamsvcKerberosKey, bool) {
	if o == nil || IsNil(o.KerberosKeys) {
		return nil, false
	}
	return o.KerberosKeys, true
}

// HasKerberosKeys returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasKerberosKeys() bool {
	if o != nil && !IsNil(o.KerberosKeys) {
		return true
	}

	return false
}

// SetKerberosKeys gets a reference to the given []IpamsvcKerberosKey and assigns it to the KerberosKeys field.
func (o *IpamsvcGlobal) SetKerberosKeys(v []IpamsvcKerberosKey) {
	o.KerberosKeys = v
}

// GetKerberosRekeyInterval returns the KerberosRekeyInterval field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetKerberosRekeyInterval() int64 {
	if o == nil || IsNil(o.KerberosRekeyInterval) {
		var ret int64
		return ret
	}
	return *o.KerberosRekeyInterval
}

// GetKerberosRekeyIntervalOk returns a tuple with the KerberosRekeyInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetKerberosRekeyIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.KerberosRekeyInterval) {
		return nil, false
	}
	return o.KerberosRekeyInterval, true
}

// HasKerberosRekeyInterval returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasKerberosRekeyInterval() bool {
	if o != nil && !IsNil(o.KerberosRekeyInterval) {
		return true
	}

	return false
}

// SetKerberosRekeyInterval gets a reference to the given int64 and assigns it to the KerberosRekeyInterval field.
func (o *IpamsvcGlobal) SetKerberosRekeyInterval(v int64) {
	o.KerberosRekeyInterval = &v
}

// GetKerberosRetryInterval returns the KerberosRetryInterval field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetKerberosRetryInterval() int64 {
	if o == nil || IsNil(o.KerberosRetryInterval) {
		var ret int64
		return ret
	}
	return *o.KerberosRetryInterval
}

// GetKerberosRetryIntervalOk returns a tuple with the KerberosRetryInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetKerberosRetryIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.KerberosRetryInterval) {
		return nil, false
	}
	return o.KerberosRetryInterval, true
}

// HasKerberosRetryInterval returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasKerberosRetryInterval() bool {
	if o != nil && !IsNil(o.KerberosRetryInterval) {
		return true
	}

	return false
}

// SetKerberosRetryInterval gets a reference to the given int64 and assigns it to the KerberosRetryInterval field.
func (o *IpamsvcGlobal) SetKerberosRetryInterval(v int64) {
	o.KerberosRetryInterval = &v
}

// GetKerberosTkeyLifetime returns the KerberosTkeyLifetime field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetKerberosTkeyLifetime() int64 {
	if o == nil || IsNil(o.KerberosTkeyLifetime) {
		var ret int64
		return ret
	}
	return *o.KerberosTkeyLifetime
}

// GetKerberosTkeyLifetimeOk returns a tuple with the KerberosTkeyLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetKerberosTkeyLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.KerberosTkeyLifetime) {
		return nil, false
	}
	return o.KerberosTkeyLifetime, true
}

// HasKerberosTkeyLifetime returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasKerberosTkeyLifetime() bool {
	if o != nil && !IsNil(o.KerberosTkeyLifetime) {
		return true
	}

	return false
}

// SetKerberosTkeyLifetime gets a reference to the given int64 and assigns it to the KerberosTkeyLifetime field.
func (o *IpamsvcGlobal) SetKerberosTkeyLifetime(v int64) {
	o.KerberosTkeyLifetime = &v
}

// GetKerberosTkeyProtocol returns the KerberosTkeyProtocol field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetKerberosTkeyProtocol() string {
	if o == nil || IsNil(o.KerberosTkeyProtocol) {
		var ret string
		return ret
	}
	return *o.KerberosTkeyProtocol
}

// GetKerberosTkeyProtocolOk returns a tuple with the KerberosTkeyProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetKerberosTkeyProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.KerberosTkeyProtocol) {
		return nil, false
	}
	return o.KerberosTkeyProtocol, true
}

// HasKerberosTkeyProtocol returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasKerberosTkeyProtocol() bool {
	if o != nil && !IsNil(o.KerberosTkeyProtocol) {
		return true
	}

	return false
}

// SetKerberosTkeyProtocol gets a reference to the given string and assigns it to the KerberosTkeyProtocol field.
func (o *IpamsvcGlobal) SetKerberosTkeyProtocol(v string) {
	o.KerberosTkeyProtocol = &v
}

// GetPreferOption12 returns the PreferOption12 field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetPreferOption12() bool {
	if o == nil || IsNil(o.PreferOption12) {
		var ret bool
		return ret
	}
	return *o.PreferOption12
}

// GetPreferOption12Ok returns a tuple with the PreferOption12 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetPreferOption12Ok() (*bool, bool) {
	if o == nil || IsNil(o.PreferOption12) {
		return nil, false
	}
	return o.PreferOption12, true
}

// HasPreferOption12 returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasPreferOption12() bool {
	if o != nil && !IsNil(o.PreferOption12) {
		return true
	}

	return false
}

// SetPreferOption12 gets a reference to the given bool and assigns it to the PreferOption12 field.
func (o *IpamsvcGlobal) SetPreferOption12(v bool) {
	o.PreferOption12 = &v
}

// GetRemoveSuffixOption81 returns the RemoveSuffixOption81 field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetRemoveSuffixOption81() bool {
	if o == nil || IsNil(o.RemoveSuffixOption81) {
		var ret bool
		return ret
	}
	return *o.RemoveSuffixOption81
}

// GetRemoveSuffixOption81Ok returns a tuple with the RemoveSuffixOption81 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetRemoveSuffixOption81Ok() (*bool, bool) {
	if o == nil || IsNil(o.RemoveSuffixOption81) {
		return nil, false
	}
	return o.RemoveSuffixOption81, true
}

// HasRemoveSuffixOption81 returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasRemoveSuffixOption81() bool {
	if o != nil && !IsNil(o.RemoveSuffixOption81) {
		return true
	}

	return false
}

// SetRemoveSuffixOption81 gets a reference to the given bool and assigns it to the RemoveSuffixOption81 field.
func (o *IpamsvcGlobal) SetRemoveSuffixOption81(v bool) {
	o.RemoveSuffixOption81 = &v
}

// GetServerPrincipal returns the ServerPrincipal field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetServerPrincipal() string {
	if o == nil || IsNil(o.ServerPrincipal) {
		var ret string
		return ret
	}
	return *o.ServerPrincipal
}

// GetServerPrincipalOk returns a tuple with the ServerPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetServerPrincipalOk() (*string, bool) {
	if o == nil || IsNil(o.ServerPrincipal) {
		return nil, false
	}
	return o.ServerPrincipal, true
}

// HasServerPrincipal returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasServerPrincipal() bool {
	if o != nil && !IsNil(o.ServerPrincipal) {
		return true
	}

	return false
}

// SetServerPrincipal gets a reference to the given string and assigns it to the ServerPrincipal field.
func (o *IpamsvcGlobal) SetServerPrincipal(v string) {
	o.ServerPrincipal = &v
}

// GetVendorSpecificOptionOptionSpace returns the VendorSpecificOptionOptionSpace field value if set, zero value otherwise.
func (o *IpamsvcGlobal) GetVendorSpecificOptionOptionSpace() string {
	if o == nil || IsNil(o.VendorSpecificOptionOptionSpace) {
		var ret string
		return ret
	}
	return *o.VendorSpecificOptionOptionSpace
}

// GetVendorSpecificOptionOptionSpaceOk returns a tuple with the VendorSpecificOptionOptionSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcGlobal) GetVendorSpecificOptionOptionSpaceOk() (*string, bool) {
	if o == nil || IsNil(o.VendorSpecificOptionOptionSpace) {
		return nil, false
	}
	return o.VendorSpecificOptionOptionSpace, true
}

// HasVendorSpecificOptionOptionSpace returns a boolean if a field has been set.
func (o *IpamsvcGlobal) HasVendorSpecificOptionOptionSpace() bool {
	if o != nil && !IsNil(o.VendorSpecificOptionOptionSpace) {
		return true
	}

	return false
}

// SetVendorSpecificOptionOptionSpace gets a reference to the given string and assigns it to the VendorSpecificOptionOptionSpace field.
func (o *IpamsvcGlobal) SetVendorSpecificOptionOptionSpace(v string) {
	o.VendorSpecificOptionOptionSpace = &v
}

func (o IpamsvcGlobal) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpamsvcGlobal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AsmConfig) {
		toSerialize["asm_config"] = o.AsmConfig
	}
	if !IsNil(o.ClientPrincipal) {
		toSerialize["client_principal"] = o.ClientPrincipal
	}
	if !IsNil(o.DdnsClientUpdate) {
		toSerialize["ddns_client_update"] = o.DdnsClientUpdate
	}
	if !IsNil(o.DdnsConflictResolutionMode) {
		toSerialize["ddns_conflict_resolution_mode"] = o.DdnsConflictResolutionMode
	}
	if !IsNil(o.DdnsDomain) {
		toSerialize["ddns_domain"] = o.DdnsDomain
	}
	if !IsNil(o.DdnsEnabled) {
		toSerialize["ddns_enabled"] = o.DdnsEnabled
	}
	if !IsNil(o.DdnsGenerateName) {
		toSerialize["ddns_generate_name"] = o.DdnsGenerateName
	}
	if !IsNil(o.DdnsGeneratedPrefix) {
		toSerialize["ddns_generated_prefix"] = o.DdnsGeneratedPrefix
	}
	if !IsNil(o.DdnsSendUpdates) {
		toSerialize["ddns_send_updates"] = o.DdnsSendUpdates
	}
	if !IsNil(o.DdnsTtlPercent) {
		toSerialize["ddns_ttl_percent"] = o.DdnsTtlPercent
	}
	if !IsNil(o.DdnsUpdateOnRenew) {
		toSerialize["ddns_update_on_renew"] = o.DdnsUpdateOnRenew
	}
	if !IsNil(o.DdnsUseConflictResolution) {
		toSerialize["ddns_use_conflict_resolution"] = o.DdnsUseConflictResolution
	}
	if !IsNil(o.DdnsZones) {
		toSerialize["ddns_zones"] = o.DdnsZones
	}
	if !IsNil(o.DhcpConfig) {
		toSerialize["dhcp_config"] = o.DhcpConfig
	}
	if !IsNil(o.DhcpOptions) {
		toSerialize["dhcp_options"] = o.DhcpOptions
	}
	if !IsNil(o.DhcpOptionsV6) {
		toSerialize["dhcp_options_v6"] = o.DhcpOptionsV6
	}
	if !IsNil(o.DhcpThreshold) {
		toSerialize["dhcp_threshold"] = o.DhcpThreshold
	}
	if !IsNil(o.GssTsigFallback) {
		toSerialize["gss_tsig_fallback"] = o.GssTsigFallback
	}
	if !IsNil(o.HeaderOptionFilename) {
		toSerialize["header_option_filename"] = o.HeaderOptionFilename
	}
	if !IsNil(o.HeaderOptionServerAddress) {
		toSerialize["header_option_server_address"] = o.HeaderOptionServerAddress
	}
	if !IsNil(o.HeaderOptionServerName) {
		toSerialize["header_option_server_name"] = o.HeaderOptionServerName
	}
	if !IsNil(o.HostnameRewriteChar) {
		toSerialize["hostname_rewrite_char"] = o.HostnameRewriteChar
	}
	if !IsNil(o.HostnameRewriteEnabled) {
		toSerialize["hostname_rewrite_enabled"] = o.HostnameRewriteEnabled
	}
	if !IsNil(o.HostnameRewriteRegex) {
		toSerialize["hostname_rewrite_regex"] = o.HostnameRewriteRegex
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.KerberosKdc) {
		toSerialize["kerberos_kdc"] = o.KerberosKdc
	}
	if !IsNil(o.KerberosKeys) {
		toSerialize["kerberos_keys"] = o.KerberosKeys
	}
	if !IsNil(o.KerberosRekeyInterval) {
		toSerialize["kerberos_rekey_interval"] = o.KerberosRekeyInterval
	}
	if !IsNil(o.KerberosRetryInterval) {
		toSerialize["kerberos_retry_interval"] = o.KerberosRetryInterval
	}
	if !IsNil(o.KerberosTkeyLifetime) {
		toSerialize["kerberos_tkey_lifetime"] = o.KerberosTkeyLifetime
	}
	if !IsNil(o.KerberosTkeyProtocol) {
		toSerialize["kerberos_tkey_protocol"] = o.KerberosTkeyProtocol
	}
	if !IsNil(o.PreferOption12) {
		toSerialize["prefer_option_12"] = o.PreferOption12
	}
	if !IsNil(o.RemoveSuffixOption81) {
		toSerialize["remove_suffix_option_81"] = o.RemoveSuffixOption81
	}
	if !IsNil(o.ServerPrincipal) {
		toSerialize["server_principal"] = o.ServerPrincipal
	}
	if !IsNil(o.VendorSpecificOptionOptionSpace) {
		toSerialize["vendor_specific_option_option_space"] = o.VendorSpecificOptionOptionSpace
	}
	return toSerialize, nil
}

type NullableIpamsvcGlobal struct {
	value *IpamsvcGlobal
	isSet bool
}

func (v NullableIpamsvcGlobal) Get() *IpamsvcGlobal {
	return v.value
}

func (v *NullableIpamsvcGlobal) Set(val *IpamsvcGlobal) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamsvcGlobal) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamsvcGlobal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamsvcGlobal(val *IpamsvcGlobal) *NullableIpamsvcGlobal {
	return &NullableIpamsvcGlobal{value: val, isSet: true}
}

func (v NullableIpamsvcGlobal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamsvcGlobal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
