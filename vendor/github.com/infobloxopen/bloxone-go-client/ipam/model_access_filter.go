/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// checks if the AccessFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessFilter{}

// AccessFilter The __AccessFilter__ object represents an allow/deny filter for a DHCP range.
type AccessFilter struct {
	// The access type of DHCP filter (_allow_ or _deny_).  Defaults to _allow_.
	Access string `json:"access"`
	// The resource identifier.
	HardwareFilterId *string `json:"hardware_filter_id,omitempty"`
	// The resource identifier.
	OptionFilterId       *string `json:"option_filter_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccessFilter AccessFilter

// NewAccessFilter instantiates a new AccessFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessFilter(access string) *AccessFilter {
	this := AccessFilter{}
	this.Access = access
	return &this
}

// NewAccessFilterWithDefaults instantiates a new AccessFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessFilterWithDefaults() *AccessFilter {
	this := AccessFilter{}
	return &this
}

// GetAccess returns the Access field value
func (o *AccessFilter) GetAccess() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Access
}

// GetAccessOk returns a tuple with the Access field value
// and a boolean to check if the value has been set.
func (o *AccessFilter) GetAccessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Access, true
}

// SetAccess sets field value
func (o *AccessFilter) SetAccess(v string) {
	o.Access = v
}

// GetHardwareFilterId returns the HardwareFilterId field value if set, zero value otherwise.
func (o *AccessFilter) GetHardwareFilterId() string {
	if o == nil || IsNil(o.HardwareFilterId) {
		var ret string
		return ret
	}
	return *o.HardwareFilterId
}

// GetHardwareFilterIdOk returns a tuple with the HardwareFilterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessFilter) GetHardwareFilterIdOk() (*string, bool) {
	if o == nil || IsNil(o.HardwareFilterId) {
		return nil, false
	}
	return o.HardwareFilterId, true
}

// HasHardwareFilterId returns a boolean if a field has been set.
func (o *AccessFilter) HasHardwareFilterId() bool {
	if o != nil && !IsNil(o.HardwareFilterId) {
		return true
	}

	return false
}

// SetHardwareFilterId gets a reference to the given string and assigns it to the HardwareFilterId field.
func (o *AccessFilter) SetHardwareFilterId(v string) {
	o.HardwareFilterId = &v
}

// GetOptionFilterId returns the OptionFilterId field value if set, zero value otherwise.
func (o *AccessFilter) GetOptionFilterId() string {
	if o == nil || IsNil(o.OptionFilterId) {
		var ret string
		return ret
	}
	return *o.OptionFilterId
}

// GetOptionFilterIdOk returns a tuple with the OptionFilterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessFilter) GetOptionFilterIdOk() (*string, bool) {
	if o == nil || IsNil(o.OptionFilterId) {
		return nil, false
	}
	return o.OptionFilterId, true
}

// HasOptionFilterId returns a boolean if a field has been set.
func (o *AccessFilter) HasOptionFilterId() bool {
	if o != nil && !IsNil(o.OptionFilterId) {
		return true
	}

	return false
}

// SetOptionFilterId gets a reference to the given string and assigns it to the OptionFilterId field.
func (o *AccessFilter) SetOptionFilterId(v string) {
	o.OptionFilterId = &v
}

func (o AccessFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access"] = o.Access
	if !IsNil(o.HardwareFilterId) {
		toSerialize["hardware_filter_id"] = o.HardwareFilterId
	}
	if !IsNil(o.OptionFilterId) {
		toSerialize["option_filter_id"] = o.OptionFilterId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccessFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessFilter := _AccessFilter{}

	err = json.Unmarshal(data, &varAccessFilter)

	if err != nil {
		return err
	}

	*o = AccessFilter(varAccessFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "access")
		delete(additionalProperties, "hardware_filter_id")
		delete(additionalProperties, "option_filter_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccessFilter struct {
	value *AccessFilter
	isSet bool
}

func (v NullableAccessFilter) Get() *AccessFilter {
	return v.value
}

func (v *NullableAccessFilter) Set(val *AccessFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessFilter(val *AccessFilter) *NullableAccessFilter {
	return &NullableAccessFilter{value: val, isSet: true}
}

func (v NullableAccessFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
