/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// checks if the BulkMacAddressItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BulkMacAddressItem{}

// BulkMacAddressItem A __BulkMacAddressItem__ object creates mac address items in bulk.
type BulkMacAddressItem struct {
	// The addresses to match for the hardware filter.
	Addresses []string `json:"addresses"`
	// The resource identifier.
	HardwareFilterId     string `json:"hardware_filter_id"`
	AdditionalProperties map[string]interface{}
}

type _BulkMacAddressItem BulkMacAddressItem

// NewBulkMacAddressItem instantiates a new BulkMacAddressItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBulkMacAddressItem(addresses []string, hardwareFilterId string) *BulkMacAddressItem {
	this := BulkMacAddressItem{}
	this.Addresses = addresses
	this.HardwareFilterId = hardwareFilterId
	return &this
}

// NewBulkMacAddressItemWithDefaults instantiates a new BulkMacAddressItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBulkMacAddressItemWithDefaults() *BulkMacAddressItem {
	this := BulkMacAddressItem{}
	return &this
}

// GetAddresses returns the Addresses field value
func (o *BulkMacAddressItem) GetAddresses() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value
// and a boolean to check if the value has been set.
func (o *BulkMacAddressItem) GetAddressesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Addresses, true
}

// SetAddresses sets field value
func (o *BulkMacAddressItem) SetAddresses(v []string) {
	o.Addresses = v
}

// GetHardwareFilterId returns the HardwareFilterId field value
func (o *BulkMacAddressItem) GetHardwareFilterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HardwareFilterId
}

// GetHardwareFilterIdOk returns a tuple with the HardwareFilterId field value
// and a boolean to check if the value has been set.
func (o *BulkMacAddressItem) GetHardwareFilterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HardwareFilterId, true
}

// SetHardwareFilterId sets field value
func (o *BulkMacAddressItem) SetHardwareFilterId(v string) {
	o.HardwareFilterId = v
}

func (o BulkMacAddressItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BulkMacAddressItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["addresses"] = o.Addresses
	toSerialize["hardware_filter_id"] = o.HardwareFilterId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BulkMacAddressItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"addresses",
		"hardware_filter_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBulkMacAddressItem := _BulkMacAddressItem{}

	err = json.Unmarshal(data, &varBulkMacAddressItem)

	if err != nil {
		return err
	}

	*o = BulkMacAddressItem(varBulkMacAddressItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "addresses")
		delete(additionalProperties, "hardware_filter_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBulkMacAddressItem struct {
	value *BulkMacAddressItem
	isSet bool
}

func (v NullableBulkMacAddressItem) Get() *BulkMacAddressItem {
	return v.value
}

func (v *NullableBulkMacAddressItem) Set(val *BulkMacAddressItem) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkMacAddressItem) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkMacAddressItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkMacAddressItem(val *BulkMacAddressItem) *NullableBulkMacAddressItem {
	return &NullableBulkMacAddressItem{value: val, isSet: true}
}

func (v NullableBulkMacAddressItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkMacAddressItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
