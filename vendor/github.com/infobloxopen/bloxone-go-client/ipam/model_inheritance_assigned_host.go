/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the InheritanceAssignedHost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InheritanceAssignedHost{}

// InheritanceAssignedHost _ddi/assigned_host_ represents a BloxOne DDI host assigned to one of the following:  * Subnet (_ipam/subnet_)  * Range (_ipam/range_)  * Fixed Address (_dhcp/fixed_address_)  * Authoritative Zone (_dns/auth_zone_)
type InheritanceAssignedHost struct {
	// The human-readable display name for the host referred to by _ophid_.
	DisplayName *string `json:"display_name,omitempty"`
	// The resource identifier.
	Host *string `json:"host,omitempty"`
	// The on-prem host ID.
	Ophid *string `json:"ophid,omitempty"`
}

// NewInheritanceAssignedHost instantiates a new InheritanceAssignedHost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInheritanceAssignedHost() *InheritanceAssignedHost {
	this := InheritanceAssignedHost{}
	return &this
}

// NewInheritanceAssignedHostWithDefaults instantiates a new InheritanceAssignedHost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInheritanceAssignedHostWithDefaults() *InheritanceAssignedHost {
	this := InheritanceAssignedHost{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *InheritanceAssignedHost) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InheritanceAssignedHost) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *InheritanceAssignedHost) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *InheritanceAssignedHost) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *InheritanceAssignedHost) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InheritanceAssignedHost) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *InheritanceAssignedHost) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *InheritanceAssignedHost) SetHost(v string) {
	o.Host = &v
}

// GetOphid returns the Ophid field value if set, zero value otherwise.
func (o *InheritanceAssignedHost) GetOphid() string {
	if o == nil || IsNil(o.Ophid) {
		var ret string
		return ret
	}
	return *o.Ophid
}

// GetOphidOk returns a tuple with the Ophid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InheritanceAssignedHost) GetOphidOk() (*string, bool) {
	if o == nil || IsNil(o.Ophid) {
		return nil, false
	}
	return o.Ophid, true
}

// HasOphid returns a boolean if a field has been set.
func (o *InheritanceAssignedHost) HasOphid() bool {
	if o != nil && !IsNil(o.Ophid) {
		return true
	}

	return false
}

// SetOphid gets a reference to the given string and assigns it to the Ophid field.
func (o *InheritanceAssignedHost) SetOphid(v string) {
	o.Ophid = &v
}

func (o InheritanceAssignedHost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InheritanceAssignedHost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Ophid) {
		toSerialize["ophid"] = o.Ophid
	}
	return toSerialize, nil
}

type NullableInheritanceAssignedHost struct {
	value *InheritanceAssignedHost
	isSet bool
}

func (v NullableInheritanceAssignedHost) Get() *InheritanceAssignedHost {
	return v.value
}

func (v *NullableInheritanceAssignedHost) Set(val *InheritanceAssignedHost) {
	v.value = val
	v.isSet = true
}

func (v NullableInheritanceAssignedHost) IsSet() bool {
	return v.isSet
}

func (v *NullableInheritanceAssignedHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInheritanceAssignedHost(val *InheritanceAssignedHost) *NullableInheritanceAssignedHost {
	return &NullableInheritanceAssignedHost{value: val, isSet: true}
}

func (v NullableInheritanceAssignedHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInheritanceAssignedHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
