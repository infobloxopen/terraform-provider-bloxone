/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// checks if the ExclusionRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExclusionRange{}

// ExclusionRange The __ExclusionRange__ object represents an exclusion range inside a DHCP range.
type ExclusionRange struct {
	// The description for the exclusion range. May contain 0 to 1024 characters. Can include UTF-8.
	Comment *string `json:"comment,omitempty"`
	// The end address of the exclusion range.
	End string `json:"end"`
	// The start address of the exclusion range.
	Start                string `json:"start"`
	AdditionalProperties map[string]interface{}
}

type _ExclusionRange ExclusionRange

// NewExclusionRange instantiates a new ExclusionRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExclusionRange(end string, start string) *ExclusionRange {
	this := ExclusionRange{}
	this.End = end
	this.Start = start
	return &this
}

// NewExclusionRangeWithDefaults instantiates a new ExclusionRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExclusionRangeWithDefaults() *ExclusionRange {
	this := ExclusionRange{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ExclusionRange) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExclusionRange) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ExclusionRange) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ExclusionRange) SetComment(v string) {
	o.Comment = &v
}

// GetEnd returns the End field value
func (o *ExclusionRange) GetEnd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *ExclusionRange) GetEndOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *ExclusionRange) SetEnd(v string) {
	o.End = v
}

// GetStart returns the Start field value
func (o *ExclusionRange) GetStart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *ExclusionRange) GetStartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *ExclusionRange) SetStart(v string) {
	o.Start = v
}

func (o ExclusionRange) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExclusionRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	toSerialize["end"] = o.End
	toSerialize["start"] = o.Start

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExclusionRange) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"end",
		"start",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExclusionRange := _ExclusionRange{}

	err = json.Unmarshal(data, &varExclusionRange)

	if err != nil {
		return err
	}

	*o = ExclusionRange(varExclusionRange)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "comment")
		delete(additionalProperties, "end")
		delete(additionalProperties, "start")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExclusionRange struct {
	value *ExclusionRange
	isSet bool
}

func (v NullableExclusionRange) Get() *ExclusionRange {
	return v.value
}

func (v *NullableExclusionRange) Set(val *ExclusionRange) {
	v.value = val
	v.isSet = true
}

func (v NullableExclusionRange) IsSet() bool {
	return v.isSet
}

func (v *NullableExclusionRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExclusionRange(val *ExclusionRange) *NullableExclusionRange {
	return &NullableExclusionRange{value: val, isSet: true}
}

func (v NullableExclusionRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExclusionRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
