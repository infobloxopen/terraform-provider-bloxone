/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the IpamsvcTSIGKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpamsvcTSIGKey{}

// IpamsvcTSIGKey A __TSIGKey__ object represents a TSIG key.
type IpamsvcTSIGKey struct {
	// TSIG key algorithm.  Valid values are:  * _hmac_sha256_  * _hmac_sha1_  * _hmac_sha224_  * _hmac_sha384_  * _hmac_sha512_
	Algorithm *string `json:"algorithm,omitempty"`
	// The description for the TSIG key. May contain 0 to 1024 characters. Can include UTF-8.
	Comment *string `json:"comment,omitempty"`
	// The resource identifier.
	Key string `json:"key"`
	// The TSIG key name, FQDN.
	Name *string `json:"name,omitempty"`
	// The TSIG key name in punycode.
	ProtocolName *string `json:"protocol_name,omitempty"`
	// The TSIG key secret, base64 string.
	Secret *string `json:"secret,omitempty"`
}

// NewIpamsvcTSIGKey instantiates a new IpamsvcTSIGKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpamsvcTSIGKey(key string) *IpamsvcTSIGKey {
	this := IpamsvcTSIGKey{}
	this.Key = key
	return &this
}

// NewIpamsvcTSIGKeyWithDefaults instantiates a new IpamsvcTSIGKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpamsvcTSIGKeyWithDefaults() *IpamsvcTSIGKey {
	this := IpamsvcTSIGKey{}
	return &this
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *IpamsvcTSIGKey) GetAlgorithm() string {
	if o == nil || IsNil(o.Algorithm) {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcTSIGKey) GetAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.Algorithm) {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *IpamsvcTSIGKey) HasAlgorithm() bool {
	if o != nil && !IsNil(o.Algorithm) {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *IpamsvcTSIGKey) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *IpamsvcTSIGKey) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcTSIGKey) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *IpamsvcTSIGKey) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *IpamsvcTSIGKey) SetComment(v string) {
	o.Comment = &v
}

// GetKey returns the Key field value
func (o *IpamsvcTSIGKey) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *IpamsvcTSIGKey) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *IpamsvcTSIGKey) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IpamsvcTSIGKey) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcTSIGKey) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IpamsvcTSIGKey) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IpamsvcTSIGKey) SetName(v string) {
	o.Name = &v
}

// GetProtocolName returns the ProtocolName field value if set, zero value otherwise.
func (o *IpamsvcTSIGKey) GetProtocolName() string {
	if o == nil || IsNil(o.ProtocolName) {
		var ret string
		return ret
	}
	return *o.ProtocolName
}

// GetProtocolNameOk returns a tuple with the ProtocolName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcTSIGKey) GetProtocolNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProtocolName) {
		return nil, false
	}
	return o.ProtocolName, true
}

// HasProtocolName returns a boolean if a field has been set.
func (o *IpamsvcTSIGKey) HasProtocolName() bool {
	if o != nil && !IsNil(o.ProtocolName) {
		return true
	}

	return false
}

// SetProtocolName gets a reference to the given string and assigns it to the ProtocolName field.
func (o *IpamsvcTSIGKey) SetProtocolName(v string) {
	o.ProtocolName = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *IpamsvcTSIGKey) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcTSIGKey) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *IpamsvcTSIGKey) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *IpamsvcTSIGKey) SetSecret(v string) {
	o.Secret = &v
}

func (o IpamsvcTSIGKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpamsvcTSIGKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Algorithm) {
		toSerialize["algorithm"] = o.Algorithm
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	toSerialize["key"] = o.Key
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ProtocolName) {
		toSerialize["protocol_name"] = o.ProtocolName
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	return toSerialize, nil
}

type NullableIpamsvcTSIGKey struct {
	value *IpamsvcTSIGKey
	isSet bool
}

func (v NullableIpamsvcTSIGKey) Get() *IpamsvcTSIGKey {
	return v.value
}

func (v *NullableIpamsvcTSIGKey) Set(val *IpamsvcTSIGKey) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamsvcTSIGKey) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamsvcTSIGKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamsvcTSIGKey(val *IpamsvcTSIGKey) *NullableIpamsvcTSIGKey {
	return &NullableIpamsvcTSIGKey{value: val, isSet: true}
}

func (v NullableIpamsvcTSIGKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamsvcTSIGKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
