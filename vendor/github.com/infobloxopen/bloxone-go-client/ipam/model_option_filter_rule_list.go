/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the OptionFilterRuleList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OptionFilterRuleList{}

// OptionFilterRuleList An __OptionFilterRuleList__ object (_dhcp/option_filter_rule_list_) represents a collection of DHCP option filter rules that supports matching all or any rules.
type OptionFilterRuleList struct {
	// Indicates if this list should match if any or all rules match (_any_ or _all_).
	Match *string `json:"match,omitempty"`
	// The list of child rules.
	Rules                []OptionFilterRule `json:"rules,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OptionFilterRuleList OptionFilterRuleList

// NewOptionFilterRuleList instantiates a new OptionFilterRuleList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionFilterRuleList() *OptionFilterRuleList {
	this := OptionFilterRuleList{}
	return &this
}

// NewOptionFilterRuleListWithDefaults instantiates a new OptionFilterRuleList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionFilterRuleListWithDefaults() *OptionFilterRuleList {
	this := OptionFilterRuleList{}
	return &this
}

// GetMatch returns the Match field value if set, zero value otherwise.
func (o *OptionFilterRuleList) GetMatch() string {
	if o == nil || IsNil(o.Match) {
		var ret string
		return ret
	}
	return *o.Match
}

// GetMatchOk returns a tuple with the Match field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionFilterRuleList) GetMatchOk() (*string, bool) {
	if o == nil || IsNil(o.Match) {
		return nil, false
	}
	return o.Match, true
}

// HasMatch returns a boolean if a field has been set.
func (o *OptionFilterRuleList) HasMatch() bool {
	if o != nil && !IsNil(o.Match) {
		return true
	}

	return false
}

// SetMatch gets a reference to the given string and assigns it to the Match field.
func (o *OptionFilterRuleList) SetMatch(v string) {
	o.Match = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *OptionFilterRuleList) GetRules() []OptionFilterRule {
	if o == nil || IsNil(o.Rules) {
		var ret []OptionFilterRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionFilterRuleList) GetRulesOk() ([]OptionFilterRule, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *OptionFilterRuleList) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []OptionFilterRule and assigns it to the Rules field.
func (o *OptionFilterRuleList) SetRules(v []OptionFilterRule) {
	o.Rules = v
}

func (o OptionFilterRuleList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OptionFilterRuleList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Match) {
		toSerialize["match"] = o.Match
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OptionFilterRuleList) UnmarshalJSON(data []byte) (err error) {
	varOptionFilterRuleList := _OptionFilterRuleList{}

	err = json.Unmarshal(data, &varOptionFilterRuleList)

	if err != nil {
		return err
	}

	*o = OptionFilterRuleList(varOptionFilterRuleList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "match")
		delete(additionalProperties, "rules")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOptionFilterRuleList struct {
	value *OptionFilterRuleList
	isSet bool
}

func (v NullableOptionFilterRuleList) Get() *OptionFilterRuleList {
	return v.value
}

func (v *NullableOptionFilterRuleList) Set(val *OptionFilterRuleList) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionFilterRuleList) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionFilterRuleList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionFilterRuleList(val *OptionFilterRuleList) *NullableOptionFilterRuleList {
	return &NullableOptionFilterRuleList{value: val, isSet: true}
}

func (v NullableOptionFilterRuleList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionFilterRuleList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
