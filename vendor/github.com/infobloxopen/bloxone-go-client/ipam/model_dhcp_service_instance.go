/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the DHCPServiceInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DHCPServiceInstance{}

// DHCPServiceInstance A DHCP Service (_dhcp/service_) object associates DHCP configuration with the DHCP host services.   Automatically created and destroyed based on the hosts known to the platform.
type DHCPServiceInstance struct {
	AssociatedHosts  []AssociatedHost      `json:"associated_hosts,omitempty"`
	AssociatedServer *HostAssociatedServer `json:"associated_server,omitempty"`
	// The comment for the service.
	Comment *string `json:"comment,omitempty"`
	// The resource identifier.
	Id *string `json:"id,omitempty"`
	// The resource identifier.
	IpSpace *string `json:"ip_space,omitempty"`
	// The display name of the service.
	Name *string `json:"name,omitempty"`
	// The tags of the service host in JSON format.
	Tags                 map[string]interface{} `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DHCPServiceInstance DHCPServiceInstance

// NewDHCPServiceInstance instantiates a new DHCPServiceInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDHCPServiceInstance() *DHCPServiceInstance {
	this := DHCPServiceInstance{}
	return &this
}

// NewDHCPServiceInstanceWithDefaults instantiates a new DHCPServiceInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDHCPServiceInstanceWithDefaults() *DHCPServiceInstance {
	this := DHCPServiceInstance{}
	return &this
}

// GetAssociatedHosts returns the AssociatedHosts field value if set, zero value otherwise.
func (o *DHCPServiceInstance) GetAssociatedHosts() []AssociatedHost {
	if o == nil || IsNil(o.AssociatedHosts) {
		var ret []AssociatedHost
		return ret
	}
	return o.AssociatedHosts
}

// GetAssociatedHostsOk returns a tuple with the AssociatedHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DHCPServiceInstance) GetAssociatedHostsOk() ([]AssociatedHost, bool) {
	if o == nil || IsNil(o.AssociatedHosts) {
		return nil, false
	}
	return o.AssociatedHosts, true
}

// HasAssociatedHosts returns a boolean if a field has been set.
func (o *DHCPServiceInstance) HasAssociatedHosts() bool {
	if o != nil && !IsNil(o.AssociatedHosts) {
		return true
	}

	return false
}

// SetAssociatedHosts gets a reference to the given []AssociatedHost and assigns it to the AssociatedHosts field.
func (o *DHCPServiceInstance) SetAssociatedHosts(v []AssociatedHost) {
	o.AssociatedHosts = v
}

// GetAssociatedServer returns the AssociatedServer field value if set, zero value otherwise.
func (o *DHCPServiceInstance) GetAssociatedServer() HostAssociatedServer {
	if o == nil || IsNil(o.AssociatedServer) {
		var ret HostAssociatedServer
		return ret
	}
	return *o.AssociatedServer
}

// GetAssociatedServerOk returns a tuple with the AssociatedServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DHCPServiceInstance) GetAssociatedServerOk() (*HostAssociatedServer, bool) {
	if o == nil || IsNil(o.AssociatedServer) {
		return nil, false
	}
	return o.AssociatedServer, true
}

// HasAssociatedServer returns a boolean if a field has been set.
func (o *DHCPServiceInstance) HasAssociatedServer() bool {
	if o != nil && !IsNil(o.AssociatedServer) {
		return true
	}

	return false
}

// SetAssociatedServer gets a reference to the given HostAssociatedServer and assigns it to the AssociatedServer field.
func (o *DHCPServiceInstance) SetAssociatedServer(v HostAssociatedServer) {
	o.AssociatedServer = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DHCPServiceInstance) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DHCPServiceInstance) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DHCPServiceInstance) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DHCPServiceInstance) SetComment(v string) {
	o.Comment = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DHCPServiceInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DHCPServiceInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DHCPServiceInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DHCPServiceInstance) SetId(v string) {
	o.Id = &v
}

// GetIpSpace returns the IpSpace field value if set, zero value otherwise.
func (o *DHCPServiceInstance) GetIpSpace() string {
	if o == nil || IsNil(o.IpSpace) {
		var ret string
		return ret
	}
	return *o.IpSpace
}

// GetIpSpaceOk returns a tuple with the IpSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DHCPServiceInstance) GetIpSpaceOk() (*string, bool) {
	if o == nil || IsNil(o.IpSpace) {
		return nil, false
	}
	return o.IpSpace, true
}

// HasIpSpace returns a boolean if a field has been set.
func (o *DHCPServiceInstance) HasIpSpace() bool {
	if o != nil && !IsNil(o.IpSpace) {
		return true
	}

	return false
}

// SetIpSpace gets a reference to the given string and assigns it to the IpSpace field.
func (o *DHCPServiceInstance) SetIpSpace(v string) {
	o.IpSpace = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DHCPServiceInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DHCPServiceInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DHCPServiceInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DHCPServiceInstance) SetName(v string) {
	o.Name = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DHCPServiceInstance) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DHCPServiceInstance) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DHCPServiceInstance) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *DHCPServiceInstance) SetTags(v map[string]interface{}) {
	o.Tags = v
}

func (o DHCPServiceInstance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DHCPServiceInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssociatedHosts) {
		toSerialize["associated_hosts"] = o.AssociatedHosts
	}
	if !IsNil(o.AssociatedServer) {
		toSerialize["associated_server"] = o.AssociatedServer
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IpSpace) {
		toSerialize["ip_space"] = o.IpSpace
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DHCPServiceInstance) UnmarshalJSON(data []byte) (err error) {
	varDHCPServiceInstance := _DHCPServiceInstance{}

	err = json.Unmarshal(data, &varDHCPServiceInstance)

	if err != nil {
		return err
	}

	*o = DHCPServiceInstance(varDHCPServiceInstance)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "associated_hosts")
		delete(additionalProperties, "associated_server")
		delete(additionalProperties, "comment")
		delete(additionalProperties, "id")
		delete(additionalProperties, "ip_space")
		delete(additionalProperties, "name")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDHCPServiceInstance struct {
	value *DHCPServiceInstance
	isSet bool
}

func (v NullableDHCPServiceInstance) Get() *DHCPServiceInstance {
	return v.value
}

func (v *NullableDHCPServiceInstance) Set(val *DHCPServiceInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableDHCPServiceInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableDHCPServiceInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDHCPServiceInstance(val *DHCPServiceInstance) *NullableDHCPServiceInstance {
	return &NullableDHCPServiceInstance{value: val, isSet: true}
}

func (v NullableDHCPServiceInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDHCPServiceInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
