/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	"github.com/infobloxopen/bloxone-go-client/internal"
)

type ConfigProfileAPI interface {
	/*
		AssociateConfigProfileToObjects Associate a config profile to objects.

		Use this method to associate a __ConfigProfile__ with an object.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ConfigProfileAPIAssociateConfigProfileToObjectsRequest
	*/
	AssociateConfigProfileToObjects(ctx context.Context) ConfigProfileAPIAssociateConfigProfileToObjectsRequest

	// AssociateConfigProfileToObjectsExecute executes the request
	//  @return map[string]interface{}
	AssociateConfigProfileToObjectsExecute(r ConfigProfileAPIAssociateConfigProfileToObjectsRequest) (map[string]interface{}, *http.Response, error)
	/*
		AssociateObjectToConfigProfiles Associate an object to config profiles.

		Use this method to associate an object with a __ConfigProfile__.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ConfigProfileAPIAssociateObjectToConfigProfilesRequest
	*/
	AssociateObjectToConfigProfiles(ctx context.Context) ConfigProfileAPIAssociateObjectToConfigProfilesRequest

	// AssociateObjectToConfigProfilesExecute executes the request
	//  @return map[string]interface{}
	AssociateObjectToConfigProfilesExecute(r ConfigProfileAPIAssociateObjectToConfigProfilesRequest) (map[string]interface{}, *http.Response, error)
	/*
		DisassociateConfigProfileFromObjects Disassociate a config profile from objects.

		Use this method to disassociate a __ConfigProfile__ from an object.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ConfigProfileAPIDisassociateConfigProfileFromObjectsRequest
	*/
	DisassociateConfigProfileFromObjects(ctx context.Context) ConfigProfileAPIDisassociateConfigProfileFromObjectsRequest

	// DisassociateConfigProfileFromObjectsExecute executes the request
	//  @return map[string]interface{}
	DisassociateConfigProfileFromObjectsExecute(r ConfigProfileAPIDisassociateConfigProfileFromObjectsRequest) (map[string]interface{}, *http.Response, error)
	/*
		DisassociateObjectFromConfigProfiles Disassociate an object from a config profile.

		Use this method to disassociate an object from a __ConfigProfile__.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ConfigProfileAPIDisassociateObjectFromConfigProfilesRequest
	*/
	DisassociateObjectFromConfigProfiles(ctx context.Context) ConfigProfileAPIDisassociateObjectFromConfigProfilesRequest

	// DisassociateObjectFromConfigProfilesExecute executes the request
	//  @return map[string]interface{}
	DisassociateObjectFromConfigProfilesExecute(r ConfigProfileAPIDisassociateObjectFromConfigProfilesRequest) (map[string]interface{}, *http.Response, error)
	/*
		ListConfigProfiles Retrieve config profiles.

		Use this method to retrieve __ConfigProfile__ objects.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ConfigProfileAPIListConfigProfilesRequest
	*/
	ListConfigProfiles(ctx context.Context) ConfigProfileAPIListConfigProfilesRequest

	// ListConfigProfilesExecute executes the request
	//  @return ListConfigProfileResponse
	ListConfigProfilesExecute(r ConfigProfileAPIListConfigProfilesRequest) (*ListConfigProfileResponse, *http.Response, error)
	/*
		ListSubnets Retrieve subnets associated with a config profile.

		Use this method to retrieve __Subnet__ objects associated with a __ConfigProfile__.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ConfigProfileAPIListSubnetsRequest
	*/
	ListSubnets(ctx context.Context) ConfigProfileAPIListSubnetsRequest

	// ListSubnetsExecute executes the request
	//  @return ListCPSubnetResponse
	ListSubnetsExecute(r ConfigProfileAPIListSubnetsRequest) (*ListCPSubnetResponse, *http.Response, error)
}

// ConfigProfileAPIService ConfigProfileAPI service
type ConfigProfileAPIService internal.Service

type ConfigProfileAPIAssociateConfigProfileToObjectsRequest struct {
	ctx        context.Context
	ApiService ConfigProfileAPI
	body       *AssociateConfigProfileToObjectsRequest
}

func (r ConfigProfileAPIAssociateConfigProfileToObjectsRequest) Body(body AssociateConfigProfileToObjectsRequest) ConfigProfileAPIAssociateConfigProfileToObjectsRequest {
	r.body = &body
	return r
}

func (r ConfigProfileAPIAssociateConfigProfileToObjectsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.AssociateConfigProfileToObjectsExecute(r)
}

/*
AssociateConfigProfileToObjects Associate a config profile to objects.

Use this method to associate a __ConfigProfile__ with an object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ConfigProfileAPIAssociateConfigProfileToObjectsRequest
*/
func (a *ConfigProfileAPIService) AssociateConfigProfileToObjects(ctx context.Context) ConfigProfileAPIAssociateConfigProfileToObjectsRequest {
	return ConfigProfileAPIAssociateConfigProfileToObjectsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *ConfigProfileAPIService) AssociateConfigProfileToObjectsExecute(r ConfigProfileAPIAssociateConfigProfileToObjectsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ConfigProfileAPIService.AssociateConfigProfileToObjects")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dhcp/config_profile/link_profile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, internal.ReportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigProfileAPIAssociateObjectToConfigProfilesRequest struct {
	ctx        context.Context
	ApiService ConfigProfileAPI
	body       *AssociateObjectToConfigProfilesRequest
}

func (r ConfigProfileAPIAssociateObjectToConfigProfilesRequest) Body(body AssociateObjectToConfigProfilesRequest) ConfigProfileAPIAssociateObjectToConfigProfilesRequest {
	r.body = &body
	return r
}

func (r ConfigProfileAPIAssociateObjectToConfigProfilesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.AssociateObjectToConfigProfilesExecute(r)
}

/*
AssociateObjectToConfigProfiles Associate an object to config profiles.

Use this method to associate an object with a __ConfigProfile__.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ConfigProfileAPIAssociateObjectToConfigProfilesRequest
*/
func (a *ConfigProfileAPIService) AssociateObjectToConfigProfiles(ctx context.Context) ConfigProfileAPIAssociateObjectToConfigProfilesRequest {
	return ConfigProfileAPIAssociateObjectToConfigProfilesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *ConfigProfileAPIService) AssociateObjectToConfigProfilesExecute(r ConfigProfileAPIAssociateObjectToConfigProfilesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ConfigProfileAPIService.AssociateObjectToConfigProfiles")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dhcp/config_profile/link_object"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, internal.ReportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigProfileAPIDisassociateConfigProfileFromObjectsRequest struct {
	ctx        context.Context
	ApiService ConfigProfileAPI
	body       *DisassociateConfigProfileFromObjectsRequest
}

func (r ConfigProfileAPIDisassociateConfigProfileFromObjectsRequest) Body(body DisassociateConfigProfileFromObjectsRequest) ConfigProfileAPIDisassociateConfigProfileFromObjectsRequest {
	r.body = &body
	return r
}

func (r ConfigProfileAPIDisassociateConfigProfileFromObjectsRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DisassociateConfigProfileFromObjectsExecute(r)
}

/*
DisassociateConfigProfileFromObjects Disassociate a config profile from objects.

Use this method to disassociate a __ConfigProfile__ from an object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ConfigProfileAPIDisassociateConfigProfileFromObjectsRequest
*/
func (a *ConfigProfileAPIService) DisassociateConfigProfileFromObjects(ctx context.Context) ConfigProfileAPIDisassociateConfigProfileFromObjectsRequest {
	return ConfigProfileAPIDisassociateConfigProfileFromObjectsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *ConfigProfileAPIService) DisassociateConfigProfileFromObjectsExecute(r ConfigProfileAPIDisassociateConfigProfileFromObjectsRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ConfigProfileAPIService.DisassociateConfigProfileFromObjects")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dhcp/config_profile/delink_profile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, internal.ReportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigProfileAPIDisassociateObjectFromConfigProfilesRequest struct {
	ctx        context.Context
	ApiService ConfigProfileAPI
	body       *DisassociateObjectFromConfigProfilesRequest
}

func (r ConfigProfileAPIDisassociateObjectFromConfigProfilesRequest) Body(body DisassociateObjectFromConfigProfilesRequest) ConfigProfileAPIDisassociateObjectFromConfigProfilesRequest {
	r.body = &body
	return r
}

func (r ConfigProfileAPIDisassociateObjectFromConfigProfilesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DisassociateObjectFromConfigProfilesExecute(r)
}

/*
DisassociateObjectFromConfigProfiles Disassociate an object from a config profile.

Use this method to disassociate an object from a __ConfigProfile__.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ConfigProfileAPIDisassociateObjectFromConfigProfilesRequest
*/
func (a *ConfigProfileAPIService) DisassociateObjectFromConfigProfiles(ctx context.Context) ConfigProfileAPIDisassociateObjectFromConfigProfilesRequest {
	return ConfigProfileAPIDisassociateObjectFromConfigProfilesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *ConfigProfileAPIService) DisassociateObjectFromConfigProfilesExecute(r ConfigProfileAPIDisassociateObjectFromConfigProfilesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ConfigProfileAPIService.DisassociateObjectFromConfigProfiles")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dhcp/config_profile/delink_object"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, internal.ReportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigProfileAPIListConfigProfilesRequest struct {
	ctx        context.Context
	ApiService ConfigProfileAPI
	objectId   *string
}

func (r ConfigProfileAPIListConfigProfilesRequest) ObjectId(objectId string) ConfigProfileAPIListConfigProfilesRequest {
	r.objectId = &objectId
	return r
}

func (r ConfigProfileAPIListConfigProfilesRequest) Execute() (*ListConfigProfileResponse, *http.Response, error) {
	return r.ApiService.ListConfigProfilesExecute(r)
}

/*
ListConfigProfiles Retrieve config profiles.

Use this method to retrieve __ConfigProfile__ objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ConfigProfileAPIListConfigProfilesRequest
*/
func (a *ConfigProfileAPIService) ListConfigProfiles(ctx context.Context) ConfigProfileAPIListConfigProfilesRequest {
	return ConfigProfileAPIListConfigProfilesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListConfigProfileResponse
func (a *ConfigProfileAPIService) ListConfigProfilesExecute(r ConfigProfileAPIListConfigProfilesRequest) (*ListConfigProfileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListConfigProfileResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ConfigProfileAPIService.ListConfigProfiles")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dhcp/config_profile/profiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.objectId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "object_id", r.objectId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConfigProfileAPIListSubnetsRequest struct {
	ctx             context.Context
	ApiService      ConfigProfileAPI
	configProfileId *string
	orderBy         *string
	offset          *int32
	limit           *int32
	pageToken       *string
}

func (r ConfigProfileAPIListSubnetsRequest) ConfigProfileId(configProfileId string) ConfigProfileAPIListSubnetsRequest {
	r.configProfileId = &configProfileId
	return r
}

// A collection of response resources can be sorted by their JSON tags. For a &#39;flat&#39; resource, the tag name is straightforward. If sorting is allowed on non-flat hierarchical resources, the service should implement a qualified naming scheme such as dot-qualification to reference data down the hierarchy. If a resource does not have the specified tag, its value is assumed to be null.)  Specify this parameter as a comma-separated list of JSON tag names. The sort direction can be specified by a suffix separated by whitespace before the tag name. The suffix &#39;asc&#39; sorts the data in ascending order. The suffix &#39;desc&#39; sorts the data in descending order. If no suffix is specified the data is sorted in ascending order.
func (r ConfigProfileAPIListSubnetsRequest) OrderBy(orderBy string) ConfigProfileAPIListSubnetsRequest {
	r.orderBy = &orderBy
	return r
}

// The integer index (zero-origin) of the offset into a collection of resources. If omitted or null the value is assumed to be &#39;0&#39;.
func (r ConfigProfileAPIListSubnetsRequest) Offset(offset int32) ConfigProfileAPIListSubnetsRequest {
	r.offset = &offset
	return r
}

// The integer number of resources to be returned in the response. The service may impose maximum value. If omitted the service may impose a default value.
func (r ConfigProfileAPIListSubnetsRequest) Limit(limit int32) ConfigProfileAPIListSubnetsRequest {
	r.limit = &limit
	return r
}

// The service-defined string used to identify a page of resources. A null value indicates the first page.
func (r ConfigProfileAPIListSubnetsRequest) PageToken(pageToken string) ConfigProfileAPIListSubnetsRequest {
	r.pageToken = &pageToken
	return r
}

func (r ConfigProfileAPIListSubnetsRequest) Execute() (*ListCPSubnetResponse, *http.Response, error) {
	return r.ApiService.ListSubnetsExecute(r)
}

/*
ListSubnets Retrieve subnets associated with a config profile.

Use this method to retrieve __Subnet__ objects associated with a __ConfigProfile__.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ConfigProfileAPIListSubnetsRequest
*/
func (a *ConfigProfileAPIService) ListSubnets(ctx context.Context) ConfigProfileAPIListSubnetsRequest {
	return ConfigProfileAPIListSubnetsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListCPSubnetResponse
func (a *ConfigProfileAPIService) ListSubnetsExecute(r ConfigProfileAPIListSubnetsRequest) (*ListCPSubnetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []internal.FormFile
		localVarReturnValue *ListCPSubnetResponse
	)

	localBasePath, err := a.Client.Cfg.ServerURLWithContext(r.ctx, "ConfigProfileAPIService.ListSubnets")
	if err != nil {
		return localVarReturnValue, nil, internal.NewGenericOpenAPIError(err.Error())
	}

	localVarPath := localBasePath + "/dhcp/config_profile/subnets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.configProfileId != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "config_profile_id", r.configProfileId, "")
	}
	if r.orderBy != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_order_by", r.orderBy, "")
	}
	if r.offset != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_offset", r.offset, "")
	}
	if r.limit != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_limit", r.limit, "")
	}
	if r.pageToken != nil {
		internal.ParameterAddToHeaderOrQuery(localVarQueryParams, "_page_token", r.pageToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := internal.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := internal.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := internal.NewGenericOpenAPIErrorWithBody(localVarHTTPResponse.Status, localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := internal.NewGenericOpenAPIErrorWithBody(err.Error(), localVarBody)
		return localVarReturnValue, localVarHTTPResponse, newErr
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
