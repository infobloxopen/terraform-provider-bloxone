/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the AssociatedHost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssociatedHost{}

// AssociatedHost A DHCP Host (_dhcp/host_) object associates DHCP configuraton with hosts.   Automatically created and destroyed based on the hosts known to the platform.
type AssociatedHost struct {
	// The primary IP address of the on-prem host.
	Address *string `json:"address,omitempty"`
	// The resource identifier.
	Id *string `json:"id,omitempty"`
	// The DHCP host name.
	Name *string `json:"name,omitempty"`
	// The on-prem host ID.
	Ophid                *string `json:"ophid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AssociatedHost AssociatedHost

// NewAssociatedHost instantiates a new AssociatedHost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssociatedHost() *AssociatedHost {
	this := AssociatedHost{}
	return &this
}

// NewAssociatedHostWithDefaults instantiates a new AssociatedHost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssociatedHostWithDefaults() *AssociatedHost {
	this := AssociatedHost{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *AssociatedHost) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociatedHost) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *AssociatedHost) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *AssociatedHost) SetAddress(v string) {
	o.Address = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AssociatedHost) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociatedHost) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AssociatedHost) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AssociatedHost) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AssociatedHost) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociatedHost) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AssociatedHost) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AssociatedHost) SetName(v string) {
	o.Name = &v
}

// GetOphid returns the Ophid field value if set, zero value otherwise.
func (o *AssociatedHost) GetOphid() string {
	if o == nil || IsNil(o.Ophid) {
		var ret string
		return ret
	}
	return *o.Ophid
}

// GetOphidOk returns a tuple with the Ophid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociatedHost) GetOphidOk() (*string, bool) {
	if o == nil || IsNil(o.Ophid) {
		return nil, false
	}
	return o.Ophid, true
}

// HasOphid returns a boolean if a field has been set.
func (o *AssociatedHost) HasOphid() bool {
	if o != nil && !IsNil(o.Ophid) {
		return true
	}

	return false
}

// SetOphid gets a reference to the given string and assigns it to the Ophid field.
func (o *AssociatedHost) SetOphid(v string) {
	o.Ophid = &v
}

func (o AssociatedHost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssociatedHost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Ophid) {
		toSerialize["ophid"] = o.Ophid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AssociatedHost) UnmarshalJSON(data []byte) (err error) {
	varAssociatedHost := _AssociatedHost{}

	err = json.Unmarshal(data, &varAssociatedHost)

	if err != nil {
		return err
	}

	*o = AssociatedHost(varAssociatedHost)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "ophid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssociatedHost struct {
	value *AssociatedHost
	isSet bool
}

func (v NullableAssociatedHost) Get() *AssociatedHost {
	return v.value
}

func (v *NullableAssociatedHost) Set(val *AssociatedHost) {
	v.value = val
	v.isSet = true
}

func (v NullableAssociatedHost) IsSet() bool {
	return v.isSet
}

func (v *NullableAssociatedHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssociatedHost(val *AssociatedHost) *NullableAssociatedHost {
	return &NullableAssociatedHost{value: val, isSet: true}
}

func (v NullableAssociatedHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssociatedHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
