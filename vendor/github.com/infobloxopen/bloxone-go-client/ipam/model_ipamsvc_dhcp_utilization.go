/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the IpamsvcDHCPUtilization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpamsvcDHCPUtilization{}

// IpamsvcDHCPUtilization The __DHCPUtilization__ object represents DHCP utilization statistics for an object.
type IpamsvcDHCPUtilization struct {
	// The total free IP addresses in the DHCP ranges in the scope of this object. It can be computed as _dhcp_total_ - _dhcp_used_.
	DhcpFree *string `json:"dhcp_free,omitempty"`
	// The total IP addresses available in the DHCP ranges in the scope of this object.
	DhcpTotal *string `json:"dhcp_total,omitempty"`
	// The total IP addresses marked as used in the DHCP ranges in the scope of this object.
	DhcpUsed *string `json:"dhcp_used,omitempty"`
	// The percentage of used IP addresses relative to the total IP addresses available in the DHCP ranges in the scope of this object.
	DhcpUtilization *int64 `json:"dhcp_utilization,omitempty"`
}

// NewIpamsvcDHCPUtilization instantiates a new IpamsvcDHCPUtilization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpamsvcDHCPUtilization() *IpamsvcDHCPUtilization {
	this := IpamsvcDHCPUtilization{}
	return &this
}

// NewIpamsvcDHCPUtilizationWithDefaults instantiates a new IpamsvcDHCPUtilization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpamsvcDHCPUtilizationWithDefaults() *IpamsvcDHCPUtilization {
	this := IpamsvcDHCPUtilization{}
	return &this
}

// GetDhcpFree returns the DhcpFree field value if set, zero value otherwise.
func (o *IpamsvcDHCPUtilization) GetDhcpFree() string {
	if o == nil || IsNil(o.DhcpFree) {
		var ret string
		return ret
	}
	return *o.DhcpFree
}

// GetDhcpFreeOk returns a tuple with the DhcpFree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPUtilization) GetDhcpFreeOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpFree) {
		return nil, false
	}
	return o.DhcpFree, true
}

// HasDhcpFree returns a boolean if a field has been set.
func (o *IpamsvcDHCPUtilization) HasDhcpFree() bool {
	if o != nil && !IsNil(o.DhcpFree) {
		return true
	}

	return false
}

// SetDhcpFree gets a reference to the given string and assigns it to the DhcpFree field.
func (o *IpamsvcDHCPUtilization) SetDhcpFree(v string) {
	o.DhcpFree = &v
}

// GetDhcpTotal returns the DhcpTotal field value if set, zero value otherwise.
func (o *IpamsvcDHCPUtilization) GetDhcpTotal() string {
	if o == nil || IsNil(o.DhcpTotal) {
		var ret string
		return ret
	}
	return *o.DhcpTotal
}

// GetDhcpTotalOk returns a tuple with the DhcpTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPUtilization) GetDhcpTotalOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpTotal) {
		return nil, false
	}
	return o.DhcpTotal, true
}

// HasDhcpTotal returns a boolean if a field has been set.
func (o *IpamsvcDHCPUtilization) HasDhcpTotal() bool {
	if o != nil && !IsNil(o.DhcpTotal) {
		return true
	}

	return false
}

// SetDhcpTotal gets a reference to the given string and assigns it to the DhcpTotal field.
func (o *IpamsvcDHCPUtilization) SetDhcpTotal(v string) {
	o.DhcpTotal = &v
}

// GetDhcpUsed returns the DhcpUsed field value if set, zero value otherwise.
func (o *IpamsvcDHCPUtilization) GetDhcpUsed() string {
	if o == nil || IsNil(o.DhcpUsed) {
		var ret string
		return ret
	}
	return *o.DhcpUsed
}

// GetDhcpUsedOk returns a tuple with the DhcpUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPUtilization) GetDhcpUsedOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpUsed) {
		return nil, false
	}
	return o.DhcpUsed, true
}

// HasDhcpUsed returns a boolean if a field has been set.
func (o *IpamsvcDHCPUtilization) HasDhcpUsed() bool {
	if o != nil && !IsNil(o.DhcpUsed) {
		return true
	}

	return false
}

// SetDhcpUsed gets a reference to the given string and assigns it to the DhcpUsed field.
func (o *IpamsvcDHCPUtilization) SetDhcpUsed(v string) {
	o.DhcpUsed = &v
}

// GetDhcpUtilization returns the DhcpUtilization field value if set, zero value otherwise.
func (o *IpamsvcDHCPUtilization) GetDhcpUtilization() int64 {
	if o == nil || IsNil(o.DhcpUtilization) {
		var ret int64
		return ret
	}
	return *o.DhcpUtilization
}

// GetDhcpUtilizationOk returns a tuple with the DhcpUtilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPUtilization) GetDhcpUtilizationOk() (*int64, bool) {
	if o == nil || IsNil(o.DhcpUtilization) {
		return nil, false
	}
	return o.DhcpUtilization, true
}

// HasDhcpUtilization returns a boolean if a field has been set.
func (o *IpamsvcDHCPUtilization) HasDhcpUtilization() bool {
	if o != nil && !IsNil(o.DhcpUtilization) {
		return true
	}

	return false
}

// SetDhcpUtilization gets a reference to the given int64 and assigns it to the DhcpUtilization field.
func (o *IpamsvcDHCPUtilization) SetDhcpUtilization(v int64) {
	o.DhcpUtilization = &v
}

func (o IpamsvcDHCPUtilization) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpamsvcDHCPUtilization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DhcpFree) {
		toSerialize["dhcp_free"] = o.DhcpFree
	}
	if !IsNil(o.DhcpTotal) {
		toSerialize["dhcp_total"] = o.DhcpTotal
	}
	if !IsNil(o.DhcpUsed) {
		toSerialize["dhcp_used"] = o.DhcpUsed
	}
	if !IsNil(o.DhcpUtilization) {
		toSerialize["dhcp_utilization"] = o.DhcpUtilization
	}
	return toSerialize, nil
}

type NullableIpamsvcDHCPUtilization struct {
	value *IpamsvcDHCPUtilization
	isSet bool
}

func (v NullableIpamsvcDHCPUtilization) Get() *IpamsvcDHCPUtilization {
	return v.value
}

func (v *NullableIpamsvcDHCPUtilization) Set(val *IpamsvcDHCPUtilization) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamsvcDHCPUtilization) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamsvcDHCPUtilization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamsvcDHCPUtilization(val *IpamsvcDHCPUtilization) *NullableIpamsvcDHCPUtilization {
	return &NullableIpamsvcDHCPUtilization{value: val, isSet: true}
}

func (v NullableIpamsvcDHCPUtilization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamsvcDHCPUtilization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
