/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the IpamsvcDHCPOptionsInheritance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpamsvcDHCPOptionsInheritance{}

// IpamsvcDHCPOptionsInheritance The inheritance configuration that specifies how the _dhcp_options_ field is inherited from the parent object.
type IpamsvcDHCPOptionsInheritance struct {
	DhcpOptions *IpamsvcInheritedDHCPOptionList `json:"dhcp_options,omitempty"`
}

// NewIpamsvcDHCPOptionsInheritance instantiates a new IpamsvcDHCPOptionsInheritance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpamsvcDHCPOptionsInheritance() *IpamsvcDHCPOptionsInheritance {
	this := IpamsvcDHCPOptionsInheritance{}
	return &this
}

// NewIpamsvcDHCPOptionsInheritanceWithDefaults instantiates a new IpamsvcDHCPOptionsInheritance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpamsvcDHCPOptionsInheritanceWithDefaults() *IpamsvcDHCPOptionsInheritance {
	this := IpamsvcDHCPOptionsInheritance{}
	return &this
}

// GetDhcpOptions returns the DhcpOptions field value if set, zero value otherwise.
func (o *IpamsvcDHCPOptionsInheritance) GetDhcpOptions() IpamsvcInheritedDHCPOptionList {
	if o == nil || IsNil(o.DhcpOptions) {
		var ret IpamsvcInheritedDHCPOptionList
		return ret
	}
	return *o.DhcpOptions
}

// GetDhcpOptionsOk returns a tuple with the DhcpOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPOptionsInheritance) GetDhcpOptionsOk() (*IpamsvcInheritedDHCPOptionList, bool) {
	if o == nil || IsNil(o.DhcpOptions) {
		return nil, false
	}
	return o.DhcpOptions, true
}

// HasDhcpOptions returns a boolean if a field has been set.
func (o *IpamsvcDHCPOptionsInheritance) HasDhcpOptions() bool {
	if o != nil && !IsNil(o.DhcpOptions) {
		return true
	}

	return false
}

// SetDhcpOptions gets a reference to the given IpamsvcInheritedDHCPOptionList and assigns it to the DhcpOptions field.
func (o *IpamsvcDHCPOptionsInheritance) SetDhcpOptions(v IpamsvcInheritedDHCPOptionList) {
	o.DhcpOptions = &v
}

func (o IpamsvcDHCPOptionsInheritance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpamsvcDHCPOptionsInheritance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DhcpOptions) {
		toSerialize["dhcp_options"] = o.DhcpOptions
	}
	return toSerialize, nil
}

type NullableIpamsvcDHCPOptionsInheritance struct {
	value *IpamsvcDHCPOptionsInheritance
	isSet bool
}

func (v NullableIpamsvcDHCPOptionsInheritance) Get() *IpamsvcDHCPOptionsInheritance {
	return v.value
}

func (v *NullableIpamsvcDHCPOptionsInheritance) Set(val *IpamsvcDHCPOptionsInheritance) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamsvcDHCPOptionsInheritance) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamsvcDHCPOptionsInheritance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamsvcDHCPOptionsInheritance(val *IpamsvcDHCPOptionsInheritance) *NullableIpamsvcDHCPOptionsInheritance {
	return &NullableIpamsvcDHCPOptionsInheritance{value: val, isSet: true}
}

func (v NullableIpamsvcDHCPOptionsInheritance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamsvcDHCPOptionsInheritance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
