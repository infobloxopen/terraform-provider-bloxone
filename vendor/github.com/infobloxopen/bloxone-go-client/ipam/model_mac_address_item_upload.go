/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// checks if the MacAddressItemUpload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MacAddressItemUpload{}

// MacAddressItemUpload A __MacAddressItemUpload__ object uploads mac addresses to a large scale hardware filter.
type MacAddressItemUpload struct {
	// If data needs to be appended or overwritten. Defaults to _true_.
	Append *bool `json:"append,omitempty"`
	// The content in plain text of the mac addresses to be uploaded to a large scale hardware filter.
	Content string `json:"content"`
	// The resource identifier.
	HardwareFilterId     string `json:"hardware_filter_id"`
	AdditionalProperties map[string]interface{}
}

type _MacAddressItemUpload MacAddressItemUpload

// NewMacAddressItemUpload instantiates a new MacAddressItemUpload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMacAddressItemUpload(content string, hardwareFilterId string) *MacAddressItemUpload {
	this := MacAddressItemUpload{}
	this.Content = content
	this.HardwareFilterId = hardwareFilterId
	return &this
}

// NewMacAddressItemUploadWithDefaults instantiates a new MacAddressItemUpload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMacAddressItemUploadWithDefaults() *MacAddressItemUpload {
	this := MacAddressItemUpload{}
	return &this
}

// GetAppend returns the Append field value if set, zero value otherwise.
func (o *MacAddressItemUpload) GetAppend() bool {
	if o == nil || IsNil(o.Append) {
		var ret bool
		return ret
	}
	return *o.Append
}

// GetAppendOk returns a tuple with the Append field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MacAddressItemUpload) GetAppendOk() (*bool, bool) {
	if o == nil || IsNil(o.Append) {
		return nil, false
	}
	return o.Append, true
}

// HasAppend returns a boolean if a field has been set.
func (o *MacAddressItemUpload) HasAppend() bool {
	if o != nil && !IsNil(o.Append) {
		return true
	}

	return false
}

// SetAppend gets a reference to the given bool and assigns it to the Append field.
func (o *MacAddressItemUpload) SetAppend(v bool) {
	o.Append = &v
}

// GetContent returns the Content field value
func (o *MacAddressItemUpload) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *MacAddressItemUpload) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *MacAddressItemUpload) SetContent(v string) {
	o.Content = v
}

// GetHardwareFilterId returns the HardwareFilterId field value
func (o *MacAddressItemUpload) GetHardwareFilterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HardwareFilterId
}

// GetHardwareFilterIdOk returns a tuple with the HardwareFilterId field value
// and a boolean to check if the value has been set.
func (o *MacAddressItemUpload) GetHardwareFilterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HardwareFilterId, true
}

// SetHardwareFilterId sets field value
func (o *MacAddressItemUpload) SetHardwareFilterId(v string) {
	o.HardwareFilterId = v
}

func (o MacAddressItemUpload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MacAddressItemUpload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Append) {
		toSerialize["append"] = o.Append
	}
	toSerialize["content"] = o.Content
	toSerialize["hardware_filter_id"] = o.HardwareFilterId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MacAddressItemUpload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"hardware_filter_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMacAddressItemUpload := _MacAddressItemUpload{}

	err = json.Unmarshal(data, &varMacAddressItemUpload)

	if err != nil {
		return err
	}

	*o = MacAddressItemUpload(varMacAddressItemUpload)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "append")
		delete(additionalProperties, "content")
		delete(additionalProperties, "hardware_filter_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMacAddressItemUpload struct {
	value *MacAddressItemUpload
	isSet bool
}

func (v NullableMacAddressItemUpload) Get() *MacAddressItemUpload {
	return v.value
}

func (v *NullableMacAddressItemUpload) Set(val *MacAddressItemUpload) {
	v.value = val
	v.isSet = true
}

func (v NullableMacAddressItemUpload) IsSet() bool {
	return v.isSet
}

func (v *NullableMacAddressItemUpload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMacAddressItemUpload(val *MacAddressItemUpload) *NullableMacAddressItemUpload {
	return &NullableMacAddressItemUpload{value: val, isSet: true}
}

func (v NullableMacAddressItemUpload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMacAddressItemUpload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
