/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the FixedAddressInheritance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FixedAddressInheritance{}

// FixedAddressInheritance The __FixedAddressInheritance__ object specifies how and which fields _FixedAddress_ object inherits from the parent.
type FixedAddressInheritance struct {
	DhcpOptions               *InheritedDHCPOptionList    `json:"dhcp_options,omitempty"`
	HeaderOptionFilename      *InheritanceInheritedString `json:"header_option_filename,omitempty"`
	HeaderOptionServerAddress *InheritanceInheritedString `json:"header_option_server_address,omitempty"`
	HeaderOptionServerName    *InheritanceInheritedString `json:"header_option_server_name,omitempty"`
}

// NewFixedAddressInheritance instantiates a new FixedAddressInheritance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFixedAddressInheritance() *FixedAddressInheritance {
	this := FixedAddressInheritance{}
	return &this
}

// NewFixedAddressInheritanceWithDefaults instantiates a new FixedAddressInheritance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFixedAddressInheritanceWithDefaults() *FixedAddressInheritance {
	this := FixedAddressInheritance{}
	return &this
}

// GetDhcpOptions returns the DhcpOptions field value if set, zero value otherwise.
func (o *FixedAddressInheritance) GetDhcpOptions() InheritedDHCPOptionList {
	if o == nil || IsNil(o.DhcpOptions) {
		var ret InheritedDHCPOptionList
		return ret
	}
	return *o.DhcpOptions
}

// GetDhcpOptionsOk returns a tuple with the DhcpOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedAddressInheritance) GetDhcpOptionsOk() (*InheritedDHCPOptionList, bool) {
	if o == nil || IsNil(o.DhcpOptions) {
		return nil, false
	}
	return o.DhcpOptions, true
}

// HasDhcpOptions returns a boolean if a field has been set.
func (o *FixedAddressInheritance) HasDhcpOptions() bool {
	if o != nil && !IsNil(o.DhcpOptions) {
		return true
	}

	return false
}

// SetDhcpOptions gets a reference to the given InheritedDHCPOptionList and assigns it to the DhcpOptions field.
func (o *FixedAddressInheritance) SetDhcpOptions(v InheritedDHCPOptionList) {
	o.DhcpOptions = &v
}

// GetHeaderOptionFilename returns the HeaderOptionFilename field value if set, zero value otherwise.
func (o *FixedAddressInheritance) GetHeaderOptionFilename() InheritanceInheritedString {
	if o == nil || IsNil(o.HeaderOptionFilename) {
		var ret InheritanceInheritedString
		return ret
	}
	return *o.HeaderOptionFilename
}

// GetHeaderOptionFilenameOk returns a tuple with the HeaderOptionFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedAddressInheritance) GetHeaderOptionFilenameOk() (*InheritanceInheritedString, bool) {
	if o == nil || IsNil(o.HeaderOptionFilename) {
		return nil, false
	}
	return o.HeaderOptionFilename, true
}

// HasHeaderOptionFilename returns a boolean if a field has been set.
func (o *FixedAddressInheritance) HasHeaderOptionFilename() bool {
	if o != nil && !IsNil(o.HeaderOptionFilename) {
		return true
	}

	return false
}

// SetHeaderOptionFilename gets a reference to the given InheritanceInheritedString and assigns it to the HeaderOptionFilename field.
func (o *FixedAddressInheritance) SetHeaderOptionFilename(v InheritanceInheritedString) {
	o.HeaderOptionFilename = &v
}

// GetHeaderOptionServerAddress returns the HeaderOptionServerAddress field value if set, zero value otherwise.
func (o *FixedAddressInheritance) GetHeaderOptionServerAddress() InheritanceInheritedString {
	if o == nil || IsNil(o.HeaderOptionServerAddress) {
		var ret InheritanceInheritedString
		return ret
	}
	return *o.HeaderOptionServerAddress
}

// GetHeaderOptionServerAddressOk returns a tuple with the HeaderOptionServerAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedAddressInheritance) GetHeaderOptionServerAddressOk() (*InheritanceInheritedString, bool) {
	if o == nil || IsNil(o.HeaderOptionServerAddress) {
		return nil, false
	}
	return o.HeaderOptionServerAddress, true
}

// HasHeaderOptionServerAddress returns a boolean if a field has been set.
func (o *FixedAddressInheritance) HasHeaderOptionServerAddress() bool {
	if o != nil && !IsNil(o.HeaderOptionServerAddress) {
		return true
	}

	return false
}

// SetHeaderOptionServerAddress gets a reference to the given InheritanceInheritedString and assigns it to the HeaderOptionServerAddress field.
func (o *FixedAddressInheritance) SetHeaderOptionServerAddress(v InheritanceInheritedString) {
	o.HeaderOptionServerAddress = &v
}

// GetHeaderOptionServerName returns the HeaderOptionServerName field value if set, zero value otherwise.
func (o *FixedAddressInheritance) GetHeaderOptionServerName() InheritanceInheritedString {
	if o == nil || IsNil(o.HeaderOptionServerName) {
		var ret InheritanceInheritedString
		return ret
	}
	return *o.HeaderOptionServerName
}

// GetHeaderOptionServerNameOk returns a tuple with the HeaderOptionServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedAddressInheritance) GetHeaderOptionServerNameOk() (*InheritanceInheritedString, bool) {
	if o == nil || IsNil(o.HeaderOptionServerName) {
		return nil, false
	}
	return o.HeaderOptionServerName, true
}

// HasHeaderOptionServerName returns a boolean if a field has been set.
func (o *FixedAddressInheritance) HasHeaderOptionServerName() bool {
	if o != nil && !IsNil(o.HeaderOptionServerName) {
		return true
	}

	return false
}

// SetHeaderOptionServerName gets a reference to the given InheritanceInheritedString and assigns it to the HeaderOptionServerName field.
func (o *FixedAddressInheritance) SetHeaderOptionServerName(v InheritanceInheritedString) {
	o.HeaderOptionServerName = &v
}

func (o FixedAddressInheritance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FixedAddressInheritance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DhcpOptions) {
		toSerialize["dhcp_options"] = o.DhcpOptions
	}
	if !IsNil(o.HeaderOptionFilename) {
		toSerialize["header_option_filename"] = o.HeaderOptionFilename
	}
	if !IsNil(o.HeaderOptionServerAddress) {
		toSerialize["header_option_server_address"] = o.HeaderOptionServerAddress
	}
	if !IsNil(o.HeaderOptionServerName) {
		toSerialize["header_option_server_name"] = o.HeaderOptionServerName
	}
	return toSerialize, nil
}

type NullableFixedAddressInheritance struct {
	value *FixedAddressInheritance
	isSet bool
}

func (v NullableFixedAddressInheritance) Get() *FixedAddressInheritance {
	return v.value
}

func (v *NullableFixedAddressInheritance) Set(val *FixedAddressInheritance) {
	v.value = val
	v.isSet = true
}

func (v NullableFixedAddressInheritance) IsSet() bool {
	return v.isSet
}

func (v *NullableFixedAddressInheritance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFixedAddressInheritance(val *FixedAddressInheritance) *NullableFixedAddressInheritance {
	return &NullableFixedAddressInheritance{value: val, isSet: true}
}

func (v NullableFixedAddressInheritance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFixedAddressInheritance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
