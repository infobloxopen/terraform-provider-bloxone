/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the IpamsvcLeasesCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpamsvcLeasesCommand{}

// IpamsvcLeasesCommand The __LeasesCommand__ (_dhcp/leases_command_) is used to perform an action on a lease or a set of leases defined by the list of IP addresses or Subnet or Range. Host(s) owning the lease(s) must be available for this action to succeed. The command is executed asynchronously.
type IpamsvcLeasesCommand struct {
	// The list of IP addresses to execute the \"command\" on. It can be 1 or more IP addresses.
	Address []IpamsvcLeaseAddress `json:"address,omitempty"`
	// The command to perform on the lease(s).  Valid values are:  | command       | description | | :------       | ----------- | | _clear_       | Removes selected lease(s) from the DHCP server(s). This will NOT affect the client that issued the lease. | | _resend-ddns_ | Resends a request to kea-dhcp-ddns to update DNS for selected lease(s). |
	Command string `json:"command"`
	// The list of ranges to execute the \"command\" on. For now it is limited to 1 range.
	Range []IpamsvcLeaseRange `json:"range,omitempty"`
	// The list of subnets to execute the \"command\" on. For now it is limited to 1 subnet.
	Subnet []IpamsvcLeaseSubnet `json:"subnet,omitempty"`
}

// NewIpamsvcLeasesCommand instantiates a new IpamsvcLeasesCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpamsvcLeasesCommand(command string) *IpamsvcLeasesCommand {
	this := IpamsvcLeasesCommand{}
	this.Command = command
	return &this
}

// NewIpamsvcLeasesCommandWithDefaults instantiates a new IpamsvcLeasesCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpamsvcLeasesCommandWithDefaults() *IpamsvcLeasesCommand {
	this := IpamsvcLeasesCommand{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *IpamsvcLeasesCommand) GetAddress() []IpamsvcLeaseAddress {
	if o == nil || IsNil(o.Address) {
		var ret []IpamsvcLeaseAddress
		return ret
	}
	return o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcLeasesCommand) GetAddressOk() ([]IpamsvcLeaseAddress, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *IpamsvcLeasesCommand) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given []IpamsvcLeaseAddress and assigns it to the Address field.
func (o *IpamsvcLeasesCommand) SetAddress(v []IpamsvcLeaseAddress) {
	o.Address = v
}

// GetCommand returns the Command field value
func (o *IpamsvcLeasesCommand) GetCommand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
func (o *IpamsvcLeasesCommand) GetCommandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Command, true
}

// SetCommand sets field value
func (o *IpamsvcLeasesCommand) SetCommand(v string) {
	o.Command = v
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *IpamsvcLeasesCommand) GetRange() []IpamsvcLeaseRange {
	if o == nil || IsNil(o.Range) {
		var ret []IpamsvcLeaseRange
		return ret
	}
	return o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcLeasesCommand) GetRangeOk() ([]IpamsvcLeaseRange, bool) {
	if o == nil || IsNil(o.Range) {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *IpamsvcLeasesCommand) HasRange() bool {
	if o != nil && !IsNil(o.Range) {
		return true
	}

	return false
}

// SetRange gets a reference to the given []IpamsvcLeaseRange and assigns it to the Range field.
func (o *IpamsvcLeasesCommand) SetRange(v []IpamsvcLeaseRange) {
	o.Range = v
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *IpamsvcLeasesCommand) GetSubnet() []IpamsvcLeaseSubnet {
	if o == nil || IsNil(o.Subnet) {
		var ret []IpamsvcLeaseSubnet
		return ret
	}
	return o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcLeasesCommand) GetSubnetOk() ([]IpamsvcLeaseSubnet, bool) {
	if o == nil || IsNil(o.Subnet) {
		return nil, false
	}
	return o.Subnet, true
}

// HasSubnet returns a boolean if a field has been set.
func (o *IpamsvcLeasesCommand) HasSubnet() bool {
	if o != nil && !IsNil(o.Subnet) {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given []IpamsvcLeaseSubnet and assigns it to the Subnet field.
func (o *IpamsvcLeasesCommand) SetSubnet(v []IpamsvcLeaseSubnet) {
	o.Subnet = v
}

func (o IpamsvcLeasesCommand) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpamsvcLeasesCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	toSerialize["command"] = o.Command
	if !IsNil(o.Range) {
		toSerialize["range"] = o.Range
	}
	if !IsNil(o.Subnet) {
		toSerialize["subnet"] = o.Subnet
	}
	return toSerialize, nil
}

type NullableIpamsvcLeasesCommand struct {
	value *IpamsvcLeasesCommand
	isSet bool
}

func (v NullableIpamsvcLeasesCommand) Get() *IpamsvcLeasesCommand {
	return v.value
}

func (v *NullableIpamsvcLeasesCommand) Set(val *IpamsvcLeasesCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamsvcLeasesCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamsvcLeasesCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamsvcLeasesCommand(val *IpamsvcLeasesCommand) *NullableIpamsvcLeasesCommand {
	return &NullableIpamsvcLeasesCommand{value: val, isSet: true}
}

func (v NullableIpamsvcLeasesCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamsvcLeasesCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
