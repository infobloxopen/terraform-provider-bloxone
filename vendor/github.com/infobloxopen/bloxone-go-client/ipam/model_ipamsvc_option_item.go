/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the IpamsvcOptionItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpamsvcOptionItem{}

// IpamsvcOptionItem An item (_dhcp/option_item_) in a list of DHCP options. May be either a specific option or a group of options.
type IpamsvcOptionItem struct {
	// The resource identifier.
	Group *string `json:"group,omitempty"`
	// The resource identifier.
	OptionCode *string `json:"option_code,omitempty"`
	// The option value.
	OptionValue *string `json:"option_value,omitempty"`
	// The type of item.  Valid values are: * _group_ * _option_
	Type *string `json:"type,omitempty"`
}

// NewIpamsvcOptionItem instantiates a new IpamsvcOptionItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpamsvcOptionItem() *IpamsvcOptionItem {
	this := IpamsvcOptionItem{}
	return &this
}

// NewIpamsvcOptionItemWithDefaults instantiates a new IpamsvcOptionItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpamsvcOptionItemWithDefaults() *IpamsvcOptionItem {
	this := IpamsvcOptionItem{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *IpamsvcOptionItem) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcOptionItem) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *IpamsvcOptionItem) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *IpamsvcOptionItem) SetGroup(v string) {
	o.Group = &v
}

// GetOptionCode returns the OptionCode field value if set, zero value otherwise.
func (o *IpamsvcOptionItem) GetOptionCode() string {
	if o == nil || IsNil(o.OptionCode) {
		var ret string
		return ret
	}
	return *o.OptionCode
}

// GetOptionCodeOk returns a tuple with the OptionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcOptionItem) GetOptionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.OptionCode) {
		return nil, false
	}
	return o.OptionCode, true
}

// HasOptionCode returns a boolean if a field has been set.
func (o *IpamsvcOptionItem) HasOptionCode() bool {
	if o != nil && !IsNil(o.OptionCode) {
		return true
	}

	return false
}

// SetOptionCode gets a reference to the given string and assigns it to the OptionCode field.
func (o *IpamsvcOptionItem) SetOptionCode(v string) {
	o.OptionCode = &v
}

// GetOptionValue returns the OptionValue field value if set, zero value otherwise.
func (o *IpamsvcOptionItem) GetOptionValue() string {
	if o == nil || IsNil(o.OptionValue) {
		var ret string
		return ret
	}
	return *o.OptionValue
}

// GetOptionValueOk returns a tuple with the OptionValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcOptionItem) GetOptionValueOk() (*string, bool) {
	if o == nil || IsNil(o.OptionValue) {
		return nil, false
	}
	return o.OptionValue, true
}

// HasOptionValue returns a boolean if a field has been set.
func (o *IpamsvcOptionItem) HasOptionValue() bool {
	if o != nil && !IsNil(o.OptionValue) {
		return true
	}

	return false
}

// SetOptionValue gets a reference to the given string and assigns it to the OptionValue field.
func (o *IpamsvcOptionItem) SetOptionValue(v string) {
	o.OptionValue = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IpamsvcOptionItem) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcOptionItem) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IpamsvcOptionItem) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IpamsvcOptionItem) SetType(v string) {
	o.Type = &v
}

func (o IpamsvcOptionItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpamsvcOptionItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.OptionCode) {
		toSerialize["option_code"] = o.OptionCode
	}
	if !IsNil(o.OptionValue) {
		toSerialize["option_value"] = o.OptionValue
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableIpamsvcOptionItem struct {
	value *IpamsvcOptionItem
	isSet bool
}

func (v NullableIpamsvcOptionItem) Get() *IpamsvcOptionItem {
	return v.value
}

func (v *NullableIpamsvcOptionItem) Set(val *IpamsvcOptionItem) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamsvcOptionItem) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamsvcOptionItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamsvcOptionItem(val *IpamsvcOptionItem) *NullableIpamsvcOptionItem {
	return &NullableIpamsvcOptionItem{value: val, isSet: true}
}

func (v NullableIpamsvcOptionItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamsvcOptionItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
