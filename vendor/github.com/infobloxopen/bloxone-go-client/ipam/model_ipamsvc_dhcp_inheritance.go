/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the IpamsvcDHCPInheritance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpamsvcDHCPInheritance{}

// IpamsvcDHCPInheritance The __DHCPInheritance__ object specifies how the _dhcp_config_, _dhcp_options_ and _asm_config_ configuration fields are inherited from the parent object.
type IpamsvcDHCPInheritance struct {
	AsmConfig                  *IpamsvcInheritedASMConfig            `json:"asm_config,omitempty"`
	DdnsClientUpdate           *InheritanceInheritedString           `json:"ddns_client_update,omitempty"`
	DdnsConflictResolutionMode *InheritanceInheritedString           `json:"ddns_conflict_resolution_mode,omitempty"`
	DdnsEnabled                *InheritanceInheritedBool             `json:"ddns_enabled,omitempty"`
	DdnsHostnameBlock          *IpamsvcInheritedDDNSHostnameBlock    `json:"ddns_hostname_block,omitempty"`
	DdnsTtlPercent             *InheritanceInheritedFloat            `json:"ddns_ttl_percent,omitempty"`
	DdnsUpdateBlock            *IpamsvcInheritedDDNSUpdateBlock      `json:"ddns_update_block,omitempty"`
	DdnsUpdateOnRenew          *InheritanceInheritedBool             `json:"ddns_update_on_renew,omitempty"`
	DdnsUseConflictResolution  *InheritanceInheritedBool             `json:"ddns_use_conflict_resolution,omitempty"`
	DhcpConfig                 *IpamsvcInheritedDHCPConfig           `json:"dhcp_config,omitempty"`
	DhcpOptions                *IpamsvcInheritedDHCPOptionList       `json:"dhcp_options,omitempty"`
	HeaderOptionFilename       *InheritanceInheritedString           `json:"header_option_filename,omitempty"`
	HeaderOptionServerAddress  *InheritanceInheritedString           `json:"header_option_server_address,omitempty"`
	HeaderOptionServerName     *InheritanceInheritedString           `json:"header_option_server_name,omitempty"`
	HostnameRewriteBlock       *IpamsvcInheritedHostnameRewriteBlock `json:"hostname_rewrite_block,omitempty"`
}

// NewIpamsvcDHCPInheritance instantiates a new IpamsvcDHCPInheritance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpamsvcDHCPInheritance() *IpamsvcDHCPInheritance {
	this := IpamsvcDHCPInheritance{}
	return &this
}

// NewIpamsvcDHCPInheritanceWithDefaults instantiates a new IpamsvcDHCPInheritance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpamsvcDHCPInheritanceWithDefaults() *IpamsvcDHCPInheritance {
	this := IpamsvcDHCPInheritance{}
	return &this
}

// GetAsmConfig returns the AsmConfig field value if set, zero value otherwise.
func (o *IpamsvcDHCPInheritance) GetAsmConfig() IpamsvcInheritedASMConfig {
	if o == nil || IsNil(o.AsmConfig) {
		var ret IpamsvcInheritedASMConfig
		return ret
	}
	return *o.AsmConfig
}

// GetAsmConfigOk returns a tuple with the AsmConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPInheritance) GetAsmConfigOk() (*IpamsvcInheritedASMConfig, bool) {
	if o == nil || IsNil(o.AsmConfig) {
		return nil, false
	}
	return o.AsmConfig, true
}

// HasAsmConfig returns a boolean if a field has been set.
func (o *IpamsvcDHCPInheritance) HasAsmConfig() bool {
	if o != nil && !IsNil(o.AsmConfig) {
		return true
	}

	return false
}

// SetAsmConfig gets a reference to the given IpamsvcInheritedASMConfig and assigns it to the AsmConfig field.
func (o *IpamsvcDHCPInheritance) SetAsmConfig(v IpamsvcInheritedASMConfig) {
	o.AsmConfig = &v
}

// GetDdnsClientUpdate returns the DdnsClientUpdate field value if set, zero value otherwise.
func (o *IpamsvcDHCPInheritance) GetDdnsClientUpdate() InheritanceInheritedString {
	if o == nil || IsNil(o.DdnsClientUpdate) {
		var ret InheritanceInheritedString
		return ret
	}
	return *o.DdnsClientUpdate
}

// GetDdnsClientUpdateOk returns a tuple with the DdnsClientUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPInheritance) GetDdnsClientUpdateOk() (*InheritanceInheritedString, bool) {
	if o == nil || IsNil(o.DdnsClientUpdate) {
		return nil, false
	}
	return o.DdnsClientUpdate, true
}

// HasDdnsClientUpdate returns a boolean if a field has been set.
func (o *IpamsvcDHCPInheritance) HasDdnsClientUpdate() bool {
	if o != nil && !IsNil(o.DdnsClientUpdate) {
		return true
	}

	return false
}

// SetDdnsClientUpdate gets a reference to the given InheritanceInheritedString and assigns it to the DdnsClientUpdate field.
func (o *IpamsvcDHCPInheritance) SetDdnsClientUpdate(v InheritanceInheritedString) {
	o.DdnsClientUpdate = &v
}

// GetDdnsConflictResolutionMode returns the DdnsConflictResolutionMode field value if set, zero value otherwise.
func (o *IpamsvcDHCPInheritance) GetDdnsConflictResolutionMode() InheritanceInheritedString {
	if o == nil || IsNil(o.DdnsConflictResolutionMode) {
		var ret InheritanceInheritedString
		return ret
	}
	return *o.DdnsConflictResolutionMode
}

// GetDdnsConflictResolutionModeOk returns a tuple with the DdnsConflictResolutionMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPInheritance) GetDdnsConflictResolutionModeOk() (*InheritanceInheritedString, bool) {
	if o == nil || IsNil(o.DdnsConflictResolutionMode) {
		return nil, false
	}
	return o.DdnsConflictResolutionMode, true
}

// HasDdnsConflictResolutionMode returns a boolean if a field has been set.
func (o *IpamsvcDHCPInheritance) HasDdnsConflictResolutionMode() bool {
	if o != nil && !IsNil(o.DdnsConflictResolutionMode) {
		return true
	}

	return false
}

// SetDdnsConflictResolutionMode gets a reference to the given InheritanceInheritedString and assigns it to the DdnsConflictResolutionMode field.
func (o *IpamsvcDHCPInheritance) SetDdnsConflictResolutionMode(v InheritanceInheritedString) {
	o.DdnsConflictResolutionMode = &v
}

// GetDdnsEnabled returns the DdnsEnabled field value if set, zero value otherwise.
func (o *IpamsvcDHCPInheritance) GetDdnsEnabled() InheritanceInheritedBool {
	if o == nil || IsNil(o.DdnsEnabled) {
		var ret InheritanceInheritedBool
		return ret
	}
	return *o.DdnsEnabled
}

// GetDdnsEnabledOk returns a tuple with the DdnsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPInheritance) GetDdnsEnabledOk() (*InheritanceInheritedBool, bool) {
	if o == nil || IsNil(o.DdnsEnabled) {
		return nil, false
	}
	return o.DdnsEnabled, true
}

// HasDdnsEnabled returns a boolean if a field has been set.
func (o *IpamsvcDHCPInheritance) HasDdnsEnabled() bool {
	if o != nil && !IsNil(o.DdnsEnabled) {
		return true
	}

	return false
}

// SetDdnsEnabled gets a reference to the given InheritanceInheritedBool and assigns it to the DdnsEnabled field.
func (o *IpamsvcDHCPInheritance) SetDdnsEnabled(v InheritanceInheritedBool) {
	o.DdnsEnabled = &v
}

// GetDdnsHostnameBlock returns the DdnsHostnameBlock field value if set, zero value otherwise.
func (o *IpamsvcDHCPInheritance) GetDdnsHostnameBlock() IpamsvcInheritedDDNSHostnameBlock {
	if o == nil || IsNil(o.DdnsHostnameBlock) {
		var ret IpamsvcInheritedDDNSHostnameBlock
		return ret
	}
	return *o.DdnsHostnameBlock
}

// GetDdnsHostnameBlockOk returns a tuple with the DdnsHostnameBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPInheritance) GetDdnsHostnameBlockOk() (*IpamsvcInheritedDDNSHostnameBlock, bool) {
	if o == nil || IsNil(o.DdnsHostnameBlock) {
		return nil, false
	}
	return o.DdnsHostnameBlock, true
}

// HasDdnsHostnameBlock returns a boolean if a field has been set.
func (o *IpamsvcDHCPInheritance) HasDdnsHostnameBlock() bool {
	if o != nil && !IsNil(o.DdnsHostnameBlock) {
		return true
	}

	return false
}

// SetDdnsHostnameBlock gets a reference to the given IpamsvcInheritedDDNSHostnameBlock and assigns it to the DdnsHostnameBlock field.
func (o *IpamsvcDHCPInheritance) SetDdnsHostnameBlock(v IpamsvcInheritedDDNSHostnameBlock) {
	o.DdnsHostnameBlock = &v
}

// GetDdnsTtlPercent returns the DdnsTtlPercent field value if set, zero value otherwise.
func (o *IpamsvcDHCPInheritance) GetDdnsTtlPercent() InheritanceInheritedFloat {
	if o == nil || IsNil(o.DdnsTtlPercent) {
		var ret InheritanceInheritedFloat
		return ret
	}
	return *o.DdnsTtlPercent
}

// GetDdnsTtlPercentOk returns a tuple with the DdnsTtlPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPInheritance) GetDdnsTtlPercentOk() (*InheritanceInheritedFloat, bool) {
	if o == nil || IsNil(o.DdnsTtlPercent) {
		return nil, false
	}
	return o.DdnsTtlPercent, true
}

// HasDdnsTtlPercent returns a boolean if a field has been set.
func (o *IpamsvcDHCPInheritance) HasDdnsTtlPercent() bool {
	if o != nil && !IsNil(o.DdnsTtlPercent) {
		return true
	}

	return false
}

// SetDdnsTtlPercent gets a reference to the given InheritanceInheritedFloat and assigns it to the DdnsTtlPercent field.
func (o *IpamsvcDHCPInheritance) SetDdnsTtlPercent(v InheritanceInheritedFloat) {
	o.DdnsTtlPercent = &v
}

// GetDdnsUpdateBlock returns the DdnsUpdateBlock field value if set, zero value otherwise.
func (o *IpamsvcDHCPInheritance) GetDdnsUpdateBlock() IpamsvcInheritedDDNSUpdateBlock {
	if o == nil || IsNil(o.DdnsUpdateBlock) {
		var ret IpamsvcInheritedDDNSUpdateBlock
		return ret
	}
	return *o.DdnsUpdateBlock
}

// GetDdnsUpdateBlockOk returns a tuple with the DdnsUpdateBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPInheritance) GetDdnsUpdateBlockOk() (*IpamsvcInheritedDDNSUpdateBlock, bool) {
	if o == nil || IsNil(o.DdnsUpdateBlock) {
		return nil, false
	}
	return o.DdnsUpdateBlock, true
}

// HasDdnsUpdateBlock returns a boolean if a field has been set.
func (o *IpamsvcDHCPInheritance) HasDdnsUpdateBlock() bool {
	if o != nil && !IsNil(o.DdnsUpdateBlock) {
		return true
	}

	return false
}

// SetDdnsUpdateBlock gets a reference to the given IpamsvcInheritedDDNSUpdateBlock and assigns it to the DdnsUpdateBlock field.
func (o *IpamsvcDHCPInheritance) SetDdnsUpdateBlock(v IpamsvcInheritedDDNSUpdateBlock) {
	o.DdnsUpdateBlock = &v
}

// GetDdnsUpdateOnRenew returns the DdnsUpdateOnRenew field value if set, zero value otherwise.
func (o *IpamsvcDHCPInheritance) GetDdnsUpdateOnRenew() InheritanceInheritedBool {
	if o == nil || IsNil(o.DdnsUpdateOnRenew) {
		var ret InheritanceInheritedBool
		return ret
	}
	return *o.DdnsUpdateOnRenew
}

// GetDdnsUpdateOnRenewOk returns a tuple with the DdnsUpdateOnRenew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPInheritance) GetDdnsUpdateOnRenewOk() (*InheritanceInheritedBool, bool) {
	if o == nil || IsNil(o.DdnsUpdateOnRenew) {
		return nil, false
	}
	return o.DdnsUpdateOnRenew, true
}

// HasDdnsUpdateOnRenew returns a boolean if a field has been set.
func (o *IpamsvcDHCPInheritance) HasDdnsUpdateOnRenew() bool {
	if o != nil && !IsNil(o.DdnsUpdateOnRenew) {
		return true
	}

	return false
}

// SetDdnsUpdateOnRenew gets a reference to the given InheritanceInheritedBool and assigns it to the DdnsUpdateOnRenew field.
func (o *IpamsvcDHCPInheritance) SetDdnsUpdateOnRenew(v InheritanceInheritedBool) {
	o.DdnsUpdateOnRenew = &v
}

// GetDdnsUseConflictResolution returns the DdnsUseConflictResolution field value if set, zero value otherwise.
func (o *IpamsvcDHCPInheritance) GetDdnsUseConflictResolution() InheritanceInheritedBool {
	if o == nil || IsNil(o.DdnsUseConflictResolution) {
		var ret InheritanceInheritedBool
		return ret
	}
	return *o.DdnsUseConflictResolution
}

// GetDdnsUseConflictResolutionOk returns a tuple with the DdnsUseConflictResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPInheritance) GetDdnsUseConflictResolutionOk() (*InheritanceInheritedBool, bool) {
	if o == nil || IsNil(o.DdnsUseConflictResolution) {
		return nil, false
	}
	return o.DdnsUseConflictResolution, true
}

// HasDdnsUseConflictResolution returns a boolean if a field has been set.
func (o *IpamsvcDHCPInheritance) HasDdnsUseConflictResolution() bool {
	if o != nil && !IsNil(o.DdnsUseConflictResolution) {
		return true
	}

	return false
}

// SetDdnsUseConflictResolution gets a reference to the given InheritanceInheritedBool and assigns it to the DdnsUseConflictResolution field.
func (o *IpamsvcDHCPInheritance) SetDdnsUseConflictResolution(v InheritanceInheritedBool) {
	o.DdnsUseConflictResolution = &v
}

// GetDhcpConfig returns the DhcpConfig field value if set, zero value otherwise.
func (o *IpamsvcDHCPInheritance) GetDhcpConfig() IpamsvcInheritedDHCPConfig {
	if o == nil || IsNil(o.DhcpConfig) {
		var ret IpamsvcInheritedDHCPConfig
		return ret
	}
	return *o.DhcpConfig
}

// GetDhcpConfigOk returns a tuple with the DhcpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPInheritance) GetDhcpConfigOk() (*IpamsvcInheritedDHCPConfig, bool) {
	if o == nil || IsNil(o.DhcpConfig) {
		return nil, false
	}
	return o.DhcpConfig, true
}

// HasDhcpConfig returns a boolean if a field has been set.
func (o *IpamsvcDHCPInheritance) HasDhcpConfig() bool {
	if o != nil && !IsNil(o.DhcpConfig) {
		return true
	}

	return false
}

// SetDhcpConfig gets a reference to the given IpamsvcInheritedDHCPConfig and assigns it to the DhcpConfig field.
func (o *IpamsvcDHCPInheritance) SetDhcpConfig(v IpamsvcInheritedDHCPConfig) {
	o.DhcpConfig = &v
}

// GetDhcpOptions returns the DhcpOptions field value if set, zero value otherwise.
func (o *IpamsvcDHCPInheritance) GetDhcpOptions() IpamsvcInheritedDHCPOptionList {
	if o == nil || IsNil(o.DhcpOptions) {
		var ret IpamsvcInheritedDHCPOptionList
		return ret
	}
	return *o.DhcpOptions
}

// GetDhcpOptionsOk returns a tuple with the DhcpOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPInheritance) GetDhcpOptionsOk() (*IpamsvcInheritedDHCPOptionList, bool) {
	if o == nil || IsNil(o.DhcpOptions) {
		return nil, false
	}
	return o.DhcpOptions, true
}

// HasDhcpOptions returns a boolean if a field has been set.
func (o *IpamsvcDHCPInheritance) HasDhcpOptions() bool {
	if o != nil && !IsNil(o.DhcpOptions) {
		return true
	}

	return false
}

// SetDhcpOptions gets a reference to the given IpamsvcInheritedDHCPOptionList and assigns it to the DhcpOptions field.
func (o *IpamsvcDHCPInheritance) SetDhcpOptions(v IpamsvcInheritedDHCPOptionList) {
	o.DhcpOptions = &v
}

// GetHeaderOptionFilename returns the HeaderOptionFilename field value if set, zero value otherwise.
func (o *IpamsvcDHCPInheritance) GetHeaderOptionFilename() InheritanceInheritedString {
	if o == nil || IsNil(o.HeaderOptionFilename) {
		var ret InheritanceInheritedString
		return ret
	}
	return *o.HeaderOptionFilename
}

// GetHeaderOptionFilenameOk returns a tuple with the HeaderOptionFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPInheritance) GetHeaderOptionFilenameOk() (*InheritanceInheritedString, bool) {
	if o == nil || IsNil(o.HeaderOptionFilename) {
		return nil, false
	}
	return o.HeaderOptionFilename, true
}

// HasHeaderOptionFilename returns a boolean if a field has been set.
func (o *IpamsvcDHCPInheritance) HasHeaderOptionFilename() bool {
	if o != nil && !IsNil(o.HeaderOptionFilename) {
		return true
	}

	return false
}

// SetHeaderOptionFilename gets a reference to the given InheritanceInheritedString and assigns it to the HeaderOptionFilename field.
func (o *IpamsvcDHCPInheritance) SetHeaderOptionFilename(v InheritanceInheritedString) {
	o.HeaderOptionFilename = &v
}

// GetHeaderOptionServerAddress returns the HeaderOptionServerAddress field value if set, zero value otherwise.
func (o *IpamsvcDHCPInheritance) GetHeaderOptionServerAddress() InheritanceInheritedString {
	if o == nil || IsNil(o.HeaderOptionServerAddress) {
		var ret InheritanceInheritedString
		return ret
	}
	return *o.HeaderOptionServerAddress
}

// GetHeaderOptionServerAddressOk returns a tuple with the HeaderOptionServerAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPInheritance) GetHeaderOptionServerAddressOk() (*InheritanceInheritedString, bool) {
	if o == nil || IsNil(o.HeaderOptionServerAddress) {
		return nil, false
	}
	return o.HeaderOptionServerAddress, true
}

// HasHeaderOptionServerAddress returns a boolean if a field has been set.
func (o *IpamsvcDHCPInheritance) HasHeaderOptionServerAddress() bool {
	if o != nil && !IsNil(o.HeaderOptionServerAddress) {
		return true
	}

	return false
}

// SetHeaderOptionServerAddress gets a reference to the given InheritanceInheritedString and assigns it to the HeaderOptionServerAddress field.
func (o *IpamsvcDHCPInheritance) SetHeaderOptionServerAddress(v InheritanceInheritedString) {
	o.HeaderOptionServerAddress = &v
}

// GetHeaderOptionServerName returns the HeaderOptionServerName field value if set, zero value otherwise.
func (o *IpamsvcDHCPInheritance) GetHeaderOptionServerName() InheritanceInheritedString {
	if o == nil || IsNil(o.HeaderOptionServerName) {
		var ret InheritanceInheritedString
		return ret
	}
	return *o.HeaderOptionServerName
}

// GetHeaderOptionServerNameOk returns a tuple with the HeaderOptionServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPInheritance) GetHeaderOptionServerNameOk() (*InheritanceInheritedString, bool) {
	if o == nil || IsNil(o.HeaderOptionServerName) {
		return nil, false
	}
	return o.HeaderOptionServerName, true
}

// HasHeaderOptionServerName returns a boolean if a field has been set.
func (o *IpamsvcDHCPInheritance) HasHeaderOptionServerName() bool {
	if o != nil && !IsNil(o.HeaderOptionServerName) {
		return true
	}

	return false
}

// SetHeaderOptionServerName gets a reference to the given InheritanceInheritedString and assigns it to the HeaderOptionServerName field.
func (o *IpamsvcDHCPInheritance) SetHeaderOptionServerName(v InheritanceInheritedString) {
	o.HeaderOptionServerName = &v
}

// GetHostnameRewriteBlock returns the HostnameRewriteBlock field value if set, zero value otherwise.
func (o *IpamsvcDHCPInheritance) GetHostnameRewriteBlock() IpamsvcInheritedHostnameRewriteBlock {
	if o == nil || IsNil(o.HostnameRewriteBlock) {
		var ret IpamsvcInheritedHostnameRewriteBlock
		return ret
	}
	return *o.HostnameRewriteBlock
}

// GetHostnameRewriteBlockOk returns a tuple with the HostnameRewriteBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcDHCPInheritance) GetHostnameRewriteBlockOk() (*IpamsvcInheritedHostnameRewriteBlock, bool) {
	if o == nil || IsNil(o.HostnameRewriteBlock) {
		return nil, false
	}
	return o.HostnameRewriteBlock, true
}

// HasHostnameRewriteBlock returns a boolean if a field has been set.
func (o *IpamsvcDHCPInheritance) HasHostnameRewriteBlock() bool {
	if o != nil && !IsNil(o.HostnameRewriteBlock) {
		return true
	}

	return false
}

// SetHostnameRewriteBlock gets a reference to the given IpamsvcInheritedHostnameRewriteBlock and assigns it to the HostnameRewriteBlock field.
func (o *IpamsvcDHCPInheritance) SetHostnameRewriteBlock(v IpamsvcInheritedHostnameRewriteBlock) {
	o.HostnameRewriteBlock = &v
}

func (o IpamsvcDHCPInheritance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpamsvcDHCPInheritance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AsmConfig) {
		toSerialize["asm_config"] = o.AsmConfig
	}
	if !IsNil(o.DdnsClientUpdate) {
		toSerialize["ddns_client_update"] = o.DdnsClientUpdate
	}
	if !IsNil(o.DdnsConflictResolutionMode) {
		toSerialize["ddns_conflict_resolution_mode"] = o.DdnsConflictResolutionMode
	}
	if !IsNil(o.DdnsEnabled) {
		toSerialize["ddns_enabled"] = o.DdnsEnabled
	}
	if !IsNil(o.DdnsHostnameBlock) {
		toSerialize["ddns_hostname_block"] = o.DdnsHostnameBlock
	}
	if !IsNil(o.DdnsTtlPercent) {
		toSerialize["ddns_ttl_percent"] = o.DdnsTtlPercent
	}
	if !IsNil(o.DdnsUpdateBlock) {
		toSerialize["ddns_update_block"] = o.DdnsUpdateBlock
	}
	if !IsNil(o.DdnsUpdateOnRenew) {
		toSerialize["ddns_update_on_renew"] = o.DdnsUpdateOnRenew
	}
	if !IsNil(o.DdnsUseConflictResolution) {
		toSerialize["ddns_use_conflict_resolution"] = o.DdnsUseConflictResolution
	}
	if !IsNil(o.DhcpConfig) {
		toSerialize["dhcp_config"] = o.DhcpConfig
	}
	if !IsNil(o.DhcpOptions) {
		toSerialize["dhcp_options"] = o.DhcpOptions
	}
	if !IsNil(o.HeaderOptionFilename) {
		toSerialize["header_option_filename"] = o.HeaderOptionFilename
	}
	if !IsNil(o.HeaderOptionServerAddress) {
		toSerialize["header_option_server_address"] = o.HeaderOptionServerAddress
	}
	if !IsNil(o.HeaderOptionServerName) {
		toSerialize["header_option_server_name"] = o.HeaderOptionServerName
	}
	if !IsNil(o.HostnameRewriteBlock) {
		toSerialize["hostname_rewrite_block"] = o.HostnameRewriteBlock
	}
	return toSerialize, nil
}

type NullableIpamsvcDHCPInheritance struct {
	value *IpamsvcDHCPInheritance
	isSet bool
}

func (v NullableIpamsvcDHCPInheritance) Get() *IpamsvcDHCPInheritance {
	return v.value
}

func (v *NullableIpamsvcDHCPInheritance) Set(val *IpamsvcDHCPInheritance) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamsvcDHCPInheritance) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamsvcDHCPInheritance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamsvcDHCPInheritance(val *IpamsvcDHCPInheritance) *NullableIpamsvcDHCPInheritance {
	return &NullableIpamsvcDHCPInheritance{value: val, isSet: true}
}

func (v NullableIpamsvcDHCPInheritance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamsvcDHCPInheritance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
