/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// checks if the IgnoreItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IgnoreItem{}

// IgnoreItem An Ignore Item object (_dhcp/ignore_item_) represents an item in a DHCP ignore list.
type IgnoreItem struct {
	// Type of ignore matching: client to ignore by client identifier (client hex or client text) or hardware to ignore by hardware identifier (MAC address). It can have one of the following values:  * _client_hex_,  * _client_text_,  * _hardware_.
	Type string `json:"type"`
	// Value to match.
	Value                string `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _IgnoreItem IgnoreItem

// NewIgnoreItem instantiates a new IgnoreItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIgnoreItem(type_ string, value string) *IgnoreItem {
	this := IgnoreItem{}
	this.Type = type_
	this.Value = value
	return &this
}

// NewIgnoreItemWithDefaults instantiates a new IgnoreItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIgnoreItemWithDefaults() *IgnoreItem {
	this := IgnoreItem{}
	return &this
}

// GetType returns the Type field value
func (o *IgnoreItem) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IgnoreItem) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IgnoreItem) SetType(v string) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *IgnoreItem) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *IgnoreItem) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *IgnoreItem) SetValue(v string) {
	o.Value = v
}

func (o IgnoreItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IgnoreItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IgnoreItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIgnoreItem := _IgnoreItem{}

	err = json.Unmarshal(data, &varIgnoreItem)

	if err != nil {
		return err
	}

	*o = IgnoreItem(varIgnoreItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIgnoreItem struct {
	value *IgnoreItem
	isSet bool
}

func (v NullableIgnoreItem) Get() *IgnoreItem {
	return v.value
}

func (v *NullableIgnoreItem) Set(val *IgnoreItem) {
	v.value = val
	v.isSet = true
}

func (v NullableIgnoreItem) IsSet() bool {
	return v.isSet
}

func (v *NullableIgnoreItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIgnoreItem(val *IgnoreItem) *NullableIgnoreItem {
	return &NullableIgnoreItem{value: val, isSet: true}
}

func (v NullableIgnoreItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIgnoreItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
