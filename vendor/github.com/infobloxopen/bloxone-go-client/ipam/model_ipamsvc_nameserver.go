/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the IpamsvcNameserver type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpamsvcNameserver{}

// IpamsvcNameserver struct for IpamsvcNameserver
type IpamsvcNameserver struct {
	// The Kerberos principal name. It uses the typical Kerberos notation: <SERVICE-NAME>/<server-domain-name>@<REALM>.  Defaults to empty.
	ClientPrincipal *string `json:"client_principal,omitempty"`
	// The behavior when GSS-TSIG should be used (a matching external DNS server is configured) but no GSS-TSIG key is available. If configured to _false_ (the default) this DNS server is skipped, if configured to _true_ the DNS server is ignored and the DNS update is sent with the configured DHCP-DDNS protection e.g. TSIG key or without any protection when none was configured.  Defaults to _false_.
	GssTsigFallback *bool `json:"gss_tsig_fallback,omitempty"`
	// Time interval (in seconds) the keys for each configured external DNS server are checked for rekeying, i.e. a new key is created to replace the current usable one when its age is greater than the _kerberos_rekey_interval_ value.  Defaults to 120 seconds.
	KerberosRekeyInterval *int64 `json:"kerberos_rekey_interval,omitempty"`
	// Time interval (in seconds) to retry to create a key if any error occurred previously for any configured external DNS server.  Defaults to 30 seconds.
	KerberosRetryInterval *int64 `json:"kerberos_retry_interval,omitempty"`
	// Lifetime (in seconds) of GSS-TSIG keys in the TKEY protocol.  Defaults to 160 seconds.
	KerberosTkeyLifetime *int64 `json:"kerberos_tkey_lifetime,omitempty"`
	// Determines which protocol is used to establish the security context with the external DNS servers, TCP or UDP.  Defaults to _tcp_.
	KerberosTkeyProtocol *string `json:"kerberos_tkey_protocol,omitempty"`
	Nameserver           *string `json:"nameserver,omitempty"`
	// The Kerberos principal name of this DNS server that will receive updates.  Defaults to empty.
	ServerPrincipal *string `json:"server_principal,omitempty"`
}

// NewIpamsvcNameserver instantiates a new IpamsvcNameserver object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpamsvcNameserver() *IpamsvcNameserver {
	this := IpamsvcNameserver{}
	return &this
}

// NewIpamsvcNameserverWithDefaults instantiates a new IpamsvcNameserver object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpamsvcNameserverWithDefaults() *IpamsvcNameserver {
	this := IpamsvcNameserver{}
	return &this
}

// GetClientPrincipal returns the ClientPrincipal field value if set, zero value otherwise.
func (o *IpamsvcNameserver) GetClientPrincipal() string {
	if o == nil || IsNil(o.ClientPrincipal) {
		var ret string
		return ret
	}
	return *o.ClientPrincipal
}

// GetClientPrincipalOk returns a tuple with the ClientPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcNameserver) GetClientPrincipalOk() (*string, bool) {
	if o == nil || IsNil(o.ClientPrincipal) {
		return nil, false
	}
	return o.ClientPrincipal, true
}

// HasClientPrincipal returns a boolean if a field has been set.
func (o *IpamsvcNameserver) HasClientPrincipal() bool {
	if o != nil && !IsNil(o.ClientPrincipal) {
		return true
	}

	return false
}

// SetClientPrincipal gets a reference to the given string and assigns it to the ClientPrincipal field.
func (o *IpamsvcNameserver) SetClientPrincipal(v string) {
	o.ClientPrincipal = &v
}

// GetGssTsigFallback returns the GssTsigFallback field value if set, zero value otherwise.
func (o *IpamsvcNameserver) GetGssTsigFallback() bool {
	if o == nil || IsNil(o.GssTsigFallback) {
		var ret bool
		return ret
	}
	return *o.GssTsigFallback
}

// GetGssTsigFallbackOk returns a tuple with the GssTsigFallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcNameserver) GetGssTsigFallbackOk() (*bool, bool) {
	if o == nil || IsNil(o.GssTsigFallback) {
		return nil, false
	}
	return o.GssTsigFallback, true
}

// HasGssTsigFallback returns a boolean if a field has been set.
func (o *IpamsvcNameserver) HasGssTsigFallback() bool {
	if o != nil && !IsNil(o.GssTsigFallback) {
		return true
	}

	return false
}

// SetGssTsigFallback gets a reference to the given bool and assigns it to the GssTsigFallback field.
func (o *IpamsvcNameserver) SetGssTsigFallback(v bool) {
	o.GssTsigFallback = &v
}

// GetKerberosRekeyInterval returns the KerberosRekeyInterval field value if set, zero value otherwise.
func (o *IpamsvcNameserver) GetKerberosRekeyInterval() int64 {
	if o == nil || IsNil(o.KerberosRekeyInterval) {
		var ret int64
		return ret
	}
	return *o.KerberosRekeyInterval
}

// GetKerberosRekeyIntervalOk returns a tuple with the KerberosRekeyInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcNameserver) GetKerberosRekeyIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.KerberosRekeyInterval) {
		return nil, false
	}
	return o.KerberosRekeyInterval, true
}

// HasKerberosRekeyInterval returns a boolean if a field has been set.
func (o *IpamsvcNameserver) HasKerberosRekeyInterval() bool {
	if o != nil && !IsNil(o.KerberosRekeyInterval) {
		return true
	}

	return false
}

// SetKerberosRekeyInterval gets a reference to the given int64 and assigns it to the KerberosRekeyInterval field.
func (o *IpamsvcNameserver) SetKerberosRekeyInterval(v int64) {
	o.KerberosRekeyInterval = &v
}

// GetKerberosRetryInterval returns the KerberosRetryInterval field value if set, zero value otherwise.
func (o *IpamsvcNameserver) GetKerberosRetryInterval() int64 {
	if o == nil || IsNil(o.KerberosRetryInterval) {
		var ret int64
		return ret
	}
	return *o.KerberosRetryInterval
}

// GetKerberosRetryIntervalOk returns a tuple with the KerberosRetryInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcNameserver) GetKerberosRetryIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.KerberosRetryInterval) {
		return nil, false
	}
	return o.KerberosRetryInterval, true
}

// HasKerberosRetryInterval returns a boolean if a field has been set.
func (o *IpamsvcNameserver) HasKerberosRetryInterval() bool {
	if o != nil && !IsNil(o.KerberosRetryInterval) {
		return true
	}

	return false
}

// SetKerberosRetryInterval gets a reference to the given int64 and assigns it to the KerberosRetryInterval field.
func (o *IpamsvcNameserver) SetKerberosRetryInterval(v int64) {
	o.KerberosRetryInterval = &v
}

// GetKerberosTkeyLifetime returns the KerberosTkeyLifetime field value if set, zero value otherwise.
func (o *IpamsvcNameserver) GetKerberosTkeyLifetime() int64 {
	if o == nil || IsNil(o.KerberosTkeyLifetime) {
		var ret int64
		return ret
	}
	return *o.KerberosTkeyLifetime
}

// GetKerberosTkeyLifetimeOk returns a tuple with the KerberosTkeyLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcNameserver) GetKerberosTkeyLifetimeOk() (*int64, bool) {
	if o == nil || IsNil(o.KerberosTkeyLifetime) {
		return nil, false
	}
	return o.KerberosTkeyLifetime, true
}

// HasKerberosTkeyLifetime returns a boolean if a field has been set.
func (o *IpamsvcNameserver) HasKerberosTkeyLifetime() bool {
	if o != nil && !IsNil(o.KerberosTkeyLifetime) {
		return true
	}

	return false
}

// SetKerberosTkeyLifetime gets a reference to the given int64 and assigns it to the KerberosTkeyLifetime field.
func (o *IpamsvcNameserver) SetKerberosTkeyLifetime(v int64) {
	o.KerberosTkeyLifetime = &v
}

// GetKerberosTkeyProtocol returns the KerberosTkeyProtocol field value if set, zero value otherwise.
func (o *IpamsvcNameserver) GetKerberosTkeyProtocol() string {
	if o == nil || IsNil(o.KerberosTkeyProtocol) {
		var ret string
		return ret
	}
	return *o.KerberosTkeyProtocol
}

// GetKerberosTkeyProtocolOk returns a tuple with the KerberosTkeyProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcNameserver) GetKerberosTkeyProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.KerberosTkeyProtocol) {
		return nil, false
	}
	return o.KerberosTkeyProtocol, true
}

// HasKerberosTkeyProtocol returns a boolean if a field has been set.
func (o *IpamsvcNameserver) HasKerberosTkeyProtocol() bool {
	if o != nil && !IsNil(o.KerberosTkeyProtocol) {
		return true
	}

	return false
}

// SetKerberosTkeyProtocol gets a reference to the given string and assigns it to the KerberosTkeyProtocol field.
func (o *IpamsvcNameserver) SetKerberosTkeyProtocol(v string) {
	o.KerberosTkeyProtocol = &v
}

// GetNameserver returns the Nameserver field value if set, zero value otherwise.
func (o *IpamsvcNameserver) GetNameserver() string {
	if o == nil || IsNil(o.Nameserver) {
		var ret string
		return ret
	}
	return *o.Nameserver
}

// GetNameserverOk returns a tuple with the Nameserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcNameserver) GetNameserverOk() (*string, bool) {
	if o == nil || IsNil(o.Nameserver) {
		return nil, false
	}
	return o.Nameserver, true
}

// HasNameserver returns a boolean if a field has been set.
func (o *IpamsvcNameserver) HasNameserver() bool {
	if o != nil && !IsNil(o.Nameserver) {
		return true
	}

	return false
}

// SetNameserver gets a reference to the given string and assigns it to the Nameserver field.
func (o *IpamsvcNameserver) SetNameserver(v string) {
	o.Nameserver = &v
}

// GetServerPrincipal returns the ServerPrincipal field value if set, zero value otherwise.
func (o *IpamsvcNameserver) GetServerPrincipal() string {
	if o == nil || IsNil(o.ServerPrincipal) {
		var ret string
		return ret
	}
	return *o.ServerPrincipal
}

// GetServerPrincipalOk returns a tuple with the ServerPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcNameserver) GetServerPrincipalOk() (*string, bool) {
	if o == nil || IsNil(o.ServerPrincipal) {
		return nil, false
	}
	return o.ServerPrincipal, true
}

// HasServerPrincipal returns a boolean if a field has been set.
func (o *IpamsvcNameserver) HasServerPrincipal() bool {
	if o != nil && !IsNil(o.ServerPrincipal) {
		return true
	}

	return false
}

// SetServerPrincipal gets a reference to the given string and assigns it to the ServerPrincipal field.
func (o *IpamsvcNameserver) SetServerPrincipal(v string) {
	o.ServerPrincipal = &v
}

func (o IpamsvcNameserver) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpamsvcNameserver) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClientPrincipal) {
		toSerialize["client_principal"] = o.ClientPrincipal
	}
	if !IsNil(o.GssTsigFallback) {
		toSerialize["gss_tsig_fallback"] = o.GssTsigFallback
	}
	if !IsNil(o.KerberosRekeyInterval) {
		toSerialize["kerberos_rekey_interval"] = o.KerberosRekeyInterval
	}
	if !IsNil(o.KerberosRetryInterval) {
		toSerialize["kerberos_retry_interval"] = o.KerberosRetryInterval
	}
	if !IsNil(o.KerberosTkeyLifetime) {
		toSerialize["kerberos_tkey_lifetime"] = o.KerberosTkeyLifetime
	}
	if !IsNil(o.KerberosTkeyProtocol) {
		toSerialize["kerberos_tkey_protocol"] = o.KerberosTkeyProtocol
	}
	if !IsNil(o.Nameserver) {
		toSerialize["nameserver"] = o.Nameserver
	}
	if !IsNil(o.ServerPrincipal) {
		toSerialize["server_principal"] = o.ServerPrincipal
	}
	return toSerialize, nil
}

type NullableIpamsvcNameserver struct {
	value *IpamsvcNameserver
	isSet bool
}

func (v NullableIpamsvcNameserver) Get() *IpamsvcNameserver {
	return v.value
}

func (v *NullableIpamsvcNameserver) Set(val *IpamsvcNameserver) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamsvcNameserver) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamsvcNameserver) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamsvcNameserver(val *IpamsvcNameserver) *NullableIpamsvcNameserver {
	return &NullableIpamsvcNameserver{value: val, isSet: true}
}

func (v NullableIpamsvcNameserver) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamsvcNameserver) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
