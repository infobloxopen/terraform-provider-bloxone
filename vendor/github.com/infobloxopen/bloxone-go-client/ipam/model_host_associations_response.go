/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the HostAssociationsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostAssociationsResponse{}

// HostAssociationsResponse The response format to retrieve __HAGroup__, __Subnet__ and __DHCPPacketStats__ objects associated with the DHCP __Host__ object. The host in question is also included in the output, for the convenience reasons.
type HostAssociationsResponse struct {
	DhcpPktStats *DHCPPacketStats `json:"dhcp_pkt_stats,omitempty"`
	// The list of HA groups.
	HaGroups []HAGroup `json:"ha_groups,omitempty"`
	Host     *Host     `json:"host,omitempty"`
	// The list of subnets.
	Subnets []Subnet `json:"subnets,omitempty"`
}

// NewHostAssociationsResponse instantiates a new HostAssociationsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostAssociationsResponse() *HostAssociationsResponse {
	this := HostAssociationsResponse{}
	return &this
}

// NewHostAssociationsResponseWithDefaults instantiates a new HostAssociationsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostAssociationsResponseWithDefaults() *HostAssociationsResponse {
	this := HostAssociationsResponse{}
	return &this
}

// GetDhcpPktStats returns the DhcpPktStats field value if set, zero value otherwise.
func (o *HostAssociationsResponse) GetDhcpPktStats() DHCPPacketStats {
	if o == nil || IsNil(o.DhcpPktStats) {
		var ret DHCPPacketStats
		return ret
	}
	return *o.DhcpPktStats
}

// GetDhcpPktStatsOk returns a tuple with the DhcpPktStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostAssociationsResponse) GetDhcpPktStatsOk() (*DHCPPacketStats, bool) {
	if o == nil || IsNil(o.DhcpPktStats) {
		return nil, false
	}
	return o.DhcpPktStats, true
}

// HasDhcpPktStats returns a boolean if a field has been set.
func (o *HostAssociationsResponse) HasDhcpPktStats() bool {
	if o != nil && !IsNil(o.DhcpPktStats) {
		return true
	}

	return false
}

// SetDhcpPktStats gets a reference to the given DHCPPacketStats and assigns it to the DhcpPktStats field.
func (o *HostAssociationsResponse) SetDhcpPktStats(v DHCPPacketStats) {
	o.DhcpPktStats = &v
}

// GetHaGroups returns the HaGroups field value if set, zero value otherwise.
func (o *HostAssociationsResponse) GetHaGroups() []HAGroup {
	if o == nil || IsNil(o.HaGroups) {
		var ret []HAGroup
		return ret
	}
	return o.HaGroups
}

// GetHaGroupsOk returns a tuple with the HaGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostAssociationsResponse) GetHaGroupsOk() ([]HAGroup, bool) {
	if o == nil || IsNil(o.HaGroups) {
		return nil, false
	}
	return o.HaGroups, true
}

// HasHaGroups returns a boolean if a field has been set.
func (o *HostAssociationsResponse) HasHaGroups() bool {
	if o != nil && !IsNil(o.HaGroups) {
		return true
	}

	return false
}

// SetHaGroups gets a reference to the given []HAGroup and assigns it to the HaGroups field.
func (o *HostAssociationsResponse) SetHaGroups(v []HAGroup) {
	o.HaGroups = v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *HostAssociationsResponse) GetHost() Host {
	if o == nil || IsNil(o.Host) {
		var ret Host
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostAssociationsResponse) GetHostOk() (*Host, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *HostAssociationsResponse) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given Host and assigns it to the Host field.
func (o *HostAssociationsResponse) SetHost(v Host) {
	o.Host = &v
}

// GetSubnets returns the Subnets field value if set, zero value otherwise.
func (o *HostAssociationsResponse) GetSubnets() []Subnet {
	if o == nil || IsNil(o.Subnets) {
		var ret []Subnet
		return ret
	}
	return o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostAssociationsResponse) GetSubnetsOk() ([]Subnet, bool) {
	if o == nil || IsNil(o.Subnets) {
		return nil, false
	}
	return o.Subnets, true
}

// HasSubnets returns a boolean if a field has been set.
func (o *HostAssociationsResponse) HasSubnets() bool {
	if o != nil && !IsNil(o.Subnets) {
		return true
	}

	return false
}

// SetSubnets gets a reference to the given []Subnet and assigns it to the Subnets field.
func (o *HostAssociationsResponse) SetSubnets(v []Subnet) {
	o.Subnets = v
}

func (o HostAssociationsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostAssociationsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DhcpPktStats) {
		toSerialize["dhcp_pkt_stats"] = o.DhcpPktStats
	}
	if !IsNil(o.HaGroups) {
		toSerialize["ha_groups"] = o.HaGroups
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Subnets) {
		toSerialize["subnets"] = o.Subnets
	}
	return toSerialize, nil
}

type NullableHostAssociationsResponse struct {
	value *HostAssociationsResponse
	isSet bool
}

func (v NullableHostAssociationsResponse) Get() *HostAssociationsResponse {
	return v.value
}

func (v *NullableHostAssociationsResponse) Set(val *HostAssociationsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHostAssociationsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHostAssociationsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostAssociationsResponse(val *HostAssociationsResponse) *NullableHostAssociationsResponse {
	return &NullableHostAssociationsResponse{value: val, isSet: true}
}

func (v NullableHostAssociationsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostAssociationsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
