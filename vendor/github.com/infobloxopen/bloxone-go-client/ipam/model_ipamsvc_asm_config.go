/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"time"
)

// checks if the IpamsvcASMConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpamsvcASMConfig{}

// IpamsvcASMConfig The __ASMConfig__ object represents Automated Scope Management configuration.
type IpamsvcASMConfig struct {
	// ASM shows the number of addresses forecast to be used _forecast_period_ days in the future, if it is greater than _asm_threshold_ percent * _dhcp_total_ (see _dhcp_utilization_) then the subnet is flagged.
	AsmThreshold *int64 `json:"asm_threshold,omitempty"`
	// Indicates if Automated Scope Management is enabled.
	Enable *bool `json:"enable,omitempty"`
	// Indicates if ASM should send notifications to the user.
	EnableNotification *bool `json:"enable_notification,omitempty"`
	// The forecast period in days.
	ForecastPeriod *int64 `json:"forecast_period,omitempty"`
	// Indicates the growth in the number or percentage of IP addresses.
	GrowthFactor *int64 `json:"growth_factor,omitempty"`
	// The type of factor to use: _percent_ or _count_.
	GrowthType *string `json:"growth_type,omitempty"`
	// The minimum amount of history needed before ASM can run on this subnet.
	History *int64 `json:"history,omitempty"`
	// The minimum size of range needed for ASM to run on this subnet.
	MinTotal *int64 `json:"min_total,omitempty"`
	// The minimum percentage of addresses that must be available outside of the DHCP ranges and fixed addresses when making a suggested change..
	MinUnused    *int64     `json:"min_unused,omitempty"`
	ReenableDate *time.Time `json:"reenable_date,omitempty"`
}

// NewIpamsvcASMConfig instantiates a new IpamsvcASMConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpamsvcASMConfig() *IpamsvcASMConfig {
	this := IpamsvcASMConfig{}
	var asmThreshold int64 = 90
	this.AsmThreshold = &asmThreshold
	var enable bool = true
	this.Enable = &enable
	var enableNotification bool = true
	this.EnableNotification = &enableNotification
	var forecastPeriod int64 = 14
	this.ForecastPeriod = &forecastPeriod
	var growthFactor int64 = 20
	this.GrowthFactor = &growthFactor
	var growthType string = "percent"
	this.GrowthType = &growthType
	var history int64 = 30
	this.History = &history
	var minTotal int64 = 10
	this.MinTotal = &minTotal
	var minUnused int64 = 10
	this.MinUnused = &minUnused
	return &this
}

// NewIpamsvcASMConfigWithDefaults instantiates a new IpamsvcASMConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpamsvcASMConfigWithDefaults() *IpamsvcASMConfig {
	this := IpamsvcASMConfig{}
	var asmThreshold int64 = 90
	this.AsmThreshold = &asmThreshold
	var enable bool = true
	this.Enable = &enable
	var enableNotification bool = true
	this.EnableNotification = &enableNotification
	var forecastPeriod int64 = 14
	this.ForecastPeriod = &forecastPeriod
	var growthFactor int64 = 20
	this.GrowthFactor = &growthFactor
	var growthType string = "percent"
	this.GrowthType = &growthType
	var history int64 = 30
	this.History = &history
	var minTotal int64 = 10
	this.MinTotal = &minTotal
	var minUnused int64 = 10
	this.MinUnused = &minUnused
	return &this
}

// GetAsmThreshold returns the AsmThreshold field value if set, zero value otherwise.
func (o *IpamsvcASMConfig) GetAsmThreshold() int64 {
	if o == nil || IsNil(o.AsmThreshold) {
		var ret int64
		return ret
	}
	return *o.AsmThreshold
}

// GetAsmThresholdOk returns a tuple with the AsmThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcASMConfig) GetAsmThresholdOk() (*int64, bool) {
	if o == nil || IsNil(o.AsmThreshold) {
		return nil, false
	}
	return o.AsmThreshold, true
}

// HasAsmThreshold returns a boolean if a field has been set.
func (o *IpamsvcASMConfig) HasAsmThreshold() bool {
	if o != nil && !IsNil(o.AsmThreshold) {
		return true
	}

	return false
}

// SetAsmThreshold gets a reference to the given int64 and assigns it to the AsmThreshold field.
func (o *IpamsvcASMConfig) SetAsmThreshold(v int64) {
	o.AsmThreshold = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *IpamsvcASMConfig) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcASMConfig) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *IpamsvcASMConfig) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *IpamsvcASMConfig) SetEnable(v bool) {
	o.Enable = &v
}

// GetEnableNotification returns the EnableNotification field value if set, zero value otherwise.
func (o *IpamsvcASMConfig) GetEnableNotification() bool {
	if o == nil || IsNil(o.EnableNotification) {
		var ret bool
		return ret
	}
	return *o.EnableNotification
}

// GetEnableNotificationOk returns a tuple with the EnableNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcASMConfig) GetEnableNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableNotification) {
		return nil, false
	}
	return o.EnableNotification, true
}

// HasEnableNotification returns a boolean if a field has been set.
func (o *IpamsvcASMConfig) HasEnableNotification() bool {
	if o != nil && !IsNil(o.EnableNotification) {
		return true
	}

	return false
}

// SetEnableNotification gets a reference to the given bool and assigns it to the EnableNotification field.
func (o *IpamsvcASMConfig) SetEnableNotification(v bool) {
	o.EnableNotification = &v
}

// GetForecastPeriod returns the ForecastPeriod field value if set, zero value otherwise.
func (o *IpamsvcASMConfig) GetForecastPeriod() int64 {
	if o == nil || IsNil(o.ForecastPeriod) {
		var ret int64
		return ret
	}
	return *o.ForecastPeriod
}

// GetForecastPeriodOk returns a tuple with the ForecastPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcASMConfig) GetForecastPeriodOk() (*int64, bool) {
	if o == nil || IsNil(o.ForecastPeriod) {
		return nil, false
	}
	return o.ForecastPeriod, true
}

// HasForecastPeriod returns a boolean if a field has been set.
func (o *IpamsvcASMConfig) HasForecastPeriod() bool {
	if o != nil && !IsNil(o.ForecastPeriod) {
		return true
	}

	return false
}

// SetForecastPeriod gets a reference to the given int64 and assigns it to the ForecastPeriod field.
func (o *IpamsvcASMConfig) SetForecastPeriod(v int64) {
	o.ForecastPeriod = &v
}

// GetGrowthFactor returns the GrowthFactor field value if set, zero value otherwise.
func (o *IpamsvcASMConfig) GetGrowthFactor() int64 {
	if o == nil || IsNil(o.GrowthFactor) {
		var ret int64
		return ret
	}
	return *o.GrowthFactor
}

// GetGrowthFactorOk returns a tuple with the GrowthFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcASMConfig) GetGrowthFactorOk() (*int64, bool) {
	if o == nil || IsNil(o.GrowthFactor) {
		return nil, false
	}
	return o.GrowthFactor, true
}

// HasGrowthFactor returns a boolean if a field has been set.
func (o *IpamsvcASMConfig) HasGrowthFactor() bool {
	if o != nil && !IsNil(o.GrowthFactor) {
		return true
	}

	return false
}

// SetGrowthFactor gets a reference to the given int64 and assigns it to the GrowthFactor field.
func (o *IpamsvcASMConfig) SetGrowthFactor(v int64) {
	o.GrowthFactor = &v
}

// GetGrowthType returns the GrowthType field value if set, zero value otherwise.
func (o *IpamsvcASMConfig) GetGrowthType() string {
	if o == nil || IsNil(o.GrowthType) {
		var ret string
		return ret
	}
	return *o.GrowthType
}

// GetGrowthTypeOk returns a tuple with the GrowthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcASMConfig) GetGrowthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.GrowthType) {
		return nil, false
	}
	return o.GrowthType, true
}

// HasGrowthType returns a boolean if a field has been set.
func (o *IpamsvcASMConfig) HasGrowthType() bool {
	if o != nil && !IsNil(o.GrowthType) {
		return true
	}

	return false
}

// SetGrowthType gets a reference to the given string and assigns it to the GrowthType field.
func (o *IpamsvcASMConfig) SetGrowthType(v string) {
	o.GrowthType = &v
}

// GetHistory returns the History field value if set, zero value otherwise.
func (o *IpamsvcASMConfig) GetHistory() int64 {
	if o == nil || IsNil(o.History) {
		var ret int64
		return ret
	}
	return *o.History
}

// GetHistoryOk returns a tuple with the History field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcASMConfig) GetHistoryOk() (*int64, bool) {
	if o == nil || IsNil(o.History) {
		return nil, false
	}
	return o.History, true
}

// HasHistory returns a boolean if a field has been set.
func (o *IpamsvcASMConfig) HasHistory() bool {
	if o != nil && !IsNil(o.History) {
		return true
	}

	return false
}

// SetHistory gets a reference to the given int64 and assigns it to the History field.
func (o *IpamsvcASMConfig) SetHistory(v int64) {
	o.History = &v
}

// GetMinTotal returns the MinTotal field value if set, zero value otherwise.
func (o *IpamsvcASMConfig) GetMinTotal() int64 {
	if o == nil || IsNil(o.MinTotal) {
		var ret int64
		return ret
	}
	return *o.MinTotal
}

// GetMinTotalOk returns a tuple with the MinTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcASMConfig) GetMinTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.MinTotal) {
		return nil, false
	}
	return o.MinTotal, true
}

// HasMinTotal returns a boolean if a field has been set.
func (o *IpamsvcASMConfig) HasMinTotal() bool {
	if o != nil && !IsNil(o.MinTotal) {
		return true
	}

	return false
}

// SetMinTotal gets a reference to the given int64 and assigns it to the MinTotal field.
func (o *IpamsvcASMConfig) SetMinTotal(v int64) {
	o.MinTotal = &v
}

// GetMinUnused returns the MinUnused field value if set, zero value otherwise.
func (o *IpamsvcASMConfig) GetMinUnused() int64 {
	if o == nil || IsNil(o.MinUnused) {
		var ret int64
		return ret
	}
	return *o.MinUnused
}

// GetMinUnusedOk returns a tuple with the MinUnused field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcASMConfig) GetMinUnusedOk() (*int64, bool) {
	if o == nil || IsNil(o.MinUnused) {
		return nil, false
	}
	return o.MinUnused, true
}

// HasMinUnused returns a boolean if a field has been set.
func (o *IpamsvcASMConfig) HasMinUnused() bool {
	if o != nil && !IsNil(o.MinUnused) {
		return true
	}

	return false
}

// SetMinUnused gets a reference to the given int64 and assigns it to the MinUnused field.
func (o *IpamsvcASMConfig) SetMinUnused(v int64) {
	o.MinUnused = &v
}

// GetReenableDate returns the ReenableDate field value if set, zero value otherwise.
func (o *IpamsvcASMConfig) GetReenableDate() time.Time {
	if o == nil || IsNil(o.ReenableDate) {
		var ret time.Time
		return ret
	}
	return *o.ReenableDate
}

// GetReenableDateOk returns a tuple with the ReenableDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcASMConfig) GetReenableDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ReenableDate) {
		return nil, false
	}
	return o.ReenableDate, true
}

// HasReenableDate returns a boolean if a field has been set.
func (o *IpamsvcASMConfig) HasReenableDate() bool {
	if o != nil && !IsNil(o.ReenableDate) {
		return true
	}

	return false
}

// SetReenableDate gets a reference to the given time.Time and assigns it to the ReenableDate field.
func (o *IpamsvcASMConfig) SetReenableDate(v time.Time) {
	o.ReenableDate = &v
}

func (o IpamsvcASMConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpamsvcASMConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AsmThreshold) {
		toSerialize["asm_threshold"] = o.AsmThreshold
	}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.EnableNotification) {
		toSerialize["enable_notification"] = o.EnableNotification
	}
	if !IsNil(o.ForecastPeriod) {
		toSerialize["forecast_period"] = o.ForecastPeriod
	}
	if !IsNil(o.GrowthFactor) {
		toSerialize["growth_factor"] = o.GrowthFactor
	}
	if !IsNil(o.GrowthType) {
		toSerialize["growth_type"] = o.GrowthType
	}
	if !IsNil(o.History) {
		toSerialize["history"] = o.History
	}
	if !IsNil(o.MinTotal) {
		toSerialize["min_total"] = o.MinTotal
	}
	if !IsNil(o.MinUnused) {
		toSerialize["min_unused"] = o.MinUnused
	}
	if !IsNil(o.ReenableDate) {
		toSerialize["reenable_date"] = o.ReenableDate
	}
	return toSerialize, nil
}

type NullableIpamsvcASMConfig struct {
	value *IpamsvcASMConfig
	isSet bool
}

func (v NullableIpamsvcASMConfig) Get() *IpamsvcASMConfig {
	return v.value
}

func (v *NullableIpamsvcASMConfig) Set(val *IpamsvcASMConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamsvcASMConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamsvcASMConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamsvcASMConfig(val *IpamsvcASMConfig) *NullableIpamsvcASMConfig {
	return &NullableIpamsvcASMConfig{value: val, isSet: true}
}

func (v NullableIpamsvcASMConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamsvcASMConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
