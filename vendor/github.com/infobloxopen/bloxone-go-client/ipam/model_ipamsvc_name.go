/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the IpamsvcName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpamsvcName{}

// IpamsvcName The __Name__ object represents a name associated with an address.
type IpamsvcName struct {
	// The name expressed as a single label or FQDN.
	Name string `json:"name"`
	// The origin of the name.
	Type string `json:"type"`
}

// NewIpamsvcName instantiates a new IpamsvcName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpamsvcName(name string, type_ string) *IpamsvcName {
	this := IpamsvcName{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewIpamsvcNameWithDefaults instantiates a new IpamsvcName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpamsvcNameWithDefaults() *IpamsvcName {
	this := IpamsvcName{}
	return &this
}

// GetName returns the Name field value
func (o *IpamsvcName) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IpamsvcName) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IpamsvcName) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *IpamsvcName) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IpamsvcName) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IpamsvcName) SetType(v string) {
	o.Type = v
}

func (o IpamsvcName) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpamsvcName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableIpamsvcName struct {
	value *IpamsvcName
	isSet bool
}

func (v NullableIpamsvcName) Get() *IpamsvcName {
	return v.value
}

func (v *NullableIpamsvcName) Set(val *IpamsvcName) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamsvcName) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamsvcName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamsvcName(val *IpamsvcName) *NullableIpamsvcName {
	return &NullableIpamsvcName{value: val, isSet: true}
}

func (v NullableIpamsvcName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamsvcName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
