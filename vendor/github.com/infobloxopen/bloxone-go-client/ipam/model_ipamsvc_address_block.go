/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"time"
)

// checks if the IpamsvcAddressBlock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpamsvcAddressBlock{}

// IpamsvcAddressBlock An __AddressBlock__ object (_ipam/address_block_) is a set of contiguous IP addresses in the same IP space with no gap, expressed as a CIDR block. Address blocks are hierarchical and may be parented to other address blocks as long as the parent block fully contains the child and no sibling overlaps. Top level address blocks are parented to an IP space.
type IpamsvcAddressBlock struct {
	// The address field in form “a.b.c.d/n” where the “/n” may be omitted. In this case, the CIDR value must be defined in the _cidr_ field. When reading, the _address_ field is always in the form “a.b.c.d”.
	Address   *string           `json:"address,omitempty"`
	AsmConfig *IpamsvcASMConfig `json:"asm_config,omitempty"`
	// Incremented by 1 if the IP address usage limits for automated scope management are exceeded for any subnets in the address block.
	AsmScopeFlag *int64 `json:"asm_scope_flag,omitempty"`
	// The CIDR of the address block. This is required, if _address_ does not specify it in its input.
	Cidr *int64 `json:"cidr,omitempty"`
	// The description for the address block. May contain 0 to 1024 characters. Can include UTF-8.
	Comment *string `json:"comment,omitempty"`
	// Time when the object has been created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Controls who does the DDNS updates.  Valid values are: * _client_: DHCP server updates DNS if requested by client. * _server_: DHCP server always updates DNS, overriding an update request from the client, unless the client requests no updates. * _ignore_: DHCP server always updates DNS, even if the client says not to. * _over_client_update_: Same as _server_. DHCP server always updates DNS, overriding an update request from the client, unless the client requests no updates. * _over_no_update_: DHCP server updates DNS even if the client requests that no updates be done. If the client requests to do the update, DHCP server allows it.  Defaults to _client_.
	DdnsClientUpdate *string `json:"ddns_client_update,omitempty"`
	// The mode used for resolving conflicts while performing DDNS updates.  Valid values are: * _check_with_dhcid_: It includes adding a DHCID record and checking that record via conflict detection as per RFC 4703. * _no_check_with_dhcid_: This will ignore conflict detection but add a DHCID record when creating/updating an entry. * _check_exists_with_dhcid_: This will check if there is an existing DHCID record but does not verify the value of the record matches the update. This will also update the DHCID record for the entry. * _no_check_without_dhcid_: This ignores conflict detection and will not add a DHCID record when creating/updating a DDNS entry.  Defaults to _check_with_dhcid_.
	DdnsConflictResolutionMode *string `json:"ddns_conflict_resolution_mode,omitempty"`
	// The domain suffix for DDNS updates. FQDN, may be empty.  Defaults to empty.
	DdnsDomain *string `json:"ddns_domain,omitempty"`
	// Indicates if DDNS needs to generate a hostname when not supplied by the client.  Defaults to _false_.
	DdnsGenerateName *bool `json:"ddns_generate_name,omitempty"`
	// The prefix used in the generation of an FQDN.  When generating a name, DHCP server will construct the name in the format: [ddns-generated-prefix]-[address-text].[ddns-qualifying-suffix]. where address-text is simply the lease IP address converted to a hyphenated string.  Defaults to \"myhost\".
	DdnsGeneratedPrefix *string `json:"ddns_generated_prefix,omitempty"`
	// Determines if DDNS updates are enabled at the address block level. Defaults to _true_.
	DdnsSendUpdates *bool `json:"ddns_send_updates,omitempty"`
	// DDNS TTL value - to be calculated as a simple percentage of the lease's lifetime, using the parameter's value as the percentage. It is specified as a percentage (e.g. 25, 75). Defaults to unspecified.
	DdnsTtlPercent *float32 `json:"ddns_ttl_percent,omitempty"`
	// Instructs the DHCP server to always update the DNS information when a lease is renewed even if its DNS information has not changed.  Defaults to _false_.
	DdnsUpdateOnRenew *bool `json:"ddns_update_on_renew,omitempty"`
	// When true, DHCP server will apply conflict resolution, as described in RFC 4703, when attempting to fulfill the update request.  When false, DHCP server will simply attempt to update the DNS entries per the request, regardless of whether or not they conflict with existing entries owned by other DHCP4 clients.  Defaults to _true_.
	DdnsUseConflictResolution *bool              `json:"ddns_use_conflict_resolution,omitempty"`
	DhcpConfig                *IpamsvcDHCPConfig `json:"dhcp_config,omitempty"`
	// The list of DHCP options for the address block. May be either a specific option or a group of options.
	DhcpOptions     []IpamsvcOptionItem     `json:"dhcp_options,omitempty"`
	DhcpUtilization *IpamsvcDHCPUtilization `json:"dhcp_utilization,omitempty"`
	// The discovery attributes for this address block in JSON format.
	DiscoveryAttrs map[string]interface{} `json:"discovery_attrs,omitempty"`
	// The discovery metadata for this address block in JSON format.
	DiscoveryMetadata map[string]interface{} `json:"discovery_metadata,omitempty"`
	// The configuration for header option filename field.
	HeaderOptionFilename *string `json:"header_option_filename,omitempty"`
	// The configuration for header option server address field.
	HeaderOptionServerAddress *string `json:"header_option_server_address,omitempty"`
	// The configuration for header option server name field.
	HeaderOptionServerName *string `json:"header_option_server_name,omitempty"`
	// The character to replace non-matching characters with, when hostname rewrite is enabled.  Any single ASCII character or no character if the invalid characters should be removed without replacement.  Defaults to \"-\".
	HostnameRewriteChar *string `json:"hostname_rewrite_char,omitempty"`
	// Indicates if client supplied hostnames will be rewritten prior to DDNS update by replacing every character that does not match _hostname_rewrite_regex_ by _hostname_rewrite_char_.  Defaults to _false_.
	HostnameRewriteEnabled *bool `json:"hostname_rewrite_enabled,omitempty"`
	// The regex bracket expression to match valid characters.  Must begin with \"[\" and end with \"]\" and be a compilable POSIX regex.  Defaults to \"[^a-zA-Z0-9_.]\".
	HostnameRewriteRegex *string `json:"hostname_rewrite_regex,omitempty"`
	// The resource identifier.
	Id *string `json:"id,omitempty"`
	// The resource identifier.
	InheritanceParent  *string                 `json:"inheritance_parent,omitempty"`
	InheritanceSources *IpamsvcDHCPInheritance `json:"inheritance_sources,omitempty"`
	// The name of the address block. May contain 1 to 256 characters. Can include UTF-8.
	Name *string `json:"name,omitempty"`
	// The resource identifier.
	Parent *string `json:"parent,omitempty"`
	// The type of protocol of address block (_ip4_ or _ip6_).
	Protocol *string `json:"protocol,omitempty"`
	// The resource identifier.
	Space *string `json:"space,omitempty"`
	// The tags for the address block in JSON format.
	Tags      map[string]interface{}       `json:"tags,omitempty"`
	Threshold *IpamsvcUtilizationThreshold `json:"threshold,omitempty"`
	// Time when the object has been updated. Equals to _created_at_ if not updated after creation.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The usage is a combination of indicators, each tracking a specific associated use. Listed below are usage indicators with their meaning:  usage indicator        | description  ---------------------- | --------------------------------  _IPAM_                 |  AddressBlock is managed in BloxOne DDI.  _DISCOVERED_           |  AddressBlock is discovered by some network discovery probe like Network Insight or NetMRI in NIOS.
	Usage         []string              `json:"usage,omitempty"`
	Utilization   *IpamsvcUtilization   `json:"utilization,omitempty"`
	UtilizationV6 *IpamsvcUtilizationV6 `json:"utilization_v6,omitempty"`
}

// NewIpamsvcAddressBlock instantiates a new IpamsvcAddressBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpamsvcAddressBlock() *IpamsvcAddressBlock {
	this := IpamsvcAddressBlock{}
	return &this
}

// NewIpamsvcAddressBlockWithDefaults instantiates a new IpamsvcAddressBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpamsvcAddressBlockWithDefaults() *IpamsvcAddressBlock {
	this := IpamsvcAddressBlock{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *IpamsvcAddressBlock) SetAddress(v string) {
	o.Address = &v
}

// GetAsmConfig returns the AsmConfig field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetAsmConfig() IpamsvcASMConfig {
	if o == nil || IsNil(o.AsmConfig) {
		var ret IpamsvcASMConfig
		return ret
	}
	return *o.AsmConfig
}

// GetAsmConfigOk returns a tuple with the AsmConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetAsmConfigOk() (*IpamsvcASMConfig, bool) {
	if o == nil || IsNil(o.AsmConfig) {
		return nil, false
	}
	return o.AsmConfig, true
}

// HasAsmConfig returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasAsmConfig() bool {
	if o != nil && !IsNil(o.AsmConfig) {
		return true
	}

	return false
}

// SetAsmConfig gets a reference to the given IpamsvcASMConfig and assigns it to the AsmConfig field.
func (o *IpamsvcAddressBlock) SetAsmConfig(v IpamsvcASMConfig) {
	o.AsmConfig = &v
}

// GetAsmScopeFlag returns the AsmScopeFlag field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetAsmScopeFlag() int64 {
	if o == nil || IsNil(o.AsmScopeFlag) {
		var ret int64
		return ret
	}
	return *o.AsmScopeFlag
}

// GetAsmScopeFlagOk returns a tuple with the AsmScopeFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetAsmScopeFlagOk() (*int64, bool) {
	if o == nil || IsNil(o.AsmScopeFlag) {
		return nil, false
	}
	return o.AsmScopeFlag, true
}

// HasAsmScopeFlag returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasAsmScopeFlag() bool {
	if o != nil && !IsNil(o.AsmScopeFlag) {
		return true
	}

	return false
}

// SetAsmScopeFlag gets a reference to the given int64 and assigns it to the AsmScopeFlag field.
func (o *IpamsvcAddressBlock) SetAsmScopeFlag(v int64) {
	o.AsmScopeFlag = &v
}

// GetCidr returns the Cidr field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetCidr() int64 {
	if o == nil || IsNil(o.Cidr) {
		var ret int64
		return ret
	}
	return *o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetCidrOk() (*int64, bool) {
	if o == nil || IsNil(o.Cidr) {
		return nil, false
	}
	return o.Cidr, true
}

// HasCidr returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasCidr() bool {
	if o != nil && !IsNil(o.Cidr) {
		return true
	}

	return false
}

// SetCidr gets a reference to the given int64 and assigns it to the Cidr field.
func (o *IpamsvcAddressBlock) SetCidr(v int64) {
	o.Cidr = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *IpamsvcAddressBlock) SetComment(v string) {
	o.Comment = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *IpamsvcAddressBlock) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDdnsClientUpdate returns the DdnsClientUpdate field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetDdnsClientUpdate() string {
	if o == nil || IsNil(o.DdnsClientUpdate) {
		var ret string
		return ret
	}
	return *o.DdnsClientUpdate
}

// GetDdnsClientUpdateOk returns a tuple with the DdnsClientUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetDdnsClientUpdateOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsClientUpdate) {
		return nil, false
	}
	return o.DdnsClientUpdate, true
}

// HasDdnsClientUpdate returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasDdnsClientUpdate() bool {
	if o != nil && !IsNil(o.DdnsClientUpdate) {
		return true
	}

	return false
}

// SetDdnsClientUpdate gets a reference to the given string and assigns it to the DdnsClientUpdate field.
func (o *IpamsvcAddressBlock) SetDdnsClientUpdate(v string) {
	o.DdnsClientUpdate = &v
}

// GetDdnsConflictResolutionMode returns the DdnsConflictResolutionMode field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetDdnsConflictResolutionMode() string {
	if o == nil || IsNil(o.DdnsConflictResolutionMode) {
		var ret string
		return ret
	}
	return *o.DdnsConflictResolutionMode
}

// GetDdnsConflictResolutionModeOk returns a tuple with the DdnsConflictResolutionMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetDdnsConflictResolutionModeOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsConflictResolutionMode) {
		return nil, false
	}
	return o.DdnsConflictResolutionMode, true
}

// HasDdnsConflictResolutionMode returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasDdnsConflictResolutionMode() bool {
	if o != nil && !IsNil(o.DdnsConflictResolutionMode) {
		return true
	}

	return false
}

// SetDdnsConflictResolutionMode gets a reference to the given string and assigns it to the DdnsConflictResolutionMode field.
func (o *IpamsvcAddressBlock) SetDdnsConflictResolutionMode(v string) {
	o.DdnsConflictResolutionMode = &v
}

// GetDdnsDomain returns the DdnsDomain field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetDdnsDomain() string {
	if o == nil || IsNil(o.DdnsDomain) {
		var ret string
		return ret
	}
	return *o.DdnsDomain
}

// GetDdnsDomainOk returns a tuple with the DdnsDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetDdnsDomainOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsDomain) {
		return nil, false
	}
	return o.DdnsDomain, true
}

// HasDdnsDomain returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasDdnsDomain() bool {
	if o != nil && !IsNil(o.DdnsDomain) {
		return true
	}

	return false
}

// SetDdnsDomain gets a reference to the given string and assigns it to the DdnsDomain field.
func (o *IpamsvcAddressBlock) SetDdnsDomain(v string) {
	o.DdnsDomain = &v
}

// GetDdnsGenerateName returns the DdnsGenerateName field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetDdnsGenerateName() bool {
	if o == nil || IsNil(o.DdnsGenerateName) {
		var ret bool
		return ret
	}
	return *o.DdnsGenerateName
}

// GetDdnsGenerateNameOk returns a tuple with the DdnsGenerateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetDdnsGenerateNameOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsGenerateName) {
		return nil, false
	}
	return o.DdnsGenerateName, true
}

// HasDdnsGenerateName returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasDdnsGenerateName() bool {
	if o != nil && !IsNil(o.DdnsGenerateName) {
		return true
	}

	return false
}

// SetDdnsGenerateName gets a reference to the given bool and assigns it to the DdnsGenerateName field.
func (o *IpamsvcAddressBlock) SetDdnsGenerateName(v bool) {
	o.DdnsGenerateName = &v
}

// GetDdnsGeneratedPrefix returns the DdnsGeneratedPrefix field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetDdnsGeneratedPrefix() string {
	if o == nil || IsNil(o.DdnsGeneratedPrefix) {
		var ret string
		return ret
	}
	return *o.DdnsGeneratedPrefix
}

// GetDdnsGeneratedPrefixOk returns a tuple with the DdnsGeneratedPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetDdnsGeneratedPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsGeneratedPrefix) {
		return nil, false
	}
	return o.DdnsGeneratedPrefix, true
}

// HasDdnsGeneratedPrefix returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasDdnsGeneratedPrefix() bool {
	if o != nil && !IsNil(o.DdnsGeneratedPrefix) {
		return true
	}

	return false
}

// SetDdnsGeneratedPrefix gets a reference to the given string and assigns it to the DdnsGeneratedPrefix field.
func (o *IpamsvcAddressBlock) SetDdnsGeneratedPrefix(v string) {
	o.DdnsGeneratedPrefix = &v
}

// GetDdnsSendUpdates returns the DdnsSendUpdates field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetDdnsSendUpdates() bool {
	if o == nil || IsNil(o.DdnsSendUpdates) {
		var ret bool
		return ret
	}
	return *o.DdnsSendUpdates
}

// GetDdnsSendUpdatesOk returns a tuple with the DdnsSendUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetDdnsSendUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsSendUpdates) {
		return nil, false
	}
	return o.DdnsSendUpdates, true
}

// HasDdnsSendUpdates returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasDdnsSendUpdates() bool {
	if o != nil && !IsNil(o.DdnsSendUpdates) {
		return true
	}

	return false
}

// SetDdnsSendUpdates gets a reference to the given bool and assigns it to the DdnsSendUpdates field.
func (o *IpamsvcAddressBlock) SetDdnsSendUpdates(v bool) {
	o.DdnsSendUpdates = &v
}

// GetDdnsTtlPercent returns the DdnsTtlPercent field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetDdnsTtlPercent() float32 {
	if o == nil || IsNil(o.DdnsTtlPercent) {
		var ret float32
		return ret
	}
	return *o.DdnsTtlPercent
}

// GetDdnsTtlPercentOk returns a tuple with the DdnsTtlPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetDdnsTtlPercentOk() (*float32, bool) {
	if o == nil || IsNil(o.DdnsTtlPercent) {
		return nil, false
	}
	return o.DdnsTtlPercent, true
}

// HasDdnsTtlPercent returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasDdnsTtlPercent() bool {
	if o != nil && !IsNil(o.DdnsTtlPercent) {
		return true
	}

	return false
}

// SetDdnsTtlPercent gets a reference to the given float32 and assigns it to the DdnsTtlPercent field.
func (o *IpamsvcAddressBlock) SetDdnsTtlPercent(v float32) {
	o.DdnsTtlPercent = &v
}

// GetDdnsUpdateOnRenew returns the DdnsUpdateOnRenew field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetDdnsUpdateOnRenew() bool {
	if o == nil || IsNil(o.DdnsUpdateOnRenew) {
		var ret bool
		return ret
	}
	return *o.DdnsUpdateOnRenew
}

// GetDdnsUpdateOnRenewOk returns a tuple with the DdnsUpdateOnRenew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetDdnsUpdateOnRenewOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsUpdateOnRenew) {
		return nil, false
	}
	return o.DdnsUpdateOnRenew, true
}

// HasDdnsUpdateOnRenew returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasDdnsUpdateOnRenew() bool {
	if o != nil && !IsNil(o.DdnsUpdateOnRenew) {
		return true
	}

	return false
}

// SetDdnsUpdateOnRenew gets a reference to the given bool and assigns it to the DdnsUpdateOnRenew field.
func (o *IpamsvcAddressBlock) SetDdnsUpdateOnRenew(v bool) {
	o.DdnsUpdateOnRenew = &v
}

// GetDdnsUseConflictResolution returns the DdnsUseConflictResolution field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetDdnsUseConflictResolution() bool {
	if o == nil || IsNil(o.DdnsUseConflictResolution) {
		var ret bool
		return ret
	}
	return *o.DdnsUseConflictResolution
}

// GetDdnsUseConflictResolutionOk returns a tuple with the DdnsUseConflictResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetDdnsUseConflictResolutionOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsUseConflictResolution) {
		return nil, false
	}
	return o.DdnsUseConflictResolution, true
}

// HasDdnsUseConflictResolution returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasDdnsUseConflictResolution() bool {
	if o != nil && !IsNil(o.DdnsUseConflictResolution) {
		return true
	}

	return false
}

// SetDdnsUseConflictResolution gets a reference to the given bool and assigns it to the DdnsUseConflictResolution field.
func (o *IpamsvcAddressBlock) SetDdnsUseConflictResolution(v bool) {
	o.DdnsUseConflictResolution = &v
}

// GetDhcpConfig returns the DhcpConfig field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetDhcpConfig() IpamsvcDHCPConfig {
	if o == nil || IsNil(o.DhcpConfig) {
		var ret IpamsvcDHCPConfig
		return ret
	}
	return *o.DhcpConfig
}

// GetDhcpConfigOk returns a tuple with the DhcpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetDhcpConfigOk() (*IpamsvcDHCPConfig, bool) {
	if o == nil || IsNil(o.DhcpConfig) {
		return nil, false
	}
	return o.DhcpConfig, true
}

// HasDhcpConfig returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasDhcpConfig() bool {
	if o != nil && !IsNil(o.DhcpConfig) {
		return true
	}

	return false
}

// SetDhcpConfig gets a reference to the given IpamsvcDHCPConfig and assigns it to the DhcpConfig field.
func (o *IpamsvcAddressBlock) SetDhcpConfig(v IpamsvcDHCPConfig) {
	o.DhcpConfig = &v
}

// GetDhcpOptions returns the DhcpOptions field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetDhcpOptions() []IpamsvcOptionItem {
	if o == nil || IsNil(o.DhcpOptions) {
		var ret []IpamsvcOptionItem
		return ret
	}
	return o.DhcpOptions
}

// GetDhcpOptionsOk returns a tuple with the DhcpOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetDhcpOptionsOk() ([]IpamsvcOptionItem, bool) {
	if o == nil || IsNil(o.DhcpOptions) {
		return nil, false
	}
	return o.DhcpOptions, true
}

// HasDhcpOptions returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasDhcpOptions() bool {
	if o != nil && !IsNil(o.DhcpOptions) {
		return true
	}

	return false
}

// SetDhcpOptions gets a reference to the given []IpamsvcOptionItem and assigns it to the DhcpOptions field.
func (o *IpamsvcAddressBlock) SetDhcpOptions(v []IpamsvcOptionItem) {
	o.DhcpOptions = v
}

// GetDhcpUtilization returns the DhcpUtilization field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetDhcpUtilization() IpamsvcDHCPUtilization {
	if o == nil || IsNil(o.DhcpUtilization) {
		var ret IpamsvcDHCPUtilization
		return ret
	}
	return *o.DhcpUtilization
}

// GetDhcpUtilizationOk returns a tuple with the DhcpUtilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetDhcpUtilizationOk() (*IpamsvcDHCPUtilization, bool) {
	if o == nil || IsNil(o.DhcpUtilization) {
		return nil, false
	}
	return o.DhcpUtilization, true
}

// HasDhcpUtilization returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasDhcpUtilization() bool {
	if o != nil && !IsNil(o.DhcpUtilization) {
		return true
	}

	return false
}

// SetDhcpUtilization gets a reference to the given IpamsvcDHCPUtilization and assigns it to the DhcpUtilization field.
func (o *IpamsvcAddressBlock) SetDhcpUtilization(v IpamsvcDHCPUtilization) {
	o.DhcpUtilization = &v
}

// GetDiscoveryAttrs returns the DiscoveryAttrs field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetDiscoveryAttrs() map[string]interface{} {
	if o == nil || IsNil(o.DiscoveryAttrs) {
		var ret map[string]interface{}
		return ret
	}
	return o.DiscoveryAttrs
}

// GetDiscoveryAttrsOk returns a tuple with the DiscoveryAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetDiscoveryAttrsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DiscoveryAttrs) {
		return map[string]interface{}{}, false
	}
	return o.DiscoveryAttrs, true
}

// HasDiscoveryAttrs returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasDiscoveryAttrs() bool {
	if o != nil && !IsNil(o.DiscoveryAttrs) {
		return true
	}

	return false
}

// SetDiscoveryAttrs gets a reference to the given map[string]interface{} and assigns it to the DiscoveryAttrs field.
func (o *IpamsvcAddressBlock) SetDiscoveryAttrs(v map[string]interface{}) {
	o.DiscoveryAttrs = v
}

// GetDiscoveryMetadata returns the DiscoveryMetadata field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetDiscoveryMetadata() map[string]interface{} {
	if o == nil || IsNil(o.DiscoveryMetadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.DiscoveryMetadata
}

// GetDiscoveryMetadataOk returns a tuple with the DiscoveryMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetDiscoveryMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DiscoveryMetadata) {
		return map[string]interface{}{}, false
	}
	return o.DiscoveryMetadata, true
}

// HasDiscoveryMetadata returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasDiscoveryMetadata() bool {
	if o != nil && !IsNil(o.DiscoveryMetadata) {
		return true
	}

	return false
}

// SetDiscoveryMetadata gets a reference to the given map[string]interface{} and assigns it to the DiscoveryMetadata field.
func (o *IpamsvcAddressBlock) SetDiscoveryMetadata(v map[string]interface{}) {
	o.DiscoveryMetadata = v
}

// GetHeaderOptionFilename returns the HeaderOptionFilename field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetHeaderOptionFilename() string {
	if o == nil || IsNil(o.HeaderOptionFilename) {
		var ret string
		return ret
	}
	return *o.HeaderOptionFilename
}

// GetHeaderOptionFilenameOk returns a tuple with the HeaderOptionFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetHeaderOptionFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.HeaderOptionFilename) {
		return nil, false
	}
	return o.HeaderOptionFilename, true
}

// HasHeaderOptionFilename returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasHeaderOptionFilename() bool {
	if o != nil && !IsNil(o.HeaderOptionFilename) {
		return true
	}

	return false
}

// SetHeaderOptionFilename gets a reference to the given string and assigns it to the HeaderOptionFilename field.
func (o *IpamsvcAddressBlock) SetHeaderOptionFilename(v string) {
	o.HeaderOptionFilename = &v
}

// GetHeaderOptionServerAddress returns the HeaderOptionServerAddress field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetHeaderOptionServerAddress() string {
	if o == nil || IsNil(o.HeaderOptionServerAddress) {
		var ret string
		return ret
	}
	return *o.HeaderOptionServerAddress
}

// GetHeaderOptionServerAddressOk returns a tuple with the HeaderOptionServerAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetHeaderOptionServerAddressOk() (*string, bool) {
	if o == nil || IsNil(o.HeaderOptionServerAddress) {
		return nil, false
	}
	return o.HeaderOptionServerAddress, true
}

// HasHeaderOptionServerAddress returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasHeaderOptionServerAddress() bool {
	if o != nil && !IsNil(o.HeaderOptionServerAddress) {
		return true
	}

	return false
}

// SetHeaderOptionServerAddress gets a reference to the given string and assigns it to the HeaderOptionServerAddress field.
func (o *IpamsvcAddressBlock) SetHeaderOptionServerAddress(v string) {
	o.HeaderOptionServerAddress = &v
}

// GetHeaderOptionServerName returns the HeaderOptionServerName field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetHeaderOptionServerName() string {
	if o == nil || IsNil(o.HeaderOptionServerName) {
		var ret string
		return ret
	}
	return *o.HeaderOptionServerName
}

// GetHeaderOptionServerNameOk returns a tuple with the HeaderOptionServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetHeaderOptionServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.HeaderOptionServerName) {
		return nil, false
	}
	return o.HeaderOptionServerName, true
}

// HasHeaderOptionServerName returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasHeaderOptionServerName() bool {
	if o != nil && !IsNil(o.HeaderOptionServerName) {
		return true
	}

	return false
}

// SetHeaderOptionServerName gets a reference to the given string and assigns it to the HeaderOptionServerName field.
func (o *IpamsvcAddressBlock) SetHeaderOptionServerName(v string) {
	o.HeaderOptionServerName = &v
}

// GetHostnameRewriteChar returns the HostnameRewriteChar field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetHostnameRewriteChar() string {
	if o == nil || IsNil(o.HostnameRewriteChar) {
		var ret string
		return ret
	}
	return *o.HostnameRewriteChar
}

// GetHostnameRewriteCharOk returns a tuple with the HostnameRewriteChar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetHostnameRewriteCharOk() (*string, bool) {
	if o == nil || IsNil(o.HostnameRewriteChar) {
		return nil, false
	}
	return o.HostnameRewriteChar, true
}

// HasHostnameRewriteChar returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasHostnameRewriteChar() bool {
	if o != nil && !IsNil(o.HostnameRewriteChar) {
		return true
	}

	return false
}

// SetHostnameRewriteChar gets a reference to the given string and assigns it to the HostnameRewriteChar field.
func (o *IpamsvcAddressBlock) SetHostnameRewriteChar(v string) {
	o.HostnameRewriteChar = &v
}

// GetHostnameRewriteEnabled returns the HostnameRewriteEnabled field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetHostnameRewriteEnabled() bool {
	if o == nil || IsNil(o.HostnameRewriteEnabled) {
		var ret bool
		return ret
	}
	return *o.HostnameRewriteEnabled
}

// GetHostnameRewriteEnabledOk returns a tuple with the HostnameRewriteEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetHostnameRewriteEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.HostnameRewriteEnabled) {
		return nil, false
	}
	return o.HostnameRewriteEnabled, true
}

// HasHostnameRewriteEnabled returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasHostnameRewriteEnabled() bool {
	if o != nil && !IsNil(o.HostnameRewriteEnabled) {
		return true
	}

	return false
}

// SetHostnameRewriteEnabled gets a reference to the given bool and assigns it to the HostnameRewriteEnabled field.
func (o *IpamsvcAddressBlock) SetHostnameRewriteEnabled(v bool) {
	o.HostnameRewriteEnabled = &v
}

// GetHostnameRewriteRegex returns the HostnameRewriteRegex field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetHostnameRewriteRegex() string {
	if o == nil || IsNil(o.HostnameRewriteRegex) {
		var ret string
		return ret
	}
	return *o.HostnameRewriteRegex
}

// GetHostnameRewriteRegexOk returns a tuple with the HostnameRewriteRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetHostnameRewriteRegexOk() (*string, bool) {
	if o == nil || IsNil(o.HostnameRewriteRegex) {
		return nil, false
	}
	return o.HostnameRewriteRegex, true
}

// HasHostnameRewriteRegex returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasHostnameRewriteRegex() bool {
	if o != nil && !IsNil(o.HostnameRewriteRegex) {
		return true
	}

	return false
}

// SetHostnameRewriteRegex gets a reference to the given string and assigns it to the HostnameRewriteRegex field.
func (o *IpamsvcAddressBlock) SetHostnameRewriteRegex(v string) {
	o.HostnameRewriteRegex = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IpamsvcAddressBlock) SetId(v string) {
	o.Id = &v
}

// GetInheritanceParent returns the InheritanceParent field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetInheritanceParent() string {
	if o == nil || IsNil(o.InheritanceParent) {
		var ret string
		return ret
	}
	return *o.InheritanceParent
}

// GetInheritanceParentOk returns a tuple with the InheritanceParent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetInheritanceParentOk() (*string, bool) {
	if o == nil || IsNil(o.InheritanceParent) {
		return nil, false
	}
	return o.InheritanceParent, true
}

// HasInheritanceParent returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasInheritanceParent() bool {
	if o != nil && !IsNil(o.InheritanceParent) {
		return true
	}

	return false
}

// SetInheritanceParent gets a reference to the given string and assigns it to the InheritanceParent field.
func (o *IpamsvcAddressBlock) SetInheritanceParent(v string) {
	o.InheritanceParent = &v
}

// GetInheritanceSources returns the InheritanceSources field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetInheritanceSources() IpamsvcDHCPInheritance {
	if o == nil || IsNil(o.InheritanceSources) {
		var ret IpamsvcDHCPInheritance
		return ret
	}
	return *o.InheritanceSources
}

// GetInheritanceSourcesOk returns a tuple with the InheritanceSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetInheritanceSourcesOk() (*IpamsvcDHCPInheritance, bool) {
	if o == nil || IsNil(o.InheritanceSources) {
		return nil, false
	}
	return o.InheritanceSources, true
}

// HasInheritanceSources returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasInheritanceSources() bool {
	if o != nil && !IsNil(o.InheritanceSources) {
		return true
	}

	return false
}

// SetInheritanceSources gets a reference to the given IpamsvcDHCPInheritance and assigns it to the InheritanceSources field.
func (o *IpamsvcAddressBlock) SetInheritanceSources(v IpamsvcDHCPInheritance) {
	o.InheritanceSources = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IpamsvcAddressBlock) SetName(v string) {
	o.Name = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetParent() string {
	if o == nil || IsNil(o.Parent) {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetParentOk() (*string, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *IpamsvcAddressBlock) SetParent(v string) {
	o.Parent = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *IpamsvcAddressBlock) SetProtocol(v string) {
	o.Protocol = &v
}

// GetSpace returns the Space field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetSpace() string {
	if o == nil || IsNil(o.Space) {
		var ret string
		return ret
	}
	return *o.Space
}

// GetSpaceOk returns a tuple with the Space field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetSpaceOk() (*string, bool) {
	if o == nil || IsNil(o.Space) {
		return nil, false
	}
	return o.Space, true
}

// HasSpace returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasSpace() bool {
	if o != nil && !IsNil(o.Space) {
		return true
	}

	return false
}

// SetSpace gets a reference to the given string and assigns it to the Space field.
func (o *IpamsvcAddressBlock) SetSpace(v string) {
	o.Space = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *IpamsvcAddressBlock) SetTags(v map[string]interface{}) {
	o.Tags = v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetThreshold() IpamsvcUtilizationThreshold {
	if o == nil || IsNil(o.Threshold) {
		var ret IpamsvcUtilizationThreshold
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetThresholdOk() (*IpamsvcUtilizationThreshold, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given IpamsvcUtilizationThreshold and assigns it to the Threshold field.
func (o *IpamsvcAddressBlock) SetThreshold(v IpamsvcUtilizationThreshold) {
	o.Threshold = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *IpamsvcAddressBlock) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetUsage() []string {
	if o == nil || IsNil(o.Usage) {
		var ret []string
		return ret
	}
	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetUsageOk() ([]string, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given []string and assigns it to the Usage field.
func (o *IpamsvcAddressBlock) SetUsage(v []string) {
	o.Usage = v
}

// GetUtilization returns the Utilization field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetUtilization() IpamsvcUtilization {
	if o == nil || IsNil(o.Utilization) {
		var ret IpamsvcUtilization
		return ret
	}
	return *o.Utilization
}

// GetUtilizationOk returns a tuple with the Utilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetUtilizationOk() (*IpamsvcUtilization, bool) {
	if o == nil || IsNil(o.Utilization) {
		return nil, false
	}
	return o.Utilization, true
}

// HasUtilization returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasUtilization() bool {
	if o != nil && !IsNil(o.Utilization) {
		return true
	}

	return false
}

// SetUtilization gets a reference to the given IpamsvcUtilization and assigns it to the Utilization field.
func (o *IpamsvcAddressBlock) SetUtilization(v IpamsvcUtilization) {
	o.Utilization = &v
}

// GetUtilizationV6 returns the UtilizationV6 field value if set, zero value otherwise.
func (o *IpamsvcAddressBlock) GetUtilizationV6() IpamsvcUtilizationV6 {
	if o == nil || IsNil(o.UtilizationV6) {
		var ret IpamsvcUtilizationV6
		return ret
	}
	return *o.UtilizationV6
}

// GetUtilizationV6Ok returns a tuple with the UtilizationV6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcAddressBlock) GetUtilizationV6Ok() (*IpamsvcUtilizationV6, bool) {
	if o == nil || IsNil(o.UtilizationV6) {
		return nil, false
	}
	return o.UtilizationV6, true
}

// HasUtilizationV6 returns a boolean if a field has been set.
func (o *IpamsvcAddressBlock) HasUtilizationV6() bool {
	if o != nil && !IsNil(o.UtilizationV6) {
		return true
	}

	return false
}

// SetUtilizationV6 gets a reference to the given IpamsvcUtilizationV6 and assigns it to the UtilizationV6 field.
func (o *IpamsvcAddressBlock) SetUtilizationV6(v IpamsvcUtilizationV6) {
	o.UtilizationV6 = &v
}

func (o IpamsvcAddressBlock) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpamsvcAddressBlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.AsmConfig) {
		toSerialize["asm_config"] = o.AsmConfig
	}
	if !IsNil(o.AsmScopeFlag) {
		toSerialize["asm_scope_flag"] = o.AsmScopeFlag
	}
	if !IsNil(o.Cidr) {
		toSerialize["cidr"] = o.Cidr
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.DdnsClientUpdate) {
		toSerialize["ddns_client_update"] = o.DdnsClientUpdate
	}
	if !IsNil(o.DdnsConflictResolutionMode) {
		toSerialize["ddns_conflict_resolution_mode"] = o.DdnsConflictResolutionMode
	}
	if !IsNil(o.DdnsDomain) {
		toSerialize["ddns_domain"] = o.DdnsDomain
	}
	if !IsNil(o.DdnsGenerateName) {
		toSerialize["ddns_generate_name"] = o.DdnsGenerateName
	}
	if !IsNil(o.DdnsGeneratedPrefix) {
		toSerialize["ddns_generated_prefix"] = o.DdnsGeneratedPrefix
	}
	if !IsNil(o.DdnsSendUpdates) {
		toSerialize["ddns_send_updates"] = o.DdnsSendUpdates
	}
	if !IsNil(o.DdnsTtlPercent) {
		toSerialize["ddns_ttl_percent"] = o.DdnsTtlPercent
	}
	if !IsNil(o.DdnsUpdateOnRenew) {
		toSerialize["ddns_update_on_renew"] = o.DdnsUpdateOnRenew
	}
	if !IsNil(o.DdnsUseConflictResolution) {
		toSerialize["ddns_use_conflict_resolution"] = o.DdnsUseConflictResolution
	}
	if !IsNil(o.DhcpConfig) {
		toSerialize["dhcp_config"] = o.DhcpConfig
	}
	if !IsNil(o.DhcpOptions) {
		toSerialize["dhcp_options"] = o.DhcpOptions
	}
	if !IsNil(o.DhcpUtilization) {
		toSerialize["dhcp_utilization"] = o.DhcpUtilization
	}
	if !IsNil(o.DiscoveryAttrs) {
		toSerialize["discovery_attrs"] = o.DiscoveryAttrs
	}
	if !IsNil(o.DiscoveryMetadata) {
		toSerialize["discovery_metadata"] = o.DiscoveryMetadata
	}
	if !IsNil(o.HeaderOptionFilename) {
		toSerialize["header_option_filename"] = o.HeaderOptionFilename
	}
	if !IsNil(o.HeaderOptionServerAddress) {
		toSerialize["header_option_server_address"] = o.HeaderOptionServerAddress
	}
	if !IsNil(o.HeaderOptionServerName) {
		toSerialize["header_option_server_name"] = o.HeaderOptionServerName
	}
	if !IsNil(o.HostnameRewriteChar) {
		toSerialize["hostname_rewrite_char"] = o.HostnameRewriteChar
	}
	if !IsNil(o.HostnameRewriteEnabled) {
		toSerialize["hostname_rewrite_enabled"] = o.HostnameRewriteEnabled
	}
	if !IsNil(o.HostnameRewriteRegex) {
		toSerialize["hostname_rewrite_regex"] = o.HostnameRewriteRegex
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InheritanceParent) {
		toSerialize["inheritance_parent"] = o.InheritanceParent
	}
	if !IsNil(o.InheritanceSources) {
		toSerialize["inheritance_sources"] = o.InheritanceSources
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.Space) {
		toSerialize["space"] = o.Space
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	if !IsNil(o.Utilization) {
		toSerialize["utilization"] = o.Utilization
	}
	if !IsNil(o.UtilizationV6) {
		toSerialize["utilization_v6"] = o.UtilizationV6
	}
	return toSerialize, nil
}

type NullableIpamsvcAddressBlock struct {
	value *IpamsvcAddressBlock
	isSet bool
}

func (v NullableIpamsvcAddressBlock) Get() *IpamsvcAddressBlock {
	return v.value
}

func (v *NullableIpamsvcAddressBlock) Set(val *IpamsvcAddressBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamsvcAddressBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamsvcAddressBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamsvcAddressBlock(val *IpamsvcAddressBlock) *NullableIpamsvcAddressBlock {
	return &NullableIpamsvcAddressBlock{value: val, isSet: true}
}

func (v NullableIpamsvcAddressBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamsvcAddressBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
