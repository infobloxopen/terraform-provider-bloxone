/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the IpamsvcOptionFilterRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpamsvcOptionFilterRule{}

// IpamsvcOptionFilterRule An __OptionFilterRule__ object (_dhcp/option_filter_rule_) represents a filter rule to match a DHCP client.
type IpamsvcOptionFilterRule struct {
	// Indicates how to compare the _option_value_ to the client option.  Success by comparison:  * _equals_: value and client option are the same,  * _not_equals_: value and client option are not the same,  * _exists_: client option exists,  * _not_exists_: client option does not exist,  * _text_substring_: value is the specified substring of the option,  * _not_text_substring_: value is not the specified substring of the option.  * _hex_substring_: value is the specified hexadecimal substring of the option,  * _not_hex_substring_: value is not the specified hexadecimal substring of the option.
	Compare string `json:"compare"`
	// The resource identifier.
	OptionCode string `json:"option_code"`
	// The value to match against.
	OptionValue *string `json:"option_value,omitempty"`
	// The offset where the substring match starts. This is used only if comparing the _option_value_ using any of the substring modes.
	SubstringOffset *int64 `json:"substring_offset,omitempty"`
}

// NewIpamsvcOptionFilterRule instantiates a new IpamsvcOptionFilterRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpamsvcOptionFilterRule(compare string, optionCode string) *IpamsvcOptionFilterRule {
	this := IpamsvcOptionFilterRule{}
	this.Compare = compare
	this.OptionCode = optionCode
	return &this
}

// NewIpamsvcOptionFilterRuleWithDefaults instantiates a new IpamsvcOptionFilterRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpamsvcOptionFilterRuleWithDefaults() *IpamsvcOptionFilterRule {
	this := IpamsvcOptionFilterRule{}
	return &this
}

// GetCompare returns the Compare field value
func (o *IpamsvcOptionFilterRule) GetCompare() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Compare
}

// GetCompareOk returns a tuple with the Compare field value
// and a boolean to check if the value has been set.
func (o *IpamsvcOptionFilterRule) GetCompareOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Compare, true
}

// SetCompare sets field value
func (o *IpamsvcOptionFilterRule) SetCompare(v string) {
	o.Compare = v
}

// GetOptionCode returns the OptionCode field value
func (o *IpamsvcOptionFilterRule) GetOptionCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OptionCode
}

// GetOptionCodeOk returns a tuple with the OptionCode field value
// and a boolean to check if the value has been set.
func (o *IpamsvcOptionFilterRule) GetOptionCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OptionCode, true
}

// SetOptionCode sets field value
func (o *IpamsvcOptionFilterRule) SetOptionCode(v string) {
	o.OptionCode = v
}

// GetOptionValue returns the OptionValue field value if set, zero value otherwise.
func (o *IpamsvcOptionFilterRule) GetOptionValue() string {
	if o == nil || IsNil(o.OptionValue) {
		var ret string
		return ret
	}
	return *o.OptionValue
}

// GetOptionValueOk returns a tuple with the OptionValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcOptionFilterRule) GetOptionValueOk() (*string, bool) {
	if o == nil || IsNil(o.OptionValue) {
		return nil, false
	}
	return o.OptionValue, true
}

// HasOptionValue returns a boolean if a field has been set.
func (o *IpamsvcOptionFilterRule) HasOptionValue() bool {
	if o != nil && !IsNil(o.OptionValue) {
		return true
	}

	return false
}

// SetOptionValue gets a reference to the given string and assigns it to the OptionValue field.
func (o *IpamsvcOptionFilterRule) SetOptionValue(v string) {
	o.OptionValue = &v
}

// GetSubstringOffset returns the SubstringOffset field value if set, zero value otherwise.
func (o *IpamsvcOptionFilterRule) GetSubstringOffset() int64 {
	if o == nil || IsNil(o.SubstringOffset) {
		var ret int64
		return ret
	}
	return *o.SubstringOffset
}

// GetSubstringOffsetOk returns a tuple with the SubstringOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcOptionFilterRule) GetSubstringOffsetOk() (*int64, bool) {
	if o == nil || IsNil(o.SubstringOffset) {
		return nil, false
	}
	return o.SubstringOffset, true
}

// HasSubstringOffset returns a boolean if a field has been set.
func (o *IpamsvcOptionFilterRule) HasSubstringOffset() bool {
	if o != nil && !IsNil(o.SubstringOffset) {
		return true
	}

	return false
}

// SetSubstringOffset gets a reference to the given int64 and assigns it to the SubstringOffset field.
func (o *IpamsvcOptionFilterRule) SetSubstringOffset(v int64) {
	o.SubstringOffset = &v
}

func (o IpamsvcOptionFilterRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpamsvcOptionFilterRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["compare"] = o.Compare
	toSerialize["option_code"] = o.OptionCode
	if !IsNil(o.OptionValue) {
		toSerialize["option_value"] = o.OptionValue
	}
	if !IsNil(o.SubstringOffset) {
		toSerialize["substring_offset"] = o.SubstringOffset
	}
	return toSerialize, nil
}

type NullableIpamsvcOptionFilterRule struct {
	value *IpamsvcOptionFilterRule
	isSet bool
}

func (v NullableIpamsvcOptionFilterRule) Get() *IpamsvcOptionFilterRule {
	return v.value
}

func (v *NullableIpamsvcOptionFilterRule) Set(val *IpamsvcOptionFilterRule) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamsvcOptionFilterRule) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamsvcOptionFilterRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamsvcOptionFilterRule(val *IpamsvcOptionFilterRule) *NullableIpamsvcOptionFilterRule {
	return &NullableIpamsvcOptionFilterRule{value: val, isSet: true}
}

func (v NullableIpamsvcOptionFilterRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamsvcOptionFilterRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
