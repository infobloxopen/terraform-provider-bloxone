/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"github.com/infobloxopen/bloxone-go-client/internal"
	"github.com/infobloxopen/bloxone-go-client/option"
)

const serviceBasePath = "/api/ddi/v1"

// APIClient manages communication with the IP Address Management API v1
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
	*internal.APIClient

	// API Services
	AddressAPI        AddressAPI
	AddressBlockAPI   AddressBlockAPI
	AsmAPI            AsmAPI
	DhcpHostAPI       DhcpHostAPI
	DnsUsageAPI       DnsUsageAPI
	FilterAPI         FilterAPI
	FixedAddressAPI   FixedAddressAPI
	GlobalAPI         GlobalAPI
	HaGroupAPI        HaGroupAPI
	HardwareFilterAPI HardwareFilterAPI
	IpSpaceAPI        IpSpaceAPI
	IpamHostAPI       IpamHostAPI
	LeasesCommandAPI  LeasesCommandAPI
	OptionCodeAPI     OptionCodeAPI
	OptionFilterAPI   OptionFilterAPI
	OptionGroupAPI    OptionGroupAPI
	OptionSpaceAPI    OptionSpaceAPI
	RangeAPI          RangeAPI
	ServerAPI         ServerAPI
	SubnetAPI         SubnetAPI
}

// NewAPIClient creates a new API client.
// The client can be configured with a variadic option. The following options are available:
// - WithClientName(string) sets the name of the client using the SDK.
// - WithCSPUrl(string) sets the URL for BloxOne Cloud Services Portal.
// - WithAPIKey(string) sets the APIKey for accessing the BloxOne API.
// - WithHTTPClient(*http.Client) sets the HTTPClient to use for the SDK.
// - WithDefaultTags(map[string]string) sets the tags the client can set by default for objects that has tags support.
// - WithDebug() sets the debug mode.
func NewAPIClient(options ...option.ClientOption) *APIClient {
	cfg := internal.NewConfiguration()
	for _, o := range options {
		o(cfg)
	}

	c := &APIClient{}
	c.APIClient = internal.NewAPIClient(serviceBasePath, cfg)

	// API Services
	c.AddressAPI = (*AddressAPIService)(&c.Common)
	c.AddressBlockAPI = (*AddressBlockAPIService)(&c.Common)
	c.AsmAPI = (*AsmAPIService)(&c.Common)
	c.DhcpHostAPI = (*DhcpHostAPIService)(&c.Common)
	c.DnsUsageAPI = (*DnsUsageAPIService)(&c.Common)
	c.FilterAPI = (*FilterAPIService)(&c.Common)
	c.FixedAddressAPI = (*FixedAddressAPIService)(&c.Common)
	c.GlobalAPI = (*GlobalAPIService)(&c.Common)
	c.HaGroupAPI = (*HaGroupAPIService)(&c.Common)
	c.HardwareFilterAPI = (*HardwareFilterAPIService)(&c.Common)
	c.IpSpaceAPI = (*IpSpaceAPIService)(&c.Common)
	c.IpamHostAPI = (*IpamHostAPIService)(&c.Common)
	c.LeasesCommandAPI = (*LeasesCommandAPIService)(&c.Common)
	c.OptionCodeAPI = (*OptionCodeAPIService)(&c.Common)
	c.OptionFilterAPI = (*OptionFilterAPIService)(&c.Common)
	c.OptionGroupAPI = (*OptionGroupAPIService)(&c.Common)
	c.OptionSpaceAPI = (*OptionSpaceAPIService)(&c.Common)
	c.RangeAPI = (*RangeAPIService)(&c.Common)
	c.ServerAPI = (*ServerAPIService)(&c.Common)
	c.SubnetAPI = (*SubnetAPIService)(&c.Common)

	return c
}
