/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the UtilizationV6 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UtilizationV6{}

// UtilizationV6 The __UtilizationV6__ object represents IPV6 address usage statistics for an object.
type UtilizationV6 struct {
	Abandoned            *string `json:"abandoned,omitempty"`
	Dynamic              *string `json:"dynamic,omitempty"`
	Static               *string `json:"static,omitempty"`
	Total                *string `json:"total,omitempty"`
	Used                 *string `json:"used,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UtilizationV6 UtilizationV6

// NewUtilizationV6 instantiates a new UtilizationV6 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUtilizationV6() *UtilizationV6 {
	this := UtilizationV6{}
	return &this
}

// NewUtilizationV6WithDefaults instantiates a new UtilizationV6 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUtilizationV6WithDefaults() *UtilizationV6 {
	this := UtilizationV6{}
	return &this
}

// GetAbandoned returns the Abandoned field value if set, zero value otherwise.
func (o *UtilizationV6) GetAbandoned() string {
	if o == nil || IsNil(o.Abandoned) {
		var ret string
		return ret
	}
	return *o.Abandoned
}

// GetAbandonedOk returns a tuple with the Abandoned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilizationV6) GetAbandonedOk() (*string, bool) {
	if o == nil || IsNil(o.Abandoned) {
		return nil, false
	}
	return o.Abandoned, true
}

// HasAbandoned returns a boolean if a field has been set.
func (o *UtilizationV6) HasAbandoned() bool {
	if o != nil && !IsNil(o.Abandoned) {
		return true
	}

	return false
}

// SetAbandoned gets a reference to the given string and assigns it to the Abandoned field.
func (o *UtilizationV6) SetAbandoned(v string) {
	o.Abandoned = &v
}

// GetDynamic returns the Dynamic field value if set, zero value otherwise.
func (o *UtilizationV6) GetDynamic() string {
	if o == nil || IsNil(o.Dynamic) {
		var ret string
		return ret
	}
	return *o.Dynamic
}

// GetDynamicOk returns a tuple with the Dynamic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilizationV6) GetDynamicOk() (*string, bool) {
	if o == nil || IsNil(o.Dynamic) {
		return nil, false
	}
	return o.Dynamic, true
}

// HasDynamic returns a boolean if a field has been set.
func (o *UtilizationV6) HasDynamic() bool {
	if o != nil && !IsNil(o.Dynamic) {
		return true
	}

	return false
}

// SetDynamic gets a reference to the given string and assigns it to the Dynamic field.
func (o *UtilizationV6) SetDynamic(v string) {
	o.Dynamic = &v
}

// GetStatic returns the Static field value if set, zero value otherwise.
func (o *UtilizationV6) GetStatic() string {
	if o == nil || IsNil(o.Static) {
		var ret string
		return ret
	}
	return *o.Static
}

// GetStaticOk returns a tuple with the Static field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilizationV6) GetStaticOk() (*string, bool) {
	if o == nil || IsNil(o.Static) {
		return nil, false
	}
	return o.Static, true
}

// HasStatic returns a boolean if a field has been set.
func (o *UtilizationV6) HasStatic() bool {
	if o != nil && !IsNil(o.Static) {
		return true
	}

	return false
}

// SetStatic gets a reference to the given string and assigns it to the Static field.
func (o *UtilizationV6) SetStatic(v string) {
	o.Static = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *UtilizationV6) GetTotal() string {
	if o == nil || IsNil(o.Total) {
		var ret string
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilizationV6) GetTotalOk() (*string, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *UtilizationV6) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given string and assigns it to the Total field.
func (o *UtilizationV6) SetTotal(v string) {
	o.Total = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *UtilizationV6) GetUsed() string {
	if o == nil || IsNil(o.Used) {
		var ret string
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilizationV6) GetUsedOk() (*string, bool) {
	if o == nil || IsNil(o.Used) {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *UtilizationV6) HasUsed() bool {
	if o != nil && !IsNil(o.Used) {
		return true
	}

	return false
}

// SetUsed gets a reference to the given string and assigns it to the Used field.
func (o *UtilizationV6) SetUsed(v string) {
	o.Used = &v
}

func (o UtilizationV6) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UtilizationV6) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Abandoned) {
		toSerialize["abandoned"] = o.Abandoned
	}
	if !IsNil(o.Dynamic) {
		toSerialize["dynamic"] = o.Dynamic
	}
	if !IsNil(o.Static) {
		toSerialize["static"] = o.Static
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Used) {
		toSerialize["used"] = o.Used
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UtilizationV6) UnmarshalJSON(data []byte) (err error) {
	varUtilizationV6 := _UtilizationV6{}

	err = json.Unmarshal(data, &varUtilizationV6)

	if err != nil {
		return err
	}

	*o = UtilizationV6(varUtilizationV6)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "abandoned")
		delete(additionalProperties, "dynamic")
		delete(additionalProperties, "static")
		delete(additionalProperties, "total")
		delete(additionalProperties, "used")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUtilizationV6 struct {
	value *UtilizationV6
	isSet bool
}

func (v NullableUtilizationV6) Get() *UtilizationV6 {
	return v.value
}

func (v *NullableUtilizationV6) Set(val *UtilizationV6) {
	v.value = val
	v.isSet = true
}

func (v NullableUtilizationV6) IsSet() bool {
	return v.isSet
}

func (v *NullableUtilizationV6) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUtilizationV6(val *UtilizationV6) *NullableUtilizationV6 {
	return &NullableUtilizationV6{value: val, isSet: true}
}

func (v NullableUtilizationV6) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUtilizationV6) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
