/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"fmt"
)

// checks if the DDNSZone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DDNSZone{}

// DDNSZone A __DDNSZone__ object (_dhcp/ddns_zone_) represents a DNS zone that can accept dynamic DNS updates from DHCP.
type DDNSZone struct {
	// Zone FQDN.  If _zone_ is defined, the _fqdn_ field must be empty.
	Fqdn *string `json:"fqdn,omitempty"`
	// _gss_tsig_enabled_ enables/disables GSS-TSIG signed dynamic updates.  Defaults to _false_.
	GssTsigEnabled *bool `json:"gss_tsig_enabled,omitempty"`
	// The Nameservers in the zone.  Each nameserver IP should be unique across the list of nameservers.
	Nameservers []Nameserver `json:"nameservers,omitempty"`
	// Indicates if TSIG key should be used for the update.  Defaults to _false_.
	TsigEnabled *bool    `json:"tsig_enabled,omitempty"`
	TsigKey     *TSIGKey `json:"tsig_key,omitempty"`
	// The resource identifier.
	View *string `json:"view,omitempty"`
	// The name of the view.
	ViewName *string `json:"view_name,omitempty"`
	// The resource identifier.
	Zone                 string `json:"zone"`
	AdditionalProperties map[string]interface{}
}

type _DDNSZone DDNSZone

// NewDDNSZone instantiates a new DDNSZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDDNSZone(zone string) *DDNSZone {
	this := DDNSZone{}
	this.Zone = zone
	return &this
}

// NewDDNSZoneWithDefaults instantiates a new DDNSZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDDNSZoneWithDefaults() *DDNSZone {
	this := DDNSZone{}
	return &this
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise.
func (o *DDNSZone) GetFqdn() string {
	if o == nil || IsNil(o.Fqdn) {
		var ret string
		return ret
	}
	return *o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DDNSZone) GetFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.Fqdn) {
		return nil, false
	}
	return o.Fqdn, true
}

// HasFqdn returns a boolean if a field has been set.
func (o *DDNSZone) HasFqdn() bool {
	if o != nil && !IsNil(o.Fqdn) {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given string and assigns it to the Fqdn field.
func (o *DDNSZone) SetFqdn(v string) {
	o.Fqdn = &v
}

// GetGssTsigEnabled returns the GssTsigEnabled field value if set, zero value otherwise.
func (o *DDNSZone) GetGssTsigEnabled() bool {
	if o == nil || IsNil(o.GssTsigEnabled) {
		var ret bool
		return ret
	}
	return *o.GssTsigEnabled
}

// GetGssTsigEnabledOk returns a tuple with the GssTsigEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DDNSZone) GetGssTsigEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.GssTsigEnabled) {
		return nil, false
	}
	return o.GssTsigEnabled, true
}

// HasGssTsigEnabled returns a boolean if a field has been set.
func (o *DDNSZone) HasGssTsigEnabled() bool {
	if o != nil && !IsNil(o.GssTsigEnabled) {
		return true
	}

	return false
}

// SetGssTsigEnabled gets a reference to the given bool and assigns it to the GssTsigEnabled field.
func (o *DDNSZone) SetGssTsigEnabled(v bool) {
	o.GssTsigEnabled = &v
}

// GetNameservers returns the Nameservers field value if set, zero value otherwise.
func (o *DDNSZone) GetNameservers() []Nameserver {
	if o == nil || IsNil(o.Nameservers) {
		var ret []Nameserver
		return ret
	}
	return o.Nameservers
}

// GetNameserversOk returns a tuple with the Nameservers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DDNSZone) GetNameserversOk() ([]Nameserver, bool) {
	if o == nil || IsNil(o.Nameservers) {
		return nil, false
	}
	return o.Nameservers, true
}

// HasNameservers returns a boolean if a field has been set.
func (o *DDNSZone) HasNameservers() bool {
	if o != nil && !IsNil(o.Nameservers) {
		return true
	}

	return false
}

// SetNameservers gets a reference to the given []Nameserver and assigns it to the Nameservers field.
func (o *DDNSZone) SetNameservers(v []Nameserver) {
	o.Nameservers = v
}

// GetTsigEnabled returns the TsigEnabled field value if set, zero value otherwise.
func (o *DDNSZone) GetTsigEnabled() bool {
	if o == nil || IsNil(o.TsigEnabled) {
		var ret bool
		return ret
	}
	return *o.TsigEnabled
}

// GetTsigEnabledOk returns a tuple with the TsigEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DDNSZone) GetTsigEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.TsigEnabled) {
		return nil, false
	}
	return o.TsigEnabled, true
}

// HasTsigEnabled returns a boolean if a field has been set.
func (o *DDNSZone) HasTsigEnabled() bool {
	if o != nil && !IsNil(o.TsigEnabled) {
		return true
	}

	return false
}

// SetTsigEnabled gets a reference to the given bool and assigns it to the TsigEnabled field.
func (o *DDNSZone) SetTsigEnabled(v bool) {
	o.TsigEnabled = &v
}

// GetTsigKey returns the TsigKey field value if set, zero value otherwise.
func (o *DDNSZone) GetTsigKey() TSIGKey {
	if o == nil || IsNil(o.TsigKey) {
		var ret TSIGKey
		return ret
	}
	return *o.TsigKey
}

// GetTsigKeyOk returns a tuple with the TsigKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DDNSZone) GetTsigKeyOk() (*TSIGKey, bool) {
	if o == nil || IsNil(o.TsigKey) {
		return nil, false
	}
	return o.TsigKey, true
}

// HasTsigKey returns a boolean if a field has been set.
func (o *DDNSZone) HasTsigKey() bool {
	if o != nil && !IsNil(o.TsigKey) {
		return true
	}

	return false
}

// SetTsigKey gets a reference to the given TSIGKey and assigns it to the TsigKey field.
func (o *DDNSZone) SetTsigKey(v TSIGKey) {
	o.TsigKey = &v
}

// GetView returns the View field value if set, zero value otherwise.
func (o *DDNSZone) GetView() string {
	if o == nil || IsNil(o.View) {
		var ret string
		return ret
	}
	return *o.View
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DDNSZone) GetViewOk() (*string, bool) {
	if o == nil || IsNil(o.View) {
		return nil, false
	}
	return o.View, true
}

// HasView returns a boolean if a field has been set.
func (o *DDNSZone) HasView() bool {
	if o != nil && !IsNil(o.View) {
		return true
	}

	return false
}

// SetView gets a reference to the given string and assigns it to the View field.
func (o *DDNSZone) SetView(v string) {
	o.View = &v
}

// GetViewName returns the ViewName field value if set, zero value otherwise.
func (o *DDNSZone) GetViewName() string {
	if o == nil || IsNil(o.ViewName) {
		var ret string
		return ret
	}
	return *o.ViewName
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DDNSZone) GetViewNameOk() (*string, bool) {
	if o == nil || IsNil(o.ViewName) {
		return nil, false
	}
	return o.ViewName, true
}

// HasViewName returns a boolean if a field has been set.
func (o *DDNSZone) HasViewName() bool {
	if o != nil && !IsNil(o.ViewName) {
		return true
	}

	return false
}

// SetViewName gets a reference to the given string and assigns it to the ViewName field.
func (o *DDNSZone) SetViewName(v string) {
	o.ViewName = &v
}

// GetZone returns the Zone field value
func (o *DDNSZone) GetZone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Zone
}

// GetZoneOk returns a tuple with the Zone field value
// and a boolean to check if the value has been set.
func (o *DDNSZone) GetZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Zone, true
}

// SetZone sets field value
func (o *DDNSZone) SetZone(v string) {
	o.Zone = v
}

func (o DDNSZone) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DDNSZone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fqdn) {
		toSerialize["fqdn"] = o.Fqdn
	}
	if !IsNil(o.GssTsigEnabled) {
		toSerialize["gss_tsig_enabled"] = o.GssTsigEnabled
	}
	if !IsNil(o.Nameservers) {
		toSerialize["nameservers"] = o.Nameservers
	}
	if !IsNil(o.TsigEnabled) {
		toSerialize["tsig_enabled"] = o.TsigEnabled
	}
	if !IsNil(o.TsigKey) {
		toSerialize["tsig_key"] = o.TsigKey
	}
	if !IsNil(o.View) {
		toSerialize["view"] = o.View
	}
	if !IsNil(o.ViewName) {
		toSerialize["view_name"] = o.ViewName
	}
	toSerialize["zone"] = o.Zone

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DDNSZone) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"zone",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDDNSZone := _DDNSZone{}

	err = json.Unmarshal(data, &varDDNSZone)

	if err != nil {
		return err
	}

	*o = DDNSZone(varDDNSZone)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "fqdn")
		delete(additionalProperties, "gss_tsig_enabled")
		delete(additionalProperties, "nameservers")
		delete(additionalProperties, "tsig_enabled")
		delete(additionalProperties, "tsig_key")
		delete(additionalProperties, "view")
		delete(additionalProperties, "view_name")
		delete(additionalProperties, "zone")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDDNSZone struct {
	value *DDNSZone
	isSet bool
}

func (v NullableDDNSZone) Get() *DDNSZone {
	return v.value
}

func (v *NullableDDNSZone) Set(val *DDNSZone) {
	v.value = val
	v.isSet = true
}

func (v NullableDDNSZone) IsSet() bool {
	return v.isSet
}

func (v *NullableDDNSZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDDNSZone(val *DDNSZone) *NullableDDNSZone {
	return &NullableDDNSZone{value: val, isSet: true}
}

func (v NullableDDNSZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDDNSZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
