/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the CidrBlock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CidrBlock{}

// CidrBlock struct for CidrBlock
type CidrBlock struct {
	// The address part of the CidrBlock.
	Address *string `json:"address,omitempty"`
	// The CIDR part of the CidrBlock.
	Cidr *int64 `json:"cidr,omitempty"`
	// Reserved for future use.
	FederatedRealms []string `json:"federated_realms,omitempty"`
	// The resource identifier.
	Id *string `json:"id,omitempty"`
	// The resource identifier.
	Parent *string `json:"parent,omitempty"`
	// The resource identifier.
	Space                *string `json:"space,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CidrBlock CidrBlock

// NewCidrBlock instantiates a new CidrBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCidrBlock() *CidrBlock {
	this := CidrBlock{}
	return &this
}

// NewCidrBlockWithDefaults instantiates a new CidrBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCidrBlockWithDefaults() *CidrBlock {
	this := CidrBlock{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *CidrBlock) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CidrBlock) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *CidrBlock) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *CidrBlock) SetAddress(v string) {
	o.Address = &v
}

// GetCidr returns the Cidr field value if set, zero value otherwise.
func (o *CidrBlock) GetCidr() int64 {
	if o == nil || IsNil(o.Cidr) {
		var ret int64
		return ret
	}
	return *o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CidrBlock) GetCidrOk() (*int64, bool) {
	if o == nil || IsNil(o.Cidr) {
		return nil, false
	}
	return o.Cidr, true
}

// HasCidr returns a boolean if a field has been set.
func (o *CidrBlock) HasCidr() bool {
	if o != nil && !IsNil(o.Cidr) {
		return true
	}

	return false
}

// SetCidr gets a reference to the given int64 and assigns it to the Cidr field.
func (o *CidrBlock) SetCidr(v int64) {
	o.Cidr = &v
}

// GetFederatedRealms returns the FederatedRealms field value if set, zero value otherwise.
func (o *CidrBlock) GetFederatedRealms() []string {
	if o == nil || IsNil(o.FederatedRealms) {
		var ret []string
		return ret
	}
	return o.FederatedRealms
}

// GetFederatedRealmsOk returns a tuple with the FederatedRealms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CidrBlock) GetFederatedRealmsOk() ([]string, bool) {
	if o == nil || IsNil(o.FederatedRealms) {
		return nil, false
	}
	return o.FederatedRealms, true
}

// HasFederatedRealms returns a boolean if a field has been set.
func (o *CidrBlock) HasFederatedRealms() bool {
	if o != nil && !IsNil(o.FederatedRealms) {
		return true
	}

	return false
}

// SetFederatedRealms gets a reference to the given []string and assigns it to the FederatedRealms field.
func (o *CidrBlock) SetFederatedRealms(v []string) {
	o.FederatedRealms = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CidrBlock) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CidrBlock) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CidrBlock) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CidrBlock) SetId(v string) {
	o.Id = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *CidrBlock) GetParent() string {
	if o == nil || IsNil(o.Parent) {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CidrBlock) GetParentOk() (*string, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *CidrBlock) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *CidrBlock) SetParent(v string) {
	o.Parent = &v
}

// GetSpace returns the Space field value if set, zero value otherwise.
func (o *CidrBlock) GetSpace() string {
	if o == nil || IsNil(o.Space) {
		var ret string
		return ret
	}
	return *o.Space
}

// GetSpaceOk returns a tuple with the Space field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CidrBlock) GetSpaceOk() (*string, bool) {
	if o == nil || IsNil(o.Space) {
		return nil, false
	}
	return o.Space, true
}

// HasSpace returns a boolean if a field has been set.
func (o *CidrBlock) HasSpace() bool {
	if o != nil && !IsNil(o.Space) {
		return true
	}

	return false
}

// SetSpace gets a reference to the given string and assigns it to the Space field.
func (o *CidrBlock) SetSpace(v string) {
	o.Space = &v
}

func (o CidrBlock) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CidrBlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Cidr) {
		toSerialize["cidr"] = o.Cidr
	}
	if !IsNil(o.FederatedRealms) {
		toSerialize["federated_realms"] = o.FederatedRealms
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Space) {
		toSerialize["space"] = o.Space
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CidrBlock) UnmarshalJSON(data []byte) (err error) {
	varCidrBlock := _CidrBlock{}

	err = json.Unmarshal(data, &varCidrBlock)

	if err != nil {
		return err
	}

	*o = CidrBlock(varCidrBlock)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "cidr")
		delete(additionalProperties, "federated_realms")
		delete(additionalProperties, "id")
		delete(additionalProperties, "parent")
		delete(additionalProperties, "space")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCidrBlock struct {
	value *CidrBlock
	isSet bool
}

func (v NullableCidrBlock) Get() *CidrBlock {
	return v.value
}

func (v *NullableCidrBlock) Set(val *CidrBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableCidrBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableCidrBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCidrBlock(val *CidrBlock) *NullableCidrBlock {
	return &NullableCidrBlock{value: val, isSet: true}
}

func (v NullableCidrBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCidrBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
