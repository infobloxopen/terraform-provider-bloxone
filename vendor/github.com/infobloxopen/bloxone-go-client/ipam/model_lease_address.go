/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the LeaseAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LeaseAddress{}

// LeaseAddress struct for LeaseAddress
type LeaseAddress struct {
	// The IP address for the DHCP lease in IPv4 or IPv6 format within the IP space specified by _space_ field.
	Address *string `json:"address,omitempty"`
	// The resource identifier.
	Space                *string `json:"space,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LeaseAddress LeaseAddress

// NewLeaseAddress instantiates a new LeaseAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeaseAddress() *LeaseAddress {
	this := LeaseAddress{}
	return &this
}

// NewLeaseAddressWithDefaults instantiates a new LeaseAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLeaseAddressWithDefaults() *LeaseAddress {
	this := LeaseAddress{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *LeaseAddress) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeaseAddress) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *LeaseAddress) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *LeaseAddress) SetAddress(v string) {
	o.Address = &v
}

// GetSpace returns the Space field value if set, zero value otherwise.
func (o *LeaseAddress) GetSpace() string {
	if o == nil || IsNil(o.Space) {
		var ret string
		return ret
	}
	return *o.Space
}

// GetSpaceOk returns a tuple with the Space field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeaseAddress) GetSpaceOk() (*string, bool) {
	if o == nil || IsNil(o.Space) {
		return nil, false
	}
	return o.Space, true
}

// HasSpace returns a boolean if a field has been set.
func (o *LeaseAddress) HasSpace() bool {
	if o != nil && !IsNil(o.Space) {
		return true
	}

	return false
}

// SetSpace gets a reference to the given string and assigns it to the Space field.
func (o *LeaseAddress) SetSpace(v string) {
	o.Space = &v
}

func (o LeaseAddress) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LeaseAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Space) {
		toSerialize["space"] = o.Space
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LeaseAddress) UnmarshalJSON(data []byte) (err error) {
	varLeaseAddress := _LeaseAddress{}

	err = json.Unmarshal(data, &varLeaseAddress)

	if err != nil {
		return err
	}

	*o = LeaseAddress(varLeaseAddress)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "space")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLeaseAddress struct {
	value *LeaseAddress
	isSet bool
}

func (v NullableLeaseAddress) Get() *LeaseAddress {
	return v.value
}

func (v *NullableLeaseAddress) Set(val *LeaseAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableLeaseAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableLeaseAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeaseAddress(val *LeaseAddress) *NullableLeaseAddress {
	return &NullableLeaseAddress{value: val, isSet: true}
}

func (v NullableLeaseAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeaseAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
