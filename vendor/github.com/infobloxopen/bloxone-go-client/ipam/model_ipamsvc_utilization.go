/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the IpamsvcUtilization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpamsvcUtilization{}

// IpamsvcUtilization The __Utilization__ object represents IP address usage statistics for an object.
type IpamsvcUtilization struct {
	// The percentage of abandoned IP addresses relative to the total IP addresses available in the scope of the object.
	AbandonUtilization *int64 `json:"abandon_utilization,omitempty"`
	// The number of IP addresses in the scope of the object which are in the abandoned state (issued by a DHCP server and then declined by the client).
	Abandoned *string `json:"abandoned,omitempty"`
	// The number of IP addresses handed out by DHCP in the scope of the object. This includes all leased addresses, fixed addresses that are defined but not currently leased and abandoned leases.
	Dynamic *string `json:"dynamic,omitempty"`
	// The number of IP addresses available in the scope of the object.
	Free *string `json:"free,omitempty"`
	// The number of defined IP addresses such as reservations or DNS records. It can be computed as _static_ = _used_ - _dynamic_.
	Static *string `json:"static,omitempty"`
	// The total number of IP addresses available in the scope of the object.
	Total *string `json:"total,omitempty"`
	// The number of IP addresses used in the scope of the object.
	Used *string `json:"used,omitempty"`
	// The percentage of used IP addresses relative to the total IP addresses available in the scope of the object.
	Utilization *int64 `json:"utilization,omitempty"`
}

// NewIpamsvcUtilization instantiates a new IpamsvcUtilization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpamsvcUtilization() *IpamsvcUtilization {
	this := IpamsvcUtilization{}
	return &this
}

// NewIpamsvcUtilizationWithDefaults instantiates a new IpamsvcUtilization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpamsvcUtilizationWithDefaults() *IpamsvcUtilization {
	this := IpamsvcUtilization{}
	return &this
}

// GetAbandonUtilization returns the AbandonUtilization field value if set, zero value otherwise.
func (o *IpamsvcUtilization) GetAbandonUtilization() int64 {
	if o == nil || IsNil(o.AbandonUtilization) {
		var ret int64
		return ret
	}
	return *o.AbandonUtilization
}

// GetAbandonUtilizationOk returns a tuple with the AbandonUtilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcUtilization) GetAbandonUtilizationOk() (*int64, bool) {
	if o == nil || IsNil(o.AbandonUtilization) {
		return nil, false
	}
	return o.AbandonUtilization, true
}

// HasAbandonUtilization returns a boolean if a field has been set.
func (o *IpamsvcUtilization) HasAbandonUtilization() bool {
	if o != nil && !IsNil(o.AbandonUtilization) {
		return true
	}

	return false
}

// SetAbandonUtilization gets a reference to the given int64 and assigns it to the AbandonUtilization field.
func (o *IpamsvcUtilization) SetAbandonUtilization(v int64) {
	o.AbandonUtilization = &v
}

// GetAbandoned returns the Abandoned field value if set, zero value otherwise.
func (o *IpamsvcUtilization) GetAbandoned() string {
	if o == nil || IsNil(o.Abandoned) {
		var ret string
		return ret
	}
	return *o.Abandoned
}

// GetAbandonedOk returns a tuple with the Abandoned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcUtilization) GetAbandonedOk() (*string, bool) {
	if o == nil || IsNil(o.Abandoned) {
		return nil, false
	}
	return o.Abandoned, true
}

// HasAbandoned returns a boolean if a field has been set.
func (o *IpamsvcUtilization) HasAbandoned() bool {
	if o != nil && !IsNil(o.Abandoned) {
		return true
	}

	return false
}

// SetAbandoned gets a reference to the given string and assigns it to the Abandoned field.
func (o *IpamsvcUtilization) SetAbandoned(v string) {
	o.Abandoned = &v
}

// GetDynamic returns the Dynamic field value if set, zero value otherwise.
func (o *IpamsvcUtilization) GetDynamic() string {
	if o == nil || IsNil(o.Dynamic) {
		var ret string
		return ret
	}
	return *o.Dynamic
}

// GetDynamicOk returns a tuple with the Dynamic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcUtilization) GetDynamicOk() (*string, bool) {
	if o == nil || IsNil(o.Dynamic) {
		return nil, false
	}
	return o.Dynamic, true
}

// HasDynamic returns a boolean if a field has been set.
func (o *IpamsvcUtilization) HasDynamic() bool {
	if o != nil && !IsNil(o.Dynamic) {
		return true
	}

	return false
}

// SetDynamic gets a reference to the given string and assigns it to the Dynamic field.
func (o *IpamsvcUtilization) SetDynamic(v string) {
	o.Dynamic = &v
}

// GetFree returns the Free field value if set, zero value otherwise.
func (o *IpamsvcUtilization) GetFree() string {
	if o == nil || IsNil(o.Free) {
		var ret string
		return ret
	}
	return *o.Free
}

// GetFreeOk returns a tuple with the Free field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcUtilization) GetFreeOk() (*string, bool) {
	if o == nil || IsNil(o.Free) {
		return nil, false
	}
	return o.Free, true
}

// HasFree returns a boolean if a field has been set.
func (o *IpamsvcUtilization) HasFree() bool {
	if o != nil && !IsNil(o.Free) {
		return true
	}

	return false
}

// SetFree gets a reference to the given string and assigns it to the Free field.
func (o *IpamsvcUtilization) SetFree(v string) {
	o.Free = &v
}

// GetStatic returns the Static field value if set, zero value otherwise.
func (o *IpamsvcUtilization) GetStatic() string {
	if o == nil || IsNil(o.Static) {
		var ret string
		return ret
	}
	return *o.Static
}

// GetStaticOk returns a tuple with the Static field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcUtilization) GetStaticOk() (*string, bool) {
	if o == nil || IsNil(o.Static) {
		return nil, false
	}
	return o.Static, true
}

// HasStatic returns a boolean if a field has been set.
func (o *IpamsvcUtilization) HasStatic() bool {
	if o != nil && !IsNil(o.Static) {
		return true
	}

	return false
}

// SetStatic gets a reference to the given string and assigns it to the Static field.
func (o *IpamsvcUtilization) SetStatic(v string) {
	o.Static = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *IpamsvcUtilization) GetTotal() string {
	if o == nil || IsNil(o.Total) {
		var ret string
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcUtilization) GetTotalOk() (*string, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *IpamsvcUtilization) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given string and assigns it to the Total field.
func (o *IpamsvcUtilization) SetTotal(v string) {
	o.Total = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *IpamsvcUtilization) GetUsed() string {
	if o == nil || IsNil(o.Used) {
		var ret string
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcUtilization) GetUsedOk() (*string, bool) {
	if o == nil || IsNil(o.Used) {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *IpamsvcUtilization) HasUsed() bool {
	if o != nil && !IsNil(o.Used) {
		return true
	}

	return false
}

// SetUsed gets a reference to the given string and assigns it to the Used field.
func (o *IpamsvcUtilization) SetUsed(v string) {
	o.Used = &v
}

// GetUtilization returns the Utilization field value if set, zero value otherwise.
func (o *IpamsvcUtilization) GetUtilization() int64 {
	if o == nil || IsNil(o.Utilization) {
		var ret int64
		return ret
	}
	return *o.Utilization
}

// GetUtilizationOk returns a tuple with the Utilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcUtilization) GetUtilizationOk() (*int64, bool) {
	if o == nil || IsNil(o.Utilization) {
		return nil, false
	}
	return o.Utilization, true
}

// HasUtilization returns a boolean if a field has been set.
func (o *IpamsvcUtilization) HasUtilization() bool {
	if o != nil && !IsNil(o.Utilization) {
		return true
	}

	return false
}

// SetUtilization gets a reference to the given int64 and assigns it to the Utilization field.
func (o *IpamsvcUtilization) SetUtilization(v int64) {
	o.Utilization = &v
}

func (o IpamsvcUtilization) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpamsvcUtilization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AbandonUtilization) {
		toSerialize["abandon_utilization"] = o.AbandonUtilization
	}
	if !IsNil(o.Abandoned) {
		toSerialize["abandoned"] = o.Abandoned
	}
	if !IsNil(o.Dynamic) {
		toSerialize["dynamic"] = o.Dynamic
	}
	if !IsNil(o.Free) {
		toSerialize["free"] = o.Free
	}
	if !IsNil(o.Static) {
		toSerialize["static"] = o.Static
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Used) {
		toSerialize["used"] = o.Used
	}
	if !IsNil(o.Utilization) {
		toSerialize["utilization"] = o.Utilization
	}
	return toSerialize, nil
}

type NullableIpamsvcUtilization struct {
	value *IpamsvcUtilization
	isSet bool
}

func (v NullableIpamsvcUtilization) Get() *IpamsvcUtilization {
	return v.value
}

func (v *NullableIpamsvcUtilization) Set(val *IpamsvcUtilization) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamsvcUtilization) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamsvcUtilization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamsvcUtilization(val *IpamsvcUtilization) *NullableIpamsvcUtilization {
	return &NullableIpamsvcUtilization{value: val, isSet: true}
}

func (v NullableIpamsvcUtilization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamsvcUtilization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
