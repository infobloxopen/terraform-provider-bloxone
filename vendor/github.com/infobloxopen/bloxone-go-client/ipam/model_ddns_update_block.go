/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the DDNSUpdateBlock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DDNSUpdateBlock{}

// DDNSUpdateBlock The dynamic DNS configurations, ddns_domain and ddns_send_updates.
type DDNSUpdateBlock struct {
	// The domain name for DDNS.
	DdnsDomain *string `json:"ddns_domain,omitempty"`
	// Determines if DDNS updates are enabled at this level.
	DdnsSendUpdates      *bool `json:"ddns_send_updates,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DDNSUpdateBlock DDNSUpdateBlock

// NewDDNSUpdateBlock instantiates a new DDNSUpdateBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDDNSUpdateBlock() *DDNSUpdateBlock {
	this := DDNSUpdateBlock{}
	return &this
}

// NewDDNSUpdateBlockWithDefaults instantiates a new DDNSUpdateBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDDNSUpdateBlockWithDefaults() *DDNSUpdateBlock {
	this := DDNSUpdateBlock{}
	return &this
}

// GetDdnsDomain returns the DdnsDomain field value if set, zero value otherwise.
func (o *DDNSUpdateBlock) GetDdnsDomain() string {
	if o == nil || IsNil(o.DdnsDomain) {
		var ret string
		return ret
	}
	return *o.DdnsDomain
}

// GetDdnsDomainOk returns a tuple with the DdnsDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DDNSUpdateBlock) GetDdnsDomainOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsDomain) {
		return nil, false
	}
	return o.DdnsDomain, true
}

// HasDdnsDomain returns a boolean if a field has been set.
func (o *DDNSUpdateBlock) HasDdnsDomain() bool {
	if o != nil && !IsNil(o.DdnsDomain) {
		return true
	}

	return false
}

// SetDdnsDomain gets a reference to the given string and assigns it to the DdnsDomain field.
func (o *DDNSUpdateBlock) SetDdnsDomain(v string) {
	o.DdnsDomain = &v
}

// GetDdnsSendUpdates returns the DdnsSendUpdates field value if set, zero value otherwise.
func (o *DDNSUpdateBlock) GetDdnsSendUpdates() bool {
	if o == nil || IsNil(o.DdnsSendUpdates) {
		var ret bool
		return ret
	}
	return *o.DdnsSendUpdates
}

// GetDdnsSendUpdatesOk returns a tuple with the DdnsSendUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DDNSUpdateBlock) GetDdnsSendUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsSendUpdates) {
		return nil, false
	}
	return o.DdnsSendUpdates, true
}

// HasDdnsSendUpdates returns a boolean if a field has been set.
func (o *DDNSUpdateBlock) HasDdnsSendUpdates() bool {
	if o != nil && !IsNil(o.DdnsSendUpdates) {
		return true
	}

	return false
}

// SetDdnsSendUpdates gets a reference to the given bool and assigns it to the DdnsSendUpdates field.
func (o *DDNSUpdateBlock) SetDdnsSendUpdates(v bool) {
	o.DdnsSendUpdates = &v
}

func (o DDNSUpdateBlock) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DDNSUpdateBlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DdnsDomain) {
		toSerialize["ddns_domain"] = o.DdnsDomain
	}
	if !IsNil(o.DdnsSendUpdates) {
		toSerialize["ddns_send_updates"] = o.DdnsSendUpdates
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DDNSUpdateBlock) UnmarshalJSON(data []byte) (err error) {
	varDDNSUpdateBlock := _DDNSUpdateBlock{}

	err = json.Unmarshal(data, &varDDNSUpdateBlock)

	if err != nil {
		return err
	}

	*o = DDNSUpdateBlock(varDDNSUpdateBlock)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ddns_domain")
		delete(additionalProperties, "ddns_send_updates")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDDNSUpdateBlock struct {
	value *DDNSUpdateBlock
	isSet bool
}

func (v NullableDDNSUpdateBlock) Get() *DDNSUpdateBlock {
	return v.value
}

func (v *NullableDDNSUpdateBlock) Set(val *DDNSUpdateBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableDDNSUpdateBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableDDNSUpdateBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDDNSUpdateBlock(val *DDNSUpdateBlock) *NullableDDNSUpdateBlock {
	return &NullableDDNSUpdateBlock{value: val, isSet: true}
}

func (v NullableDDNSUpdateBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDDNSUpdateBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
