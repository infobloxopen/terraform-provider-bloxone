/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the RealmsConflict type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealmsConflict{}

// RealmsConflict struct for RealmsConflict
type RealmsConflict struct {
	Address *string `json:"address,omitempty"`
	// List of __FederatedRealm__ object ids.
	FederatedRealms []string `json:"federated_realms,omitempty"`
	// The resource identifier.
	IpSpace              *string `json:"ip_space,omitempty"`
	Type                 *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RealmsConflict RealmsConflict

// NewRealmsConflict instantiates a new RealmsConflict object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealmsConflict() *RealmsConflict {
	this := RealmsConflict{}
	return &this
}

// NewRealmsConflictWithDefaults instantiates a new RealmsConflict object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealmsConflictWithDefaults() *RealmsConflict {
	this := RealmsConflict{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *RealmsConflict) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmsConflict) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *RealmsConflict) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *RealmsConflict) SetAddress(v string) {
	o.Address = &v
}

// GetFederatedRealms returns the FederatedRealms field value if set, zero value otherwise.
func (o *RealmsConflict) GetFederatedRealms() []string {
	if o == nil || IsNil(o.FederatedRealms) {
		var ret []string
		return ret
	}
	return o.FederatedRealms
}

// GetFederatedRealmsOk returns a tuple with the FederatedRealms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmsConflict) GetFederatedRealmsOk() ([]string, bool) {
	if o == nil || IsNil(o.FederatedRealms) {
		return nil, false
	}
	return o.FederatedRealms, true
}

// HasFederatedRealms returns a boolean if a field has been set.
func (o *RealmsConflict) HasFederatedRealms() bool {
	if o != nil && !IsNil(o.FederatedRealms) {
		return true
	}

	return false
}

// SetFederatedRealms gets a reference to the given []string and assigns it to the FederatedRealms field.
func (o *RealmsConflict) SetFederatedRealms(v []string) {
	o.FederatedRealms = v
}

// GetIpSpace returns the IpSpace field value if set, zero value otherwise.
func (o *RealmsConflict) GetIpSpace() string {
	if o == nil || IsNil(o.IpSpace) {
		var ret string
		return ret
	}
	return *o.IpSpace
}

// GetIpSpaceOk returns a tuple with the IpSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmsConflict) GetIpSpaceOk() (*string, bool) {
	if o == nil || IsNil(o.IpSpace) {
		return nil, false
	}
	return o.IpSpace, true
}

// HasIpSpace returns a boolean if a field has been set.
func (o *RealmsConflict) HasIpSpace() bool {
	if o != nil && !IsNil(o.IpSpace) {
		return true
	}

	return false
}

// SetIpSpace gets a reference to the given string and assigns it to the IpSpace field.
func (o *RealmsConflict) SetIpSpace(v string) {
	o.IpSpace = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RealmsConflict) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmsConflict) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RealmsConflict) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RealmsConflict) SetType(v string) {
	o.Type = &v
}

func (o RealmsConflict) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealmsConflict) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.FederatedRealms) {
		toSerialize["federated_realms"] = o.FederatedRealms
	}
	if !IsNil(o.IpSpace) {
		toSerialize["ip_space"] = o.IpSpace
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RealmsConflict) UnmarshalJSON(data []byte) (err error) {
	varRealmsConflict := _RealmsConflict{}

	err = json.Unmarshal(data, &varRealmsConflict)

	if err != nil {
		return err
	}

	*o = RealmsConflict(varRealmsConflict)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "federated_realms")
		delete(additionalProperties, "ip_space")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRealmsConflict struct {
	value *RealmsConflict
	isSet bool
}

func (v NullableRealmsConflict) Get() *RealmsConflict {
	return v.value
}

func (v *NullableRealmsConflict) Set(val *RealmsConflict) {
	v.value = val
	v.isSet = true
}

func (v NullableRealmsConflict) IsSet() bool {
	return v.isSet
}

func (v *NullableRealmsConflict) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealmsConflict(val *RealmsConflict) *NullableRealmsConflict {
	return &NullableRealmsConflict{value: val, isSet: true}
}

func (v NullableRealmsConflict) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealmsConflict) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
