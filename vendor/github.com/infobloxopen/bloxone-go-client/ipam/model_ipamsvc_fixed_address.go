/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
	"time"
)

// checks if the IpamsvcFixedAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpamsvcFixedAddress{}

// IpamsvcFixedAddress A __FixedAddress__ object (_dhcp/fixed_address_) reserves an address for a specific client. It must have a _match_type_ and a valid corresponding _match_value_ so it can match that client.
type IpamsvcFixedAddress struct {
	// The reserved address.
	Address string `json:"address"`
	// The description for the fixed address. May contain 0 to 1024 characters. Can include UTF-8.
	Comment *string `json:"comment,omitempty"`
	// Time when the object has been created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The list of DHCP options. May be either a specific option or a group of options.
	DhcpOptions []IpamsvcOptionItem `json:"dhcp_options,omitempty"`
	// Optional. _true_ to disable object. The fixed address is converted to an exclusion when generating configuration.  Defaults to _false_.
	DisableDhcp *bool `json:"disable_dhcp,omitempty"`
	// The configuration for header option filename field.
	HeaderOptionFilename *string `json:"header_option_filename,omitempty"`
	// The configuration for header option server address field.
	HeaderOptionServerAddress *string `json:"header_option_server_address,omitempty"`
	// The configuration for header option server name field.
	HeaderOptionServerName *string `json:"header_option_server_name,omitempty"`
	// The DHCP host name associated with this fixed address. It is of FQDN type and it defaults to empty.
	Hostname *string `json:"hostname,omitempty"`
	// The resource identifier.
	Id *string `json:"id,omitempty"`
	// The list of the inheritance assigned hosts of the object.
	InheritanceAssignedHosts []InheritanceAssignedHost `json:"inheritance_assigned_hosts,omitempty"`
	// The resource identifier.
	InheritanceParent  *string                         `json:"inheritance_parent,omitempty"`
	InheritanceSources *IpamsvcFixedAddressInheritance `json:"inheritance_sources,omitempty"`
	// The resource identifier.
	IpSpace *string `json:"ip_space,omitempty"`
	// Indicates how to match the client:  * _mac_: match the client MAC address for both IPv4 and IPv6,  * _client_text_ or _client_hex_: match the client identifier for IPv4 only,  * _relay_text_ or _relay_hex_: match the circuit ID or remote ID in the DHCP relay agent option (82) for IPv4 only,  * _duid_: match the DHCP unique identifier, currently match only for IPv6 protocol.
	MatchType string `json:"match_type"`
	// The value to match.
	MatchValue string `json:"match_value"`
	// The name of the fixed address. May contain 1 to 256 characters. Can include UTF-8.
	Name *string `json:"name,omitempty"`
	// The resource identifier.
	Parent *string `json:"parent,omitempty"`
	// The tags for the fixed address in JSON format.
	Tags map[string]interface{} `json:"tags,omitempty"`
	// Time when the object has been updated. Equals to _created_at_ if not updated after creation.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewIpamsvcFixedAddress instantiates a new IpamsvcFixedAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpamsvcFixedAddress(address string, matchType string, matchValue string) *IpamsvcFixedAddress {
	this := IpamsvcFixedAddress{}
	this.Address = address
	this.MatchType = matchType
	this.MatchValue = matchValue
	return &this
}

// NewIpamsvcFixedAddressWithDefaults instantiates a new IpamsvcFixedAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpamsvcFixedAddressWithDefaults() *IpamsvcFixedAddress {
	this := IpamsvcFixedAddress{}
	return &this
}

// GetAddress returns the Address field value
func (o *IpamsvcFixedAddress) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *IpamsvcFixedAddress) SetAddress(v string) {
	o.Address = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *IpamsvcFixedAddress) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *IpamsvcFixedAddress) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *IpamsvcFixedAddress) SetComment(v string) {
	o.Comment = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *IpamsvcFixedAddress) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IpamsvcFixedAddress) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *IpamsvcFixedAddress) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDhcpOptions returns the DhcpOptions field value if set, zero value otherwise.
func (o *IpamsvcFixedAddress) GetDhcpOptions() []IpamsvcOptionItem {
	if o == nil || IsNil(o.DhcpOptions) {
		var ret []IpamsvcOptionItem
		return ret
	}
	return o.DhcpOptions
}

// GetDhcpOptionsOk returns a tuple with the DhcpOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetDhcpOptionsOk() ([]IpamsvcOptionItem, bool) {
	if o == nil || IsNil(o.DhcpOptions) {
		return nil, false
	}
	return o.DhcpOptions, true
}

// HasDhcpOptions returns a boolean if a field has been set.
func (o *IpamsvcFixedAddress) HasDhcpOptions() bool {
	if o != nil && !IsNil(o.DhcpOptions) {
		return true
	}

	return false
}

// SetDhcpOptions gets a reference to the given []IpamsvcOptionItem and assigns it to the DhcpOptions field.
func (o *IpamsvcFixedAddress) SetDhcpOptions(v []IpamsvcOptionItem) {
	o.DhcpOptions = v
}

// GetDisableDhcp returns the DisableDhcp field value if set, zero value otherwise.
func (o *IpamsvcFixedAddress) GetDisableDhcp() bool {
	if o == nil || IsNil(o.DisableDhcp) {
		var ret bool
		return ret
	}
	return *o.DisableDhcp
}

// GetDisableDhcpOk returns a tuple with the DisableDhcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetDisableDhcpOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableDhcp) {
		return nil, false
	}
	return o.DisableDhcp, true
}

// HasDisableDhcp returns a boolean if a field has been set.
func (o *IpamsvcFixedAddress) HasDisableDhcp() bool {
	if o != nil && !IsNil(o.DisableDhcp) {
		return true
	}

	return false
}

// SetDisableDhcp gets a reference to the given bool and assigns it to the DisableDhcp field.
func (o *IpamsvcFixedAddress) SetDisableDhcp(v bool) {
	o.DisableDhcp = &v
}

// GetHeaderOptionFilename returns the HeaderOptionFilename field value if set, zero value otherwise.
func (o *IpamsvcFixedAddress) GetHeaderOptionFilename() string {
	if o == nil || IsNil(o.HeaderOptionFilename) {
		var ret string
		return ret
	}
	return *o.HeaderOptionFilename
}

// GetHeaderOptionFilenameOk returns a tuple with the HeaderOptionFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetHeaderOptionFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.HeaderOptionFilename) {
		return nil, false
	}
	return o.HeaderOptionFilename, true
}

// HasHeaderOptionFilename returns a boolean if a field has been set.
func (o *IpamsvcFixedAddress) HasHeaderOptionFilename() bool {
	if o != nil && !IsNil(o.HeaderOptionFilename) {
		return true
	}

	return false
}

// SetHeaderOptionFilename gets a reference to the given string and assigns it to the HeaderOptionFilename field.
func (o *IpamsvcFixedAddress) SetHeaderOptionFilename(v string) {
	o.HeaderOptionFilename = &v
}

// GetHeaderOptionServerAddress returns the HeaderOptionServerAddress field value if set, zero value otherwise.
func (o *IpamsvcFixedAddress) GetHeaderOptionServerAddress() string {
	if o == nil || IsNil(o.HeaderOptionServerAddress) {
		var ret string
		return ret
	}
	return *o.HeaderOptionServerAddress
}

// GetHeaderOptionServerAddressOk returns a tuple with the HeaderOptionServerAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetHeaderOptionServerAddressOk() (*string, bool) {
	if o == nil || IsNil(o.HeaderOptionServerAddress) {
		return nil, false
	}
	return o.HeaderOptionServerAddress, true
}

// HasHeaderOptionServerAddress returns a boolean if a field has been set.
func (o *IpamsvcFixedAddress) HasHeaderOptionServerAddress() bool {
	if o != nil && !IsNil(o.HeaderOptionServerAddress) {
		return true
	}

	return false
}

// SetHeaderOptionServerAddress gets a reference to the given string and assigns it to the HeaderOptionServerAddress field.
func (o *IpamsvcFixedAddress) SetHeaderOptionServerAddress(v string) {
	o.HeaderOptionServerAddress = &v
}

// GetHeaderOptionServerName returns the HeaderOptionServerName field value if set, zero value otherwise.
func (o *IpamsvcFixedAddress) GetHeaderOptionServerName() string {
	if o == nil || IsNil(o.HeaderOptionServerName) {
		var ret string
		return ret
	}
	return *o.HeaderOptionServerName
}

// GetHeaderOptionServerNameOk returns a tuple with the HeaderOptionServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetHeaderOptionServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.HeaderOptionServerName) {
		return nil, false
	}
	return o.HeaderOptionServerName, true
}

// HasHeaderOptionServerName returns a boolean if a field has been set.
func (o *IpamsvcFixedAddress) HasHeaderOptionServerName() bool {
	if o != nil && !IsNil(o.HeaderOptionServerName) {
		return true
	}

	return false
}

// SetHeaderOptionServerName gets a reference to the given string and assigns it to the HeaderOptionServerName field.
func (o *IpamsvcFixedAddress) SetHeaderOptionServerName(v string) {
	o.HeaderOptionServerName = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *IpamsvcFixedAddress) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *IpamsvcFixedAddress) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *IpamsvcFixedAddress) SetHostname(v string) {
	o.Hostname = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IpamsvcFixedAddress) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IpamsvcFixedAddress) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IpamsvcFixedAddress) SetId(v string) {
	o.Id = &v
}

// GetInheritanceAssignedHosts returns the InheritanceAssignedHosts field value if set, zero value otherwise.
func (o *IpamsvcFixedAddress) GetInheritanceAssignedHosts() []InheritanceAssignedHost {
	if o == nil || IsNil(o.InheritanceAssignedHosts) {
		var ret []InheritanceAssignedHost
		return ret
	}
	return o.InheritanceAssignedHosts
}

// GetInheritanceAssignedHostsOk returns a tuple with the InheritanceAssignedHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetInheritanceAssignedHostsOk() ([]InheritanceAssignedHost, bool) {
	if o == nil || IsNil(o.InheritanceAssignedHosts) {
		return nil, false
	}
	return o.InheritanceAssignedHosts, true
}

// HasInheritanceAssignedHosts returns a boolean if a field has been set.
func (o *IpamsvcFixedAddress) HasInheritanceAssignedHosts() bool {
	if o != nil && !IsNil(o.InheritanceAssignedHosts) {
		return true
	}

	return false
}

// SetInheritanceAssignedHosts gets a reference to the given []InheritanceAssignedHost and assigns it to the InheritanceAssignedHosts field.
func (o *IpamsvcFixedAddress) SetInheritanceAssignedHosts(v []InheritanceAssignedHost) {
	o.InheritanceAssignedHosts = v
}

// GetInheritanceParent returns the InheritanceParent field value if set, zero value otherwise.
func (o *IpamsvcFixedAddress) GetInheritanceParent() string {
	if o == nil || IsNil(o.InheritanceParent) {
		var ret string
		return ret
	}
	return *o.InheritanceParent
}

// GetInheritanceParentOk returns a tuple with the InheritanceParent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetInheritanceParentOk() (*string, bool) {
	if o == nil || IsNil(o.InheritanceParent) {
		return nil, false
	}
	return o.InheritanceParent, true
}

// HasInheritanceParent returns a boolean if a field has been set.
func (o *IpamsvcFixedAddress) HasInheritanceParent() bool {
	if o != nil && !IsNil(o.InheritanceParent) {
		return true
	}

	return false
}

// SetInheritanceParent gets a reference to the given string and assigns it to the InheritanceParent field.
func (o *IpamsvcFixedAddress) SetInheritanceParent(v string) {
	o.InheritanceParent = &v
}

// GetInheritanceSources returns the InheritanceSources field value if set, zero value otherwise.
func (o *IpamsvcFixedAddress) GetInheritanceSources() IpamsvcFixedAddressInheritance {
	if o == nil || IsNil(o.InheritanceSources) {
		var ret IpamsvcFixedAddressInheritance
		return ret
	}
	return *o.InheritanceSources
}

// GetInheritanceSourcesOk returns a tuple with the InheritanceSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetInheritanceSourcesOk() (*IpamsvcFixedAddressInheritance, bool) {
	if o == nil || IsNil(o.InheritanceSources) {
		return nil, false
	}
	return o.InheritanceSources, true
}

// HasInheritanceSources returns a boolean if a field has been set.
func (o *IpamsvcFixedAddress) HasInheritanceSources() bool {
	if o != nil && !IsNil(o.InheritanceSources) {
		return true
	}

	return false
}

// SetInheritanceSources gets a reference to the given IpamsvcFixedAddressInheritance and assigns it to the InheritanceSources field.
func (o *IpamsvcFixedAddress) SetInheritanceSources(v IpamsvcFixedAddressInheritance) {
	o.InheritanceSources = &v
}

// GetIpSpace returns the IpSpace field value if set, zero value otherwise.
func (o *IpamsvcFixedAddress) GetIpSpace() string {
	if o == nil || IsNil(o.IpSpace) {
		var ret string
		return ret
	}
	return *o.IpSpace
}

// GetIpSpaceOk returns a tuple with the IpSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetIpSpaceOk() (*string, bool) {
	if o == nil || IsNil(o.IpSpace) {
		return nil, false
	}
	return o.IpSpace, true
}

// HasIpSpace returns a boolean if a field has been set.
func (o *IpamsvcFixedAddress) HasIpSpace() bool {
	if o != nil && !IsNil(o.IpSpace) {
		return true
	}

	return false
}

// SetIpSpace gets a reference to the given string and assigns it to the IpSpace field.
func (o *IpamsvcFixedAddress) SetIpSpace(v string) {
	o.IpSpace = &v
}

// GetMatchType returns the MatchType field value
func (o *IpamsvcFixedAddress) GetMatchType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MatchType
}

// GetMatchTypeOk returns a tuple with the MatchType field value
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetMatchTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchType, true
}

// SetMatchType sets field value
func (o *IpamsvcFixedAddress) SetMatchType(v string) {
	o.MatchType = v
}

// GetMatchValue returns the MatchValue field value
func (o *IpamsvcFixedAddress) GetMatchValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MatchValue
}

// GetMatchValueOk returns a tuple with the MatchValue field value
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetMatchValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchValue, true
}

// SetMatchValue sets field value
func (o *IpamsvcFixedAddress) SetMatchValue(v string) {
	o.MatchValue = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IpamsvcFixedAddress) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IpamsvcFixedAddress) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IpamsvcFixedAddress) SetName(v string) {
	o.Name = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *IpamsvcFixedAddress) GetParent() string {
	if o == nil || IsNil(o.Parent) {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetParentOk() (*string, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *IpamsvcFixedAddress) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *IpamsvcFixedAddress) SetParent(v string) {
	o.Parent = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *IpamsvcFixedAddress) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *IpamsvcFixedAddress) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *IpamsvcFixedAddress) SetTags(v map[string]interface{}) {
	o.Tags = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *IpamsvcFixedAddress) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcFixedAddress) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *IpamsvcFixedAddress) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *IpamsvcFixedAddress) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o IpamsvcFixedAddress) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpamsvcFixedAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.DhcpOptions) {
		toSerialize["dhcp_options"] = o.DhcpOptions
	}
	if !IsNil(o.DisableDhcp) {
		toSerialize["disable_dhcp"] = o.DisableDhcp
	}
	if !IsNil(o.HeaderOptionFilename) {
		toSerialize["header_option_filename"] = o.HeaderOptionFilename
	}
	if !IsNil(o.HeaderOptionServerAddress) {
		toSerialize["header_option_server_address"] = o.HeaderOptionServerAddress
	}
	if !IsNil(o.HeaderOptionServerName) {
		toSerialize["header_option_server_name"] = o.HeaderOptionServerName
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InheritanceAssignedHosts) {
		toSerialize["inheritance_assigned_hosts"] = o.InheritanceAssignedHosts
	}
	if !IsNil(o.InheritanceParent) {
		toSerialize["inheritance_parent"] = o.InheritanceParent
	}
	if !IsNil(o.InheritanceSources) {
		toSerialize["inheritance_sources"] = o.InheritanceSources
	}
	if !IsNil(o.IpSpace) {
		toSerialize["ip_space"] = o.IpSpace
	}
	toSerialize["match_type"] = o.MatchType
	toSerialize["match_value"] = o.MatchValue
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableIpamsvcFixedAddress struct {
	value *IpamsvcFixedAddress
	isSet bool
}

func (v NullableIpamsvcFixedAddress) Get() *IpamsvcFixedAddress {
	return v.value
}

func (v *NullableIpamsvcFixedAddress) Set(val *IpamsvcFixedAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamsvcFixedAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamsvcFixedAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamsvcFixedAddress(val *IpamsvcFixedAddress) *NullableIpamsvcFixedAddress {
	return &NullableIpamsvcFixedAddress{value: val, isSet: true}
}

func (v NullableIpamsvcFixedAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamsvcFixedAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
