/*
IP Address Management API

The IPAM/DHCP Application is a BloxOne DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipam

import (
	"encoding/json"
)

// checks if the IpamsvcHAGroupHost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpamsvcHAGroupHost{}

// IpamsvcHAGroupHost An __HAGroupHost__ object (_dhcp/ha_group_host_) represents an on-prem host belonging to an HA Group.
type IpamsvcHAGroupHost struct {
	// The address on which this host listens.
	Address *string `json:"address,omitempty"`
	// Last successful heartbeat received from its peer/s. This field is set when the _collect_stats_ is set to _true_ in the _GET_ _/dhcp/ha_group_ request.
	Heartbeats []IpamsvcHAGroupHeartbeats `json:"heartbeats,omitempty"`
	// The resource identifier.
	Host string `json:"host"`
	// The HA port.
	Port *int64 `json:"port,omitempty"`
	// The role of this host in the HA relationship: _active_ or _passive_.
	Role *string `json:"role,omitempty"`
	// The state of DHCP on the host. This field is set when the _collect_stats_ is set to _true_ in the _GET_ _/dhcp/ha_group_ request.
	State *string `json:"state,omitempty"`
}

// NewIpamsvcHAGroupHost instantiates a new IpamsvcHAGroupHost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpamsvcHAGroupHost(host string) *IpamsvcHAGroupHost {
	this := IpamsvcHAGroupHost{}
	this.Host = host
	return &this
}

// NewIpamsvcHAGroupHostWithDefaults instantiates a new IpamsvcHAGroupHost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpamsvcHAGroupHostWithDefaults() *IpamsvcHAGroupHost {
	this := IpamsvcHAGroupHost{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *IpamsvcHAGroupHost) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcHAGroupHost) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *IpamsvcHAGroupHost) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *IpamsvcHAGroupHost) SetAddress(v string) {
	o.Address = &v
}

// GetHeartbeats returns the Heartbeats field value if set, zero value otherwise.
func (o *IpamsvcHAGroupHost) GetHeartbeats() []IpamsvcHAGroupHeartbeats {
	if o == nil || IsNil(o.Heartbeats) {
		var ret []IpamsvcHAGroupHeartbeats
		return ret
	}
	return o.Heartbeats
}

// GetHeartbeatsOk returns a tuple with the Heartbeats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcHAGroupHost) GetHeartbeatsOk() ([]IpamsvcHAGroupHeartbeats, bool) {
	if o == nil || IsNil(o.Heartbeats) {
		return nil, false
	}
	return o.Heartbeats, true
}

// HasHeartbeats returns a boolean if a field has been set.
func (o *IpamsvcHAGroupHost) HasHeartbeats() bool {
	if o != nil && !IsNil(o.Heartbeats) {
		return true
	}

	return false
}

// SetHeartbeats gets a reference to the given []IpamsvcHAGroupHeartbeats and assigns it to the Heartbeats field.
func (o *IpamsvcHAGroupHost) SetHeartbeats(v []IpamsvcHAGroupHeartbeats) {
	o.Heartbeats = v
}

// GetHost returns the Host field value
func (o *IpamsvcHAGroupHost) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *IpamsvcHAGroupHost) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *IpamsvcHAGroupHost) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *IpamsvcHAGroupHost) GetPort() int64 {
	if o == nil || IsNil(o.Port) {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcHAGroupHost) GetPortOk() (*int64, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *IpamsvcHAGroupHost) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *IpamsvcHAGroupHost) SetPort(v int64) {
	o.Port = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *IpamsvcHAGroupHost) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcHAGroupHost) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *IpamsvcHAGroupHost) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *IpamsvcHAGroupHost) SetRole(v string) {
	o.Role = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *IpamsvcHAGroupHost) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamsvcHAGroupHost) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *IpamsvcHAGroupHost) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *IpamsvcHAGroupHost) SetState(v string) {
	o.State = &v
}

func (o IpamsvcHAGroupHost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpamsvcHAGroupHost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Heartbeats) {
		toSerialize["heartbeats"] = o.Heartbeats
	}
	toSerialize["host"] = o.Host
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableIpamsvcHAGroupHost struct {
	value *IpamsvcHAGroupHost
	isSet bool
}

func (v NullableIpamsvcHAGroupHost) Get() *IpamsvcHAGroupHost {
	return v.value
}

func (v *NullableIpamsvcHAGroupHost) Set(val *IpamsvcHAGroupHost) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamsvcHAGroupHost) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamsvcHAGroupHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamsvcHAGroupHost(val *IpamsvcHAGroupHost) *NullableIpamsvcHAGroupHost {
	return &NullableIpamsvcHAGroupHost{value: val, isSet: true}
}

func (v NullableIpamsvcHAGroupHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamsvcHAGroupHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
