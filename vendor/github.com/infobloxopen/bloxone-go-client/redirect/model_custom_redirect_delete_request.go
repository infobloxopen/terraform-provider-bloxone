/*
BloxOne Redirect API

You can configure BloxOne Threat Defense Cloud to redirect traffic to the Infoblox server that displays the default or customized redirect page. You can redirect traffic to a custom destination using custom redirects.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package redirect

import (
	"encoding/json"
)

// checks if the CustomRedirectDeleteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomRedirectDeleteRequest{}

// CustomRedirectDeleteRequest The Custom Redirect delete request.
type CustomRedirectDeleteRequest struct {
	// The list of Custom Redirect object identifiers.
	Ids                  []int32 `json:"ids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CustomRedirectDeleteRequest CustomRedirectDeleteRequest

// NewCustomRedirectDeleteRequest instantiates a new CustomRedirectDeleteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomRedirectDeleteRequest() *CustomRedirectDeleteRequest {
	this := CustomRedirectDeleteRequest{}
	return &this
}

// NewCustomRedirectDeleteRequestWithDefaults instantiates a new CustomRedirectDeleteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomRedirectDeleteRequestWithDefaults() *CustomRedirectDeleteRequest {
	this := CustomRedirectDeleteRequest{}
	return &this
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *CustomRedirectDeleteRequest) GetIds() []int32 {
	if o == nil || IsNil(o.Ids) {
		var ret []int32
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomRedirectDeleteRequest) GetIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *CustomRedirectDeleteRequest) HasIds() bool {
	if o != nil && !IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []int32 and assigns it to the Ids field.
func (o *CustomRedirectDeleteRequest) SetIds(v []int32) {
	o.Ids = v
}

func (o CustomRedirectDeleteRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomRedirectDeleteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ids) {
		toSerialize["ids"] = o.Ids
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomRedirectDeleteRequest) UnmarshalJSON(data []byte) (err error) {
	varCustomRedirectDeleteRequest := _CustomRedirectDeleteRequest{}

	err = json.Unmarshal(data, &varCustomRedirectDeleteRequest)

	if err != nil {
		return err
	}

	*o = CustomRedirectDeleteRequest(varCustomRedirectDeleteRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomRedirectDeleteRequest struct {
	value *CustomRedirectDeleteRequest
	isSet bool
}

func (v NullableCustomRedirectDeleteRequest) Get() *CustomRedirectDeleteRequest {
	return v.value
}

func (v *NullableCustomRedirectDeleteRequest) Set(val *CustomRedirectDeleteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomRedirectDeleteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomRedirectDeleteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomRedirectDeleteRequest(val *CustomRedirectDeleteRequest) *NullableCustomRedirectDeleteRequest {
	return &NullableCustomRedirectDeleteRequest{value: val, isSet: true}
}

func (v NullableCustomRedirectDeleteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomRedirectDeleteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
