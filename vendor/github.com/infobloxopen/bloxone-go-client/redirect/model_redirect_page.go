/*
BloxOne Redirect API

You can configure BloxOne Threat Defense Cloud to redirect traffic to the Infoblox server that displays the default or customized redirect page. You can redirect traffic to a custom destination using custom redirects.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package redirect

import (
	"encoding/json"
	"time"
)

// checks if the RedirectPage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedirectPage{}

// RedirectPage The Redirect Page object.  When blocking users from accessing certain domains, you can redirect them to a page that delivers a default message about the action. You can also set a redirect page of your own or customize the redirect message.
type RedirectPage struct {
	// The content of the redirect page for the \"custom\" redirect type.
	Content *string `json:"content,omitempty"`
	// The time when this Redirect Page object was created.
	CreatedTime *time.Time `json:"created_time,omitempty"`
	// The redirect IPv4 address.
	RedirectIpAddress *string `json:"redirect_ip_address,omitempty"`
	// The redirect IPv6 address.
	RedirectIpv6Address *string `json:"redirect_ipv6_address,omitempty"`
	// Whether the redirect type is smart
	Smart *bool `json:"smart,omitempty"`
	// The type of the redirect page that can be \"default\" or \"custom\".
	Type *string `json:"type,omitempty"`
	// The time when this Redirect Page object was last updated.
	UpdatedTime          *time.Time `json:"updated_time,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RedirectPage RedirectPage

// NewRedirectPage instantiates a new RedirectPage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedirectPage() *RedirectPage {
	this := RedirectPage{}
	return &this
}

// NewRedirectPageWithDefaults instantiates a new RedirectPage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedirectPageWithDefaults() *RedirectPage {
	this := RedirectPage{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *RedirectPage) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectPage) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *RedirectPage) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *RedirectPage) SetContent(v string) {
	o.Content = &v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *RedirectPage) GetCreatedTime() time.Time {
	if o == nil || IsNil(o.CreatedTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectPage) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *RedirectPage) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given time.Time and assigns it to the CreatedTime field.
func (o *RedirectPage) SetCreatedTime(v time.Time) {
	o.CreatedTime = &v
}

// GetRedirectIpAddress returns the RedirectIpAddress field value if set, zero value otherwise.
func (o *RedirectPage) GetRedirectIpAddress() string {
	if o == nil || IsNil(o.RedirectIpAddress) {
		var ret string
		return ret
	}
	return *o.RedirectIpAddress
}

// GetRedirectIpAddressOk returns a tuple with the RedirectIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectPage) GetRedirectIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.RedirectIpAddress) {
		return nil, false
	}
	return o.RedirectIpAddress, true
}

// HasRedirectIpAddress returns a boolean if a field has been set.
func (o *RedirectPage) HasRedirectIpAddress() bool {
	if o != nil && !IsNil(o.RedirectIpAddress) {
		return true
	}

	return false
}

// SetRedirectIpAddress gets a reference to the given string and assigns it to the RedirectIpAddress field.
func (o *RedirectPage) SetRedirectIpAddress(v string) {
	o.RedirectIpAddress = &v
}

// GetRedirectIpv6Address returns the RedirectIpv6Address field value if set, zero value otherwise.
func (o *RedirectPage) GetRedirectIpv6Address() string {
	if o == nil || IsNil(o.RedirectIpv6Address) {
		var ret string
		return ret
	}
	return *o.RedirectIpv6Address
}

// GetRedirectIpv6AddressOk returns a tuple with the RedirectIpv6Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectPage) GetRedirectIpv6AddressOk() (*string, bool) {
	if o == nil || IsNil(o.RedirectIpv6Address) {
		return nil, false
	}
	return o.RedirectIpv6Address, true
}

// HasRedirectIpv6Address returns a boolean if a field has been set.
func (o *RedirectPage) HasRedirectIpv6Address() bool {
	if o != nil && !IsNil(o.RedirectIpv6Address) {
		return true
	}

	return false
}

// SetRedirectIpv6Address gets a reference to the given string and assigns it to the RedirectIpv6Address field.
func (o *RedirectPage) SetRedirectIpv6Address(v string) {
	o.RedirectIpv6Address = &v
}

// GetSmart returns the Smart field value if set, zero value otherwise.
func (o *RedirectPage) GetSmart() bool {
	if o == nil || IsNil(o.Smart) {
		var ret bool
		return ret
	}
	return *o.Smart
}

// GetSmartOk returns a tuple with the Smart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectPage) GetSmartOk() (*bool, bool) {
	if o == nil || IsNil(o.Smart) {
		return nil, false
	}
	return o.Smart, true
}

// HasSmart returns a boolean if a field has been set.
func (o *RedirectPage) HasSmart() bool {
	if o != nil && !IsNil(o.Smart) {
		return true
	}

	return false
}

// SetSmart gets a reference to the given bool and assigns it to the Smart field.
func (o *RedirectPage) SetSmart(v bool) {
	o.Smart = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RedirectPage) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectPage) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RedirectPage) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RedirectPage) SetType(v string) {
	o.Type = &v
}

// GetUpdatedTime returns the UpdatedTime field value if set, zero value otherwise.
func (o *RedirectPage) GetUpdatedTime() time.Time {
	if o == nil || IsNil(o.UpdatedTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectPage) GetUpdatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedTime) {
		return nil, false
	}
	return o.UpdatedTime, true
}

// HasUpdatedTime returns a boolean if a field has been set.
func (o *RedirectPage) HasUpdatedTime() bool {
	if o != nil && !IsNil(o.UpdatedTime) {
		return true
	}

	return false
}

// SetUpdatedTime gets a reference to the given time.Time and assigns it to the UpdatedTime field.
func (o *RedirectPage) SetUpdatedTime(v time.Time) {
	o.UpdatedTime = &v
}

func (o RedirectPage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedirectPage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.RedirectIpAddress) {
		toSerialize["redirect_ip_address"] = o.RedirectIpAddress
	}
	if !IsNil(o.RedirectIpv6Address) {
		toSerialize["redirect_ipv6_address"] = o.RedirectIpv6Address
	}
	if !IsNil(o.Smart) {
		toSerialize["smart"] = o.Smart
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UpdatedTime) {
		toSerialize["updated_time"] = o.UpdatedTime
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RedirectPage) UnmarshalJSON(data []byte) (err error) {
	varRedirectPage := _RedirectPage{}

	err = json.Unmarshal(data, &varRedirectPage)

	if err != nil {
		return err
	}

	*o = RedirectPage(varRedirectPage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "content")
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "redirect_ip_address")
		delete(additionalProperties, "redirect_ipv6_address")
		delete(additionalProperties, "smart")
		delete(additionalProperties, "type")
		delete(additionalProperties, "updated_time")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRedirectPage struct {
	value *RedirectPage
	isSet bool
}

func (v NullableRedirectPage) Get() *RedirectPage {
	return v.value
}

func (v *NullableRedirectPage) Set(val *RedirectPage) {
	v.value = val
	v.isSet = true
}

func (v NullableRedirectPage) IsSet() bool {
	return v.isSet
}

func (v *NullableRedirectPage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedirectPage(val *RedirectPage) *NullableRedirectPage {
	return &NullableRedirectPage{value: val, isSet: true}
}

func (v NullableRedirectPage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedirectPage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
