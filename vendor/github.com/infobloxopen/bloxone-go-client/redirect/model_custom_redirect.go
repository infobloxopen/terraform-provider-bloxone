/*
BloxOne Redirect API

You can configure BloxOne Threat Defense Cloud to redirect traffic to the Infoblox server that displays the default or customized redirect page. You can redirect traffic to a custom destination using custom redirects.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package redirect

import (
	"encoding/json"
	"time"
)

// checks if the CustomRedirect type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomRedirect{}

// CustomRedirect The Custom Redirect object.  You can configure BloxOne Cloud to redirect traffic to the Infoblox redirect page or a custom redirect destination. BloxOne Cloud allows you to apply multiple redirect actions and integrate BloxOne Cloud with third-party proxies, secure web gateways, blackholes, honeypots and sinkhole solutions.
type CustomRedirect struct {
	// The time when this Custom Redirect object was created.
	CreatedTime *time.Time `json:"created_time,omitempty"`
	// The list of csv custom IPv4/IPv6 or a single domain redirect address.
	Data *string `json:"data,omitempty"`
	// The Custom Redirect object identifier.
	Id *int32 `json:"id,omitempty"`
	// The name of the custom redirect.
	Name *string `json:"name,omitempty"`
	// The list of the security policy identifiers with which the named list is associated.
	PolicyIds []int32 `json:"policy_ids,omitempty"`
	// The list of the security policy names with which the custom redirect is associated.
	PolicyNames []string `json:"policy_names,omitempty"`
	// The time when this Custom Redirect object was last updated.
	UpdatedTime          *time.Time `json:"updated_time,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CustomRedirect CustomRedirect

// NewCustomRedirect instantiates a new CustomRedirect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomRedirect() *CustomRedirect {
	this := CustomRedirect{}
	return &this
}

// NewCustomRedirectWithDefaults instantiates a new CustomRedirect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomRedirectWithDefaults() *CustomRedirect {
	this := CustomRedirect{}
	return &this
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *CustomRedirect) GetCreatedTime() time.Time {
	if o == nil || IsNil(o.CreatedTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomRedirect) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *CustomRedirect) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given time.Time and assigns it to the CreatedTime field.
func (o *CustomRedirect) SetCreatedTime(v time.Time) {
	o.CreatedTime = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *CustomRedirect) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomRedirect) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *CustomRedirect) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *CustomRedirect) SetData(v string) {
	o.Data = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustomRedirect) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomRedirect) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustomRedirect) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CustomRedirect) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CustomRedirect) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomRedirect) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CustomRedirect) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CustomRedirect) SetName(v string) {
	o.Name = &v
}

// GetPolicyIds returns the PolicyIds field value if set, zero value otherwise.
func (o *CustomRedirect) GetPolicyIds() []int32 {
	if o == nil || IsNil(o.PolicyIds) {
		var ret []int32
		return ret
	}
	return o.PolicyIds
}

// GetPolicyIdsOk returns a tuple with the PolicyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomRedirect) GetPolicyIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.PolicyIds) {
		return nil, false
	}
	return o.PolicyIds, true
}

// HasPolicyIds returns a boolean if a field has been set.
func (o *CustomRedirect) HasPolicyIds() bool {
	if o != nil && !IsNil(o.PolicyIds) {
		return true
	}

	return false
}

// SetPolicyIds gets a reference to the given []int32 and assigns it to the PolicyIds field.
func (o *CustomRedirect) SetPolicyIds(v []int32) {
	o.PolicyIds = v
}

// GetPolicyNames returns the PolicyNames field value if set, zero value otherwise.
func (o *CustomRedirect) GetPolicyNames() []string {
	if o == nil || IsNil(o.PolicyNames) {
		var ret []string
		return ret
	}
	return o.PolicyNames
}

// GetPolicyNamesOk returns a tuple with the PolicyNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomRedirect) GetPolicyNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.PolicyNames) {
		return nil, false
	}
	return o.PolicyNames, true
}

// HasPolicyNames returns a boolean if a field has been set.
func (o *CustomRedirect) HasPolicyNames() bool {
	if o != nil && !IsNil(o.PolicyNames) {
		return true
	}

	return false
}

// SetPolicyNames gets a reference to the given []string and assigns it to the PolicyNames field.
func (o *CustomRedirect) SetPolicyNames(v []string) {
	o.PolicyNames = v
}

// GetUpdatedTime returns the UpdatedTime field value if set, zero value otherwise.
func (o *CustomRedirect) GetUpdatedTime() time.Time {
	if o == nil || IsNil(o.UpdatedTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomRedirect) GetUpdatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedTime) {
		return nil, false
	}
	return o.UpdatedTime, true
}

// HasUpdatedTime returns a boolean if a field has been set.
func (o *CustomRedirect) HasUpdatedTime() bool {
	if o != nil && !IsNil(o.UpdatedTime) {
		return true
	}

	return false
}

// SetUpdatedTime gets a reference to the given time.Time and assigns it to the UpdatedTime field.
func (o *CustomRedirect) SetUpdatedTime(v time.Time) {
	o.UpdatedTime = &v
}

func (o CustomRedirect) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomRedirect) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PolicyIds) {
		toSerialize["policy_ids"] = o.PolicyIds
	}
	if !IsNil(o.PolicyNames) {
		toSerialize["policy_names"] = o.PolicyNames
	}
	if !IsNil(o.UpdatedTime) {
		toSerialize["updated_time"] = o.UpdatedTime
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomRedirect) UnmarshalJSON(data []byte) (err error) {
	varCustomRedirect := _CustomRedirect{}

	err = json.Unmarshal(data, &varCustomRedirect)

	if err != nil {
		return err
	}

	*o = CustomRedirect(varCustomRedirect)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "data")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "policy_ids")
		delete(additionalProperties, "policy_names")
		delete(additionalProperties, "updated_time")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomRedirect struct {
	value *CustomRedirect
	isSet bool
}

func (v NullableCustomRedirect) Get() *CustomRedirect {
	return v.value
}

func (v *NullableCustomRedirect) Set(val *CustomRedirect) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomRedirect) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomRedirect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomRedirect(val *CustomRedirect) *NullableCustomRedirect {
	return &NullableCustomRedirect{value: val, isSet: true}
}

func (v NullableCustomRedirect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomRedirect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
