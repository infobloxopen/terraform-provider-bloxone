/*
BloxOne Redirect API

You can configure BloxOne Threat Defense Cloud to redirect traffic to the Infoblox server that displays the default or customized redirect page. You can redirect traffic to a custom destination using custom redirects.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package redirect

import (
	"encoding/json"
)

// checks if the UpdateRedirectPagePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRedirectPagePayload{}

// UpdateRedirectPagePayload struct for UpdateRedirectPagePayload
type UpdateRedirectPagePayload struct {
	// The content of the redirect page for the \"custom\" redirect type.
	Content *string `json:"content,omitempty"`
	// The redirect IPv4 address.
	RedirectIpAddress *string `json:"redirect_ip_address,omitempty"`
	// The redirect IPv6 address.
	RedirectIpv6Address *string `json:"redirect_ipv6_address,omitempty"`
	// Change the redirect page from non-proxy (smart == false) to proxy (smart)
	Smart *bool `json:"smart,omitempty"`
	// The type of the redirect page that can be \"default\" or \"custom\".
	Type                 *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateRedirectPagePayload UpdateRedirectPagePayload

// NewUpdateRedirectPagePayload instantiates a new UpdateRedirectPagePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRedirectPagePayload() *UpdateRedirectPagePayload {
	this := UpdateRedirectPagePayload{}
	return &this
}

// NewUpdateRedirectPagePayloadWithDefaults instantiates a new UpdateRedirectPagePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRedirectPagePayloadWithDefaults() *UpdateRedirectPagePayload {
	this := UpdateRedirectPagePayload{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *UpdateRedirectPagePayload) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRedirectPagePayload) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *UpdateRedirectPagePayload) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *UpdateRedirectPagePayload) SetContent(v string) {
	o.Content = &v
}

// GetRedirectIpAddress returns the RedirectIpAddress field value if set, zero value otherwise.
func (o *UpdateRedirectPagePayload) GetRedirectIpAddress() string {
	if o == nil || IsNil(o.RedirectIpAddress) {
		var ret string
		return ret
	}
	return *o.RedirectIpAddress
}

// GetRedirectIpAddressOk returns a tuple with the RedirectIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRedirectPagePayload) GetRedirectIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.RedirectIpAddress) {
		return nil, false
	}
	return o.RedirectIpAddress, true
}

// HasRedirectIpAddress returns a boolean if a field has been set.
func (o *UpdateRedirectPagePayload) HasRedirectIpAddress() bool {
	if o != nil && !IsNil(o.RedirectIpAddress) {
		return true
	}

	return false
}

// SetRedirectIpAddress gets a reference to the given string and assigns it to the RedirectIpAddress field.
func (o *UpdateRedirectPagePayload) SetRedirectIpAddress(v string) {
	o.RedirectIpAddress = &v
}

// GetRedirectIpv6Address returns the RedirectIpv6Address field value if set, zero value otherwise.
func (o *UpdateRedirectPagePayload) GetRedirectIpv6Address() string {
	if o == nil || IsNil(o.RedirectIpv6Address) {
		var ret string
		return ret
	}
	return *o.RedirectIpv6Address
}

// GetRedirectIpv6AddressOk returns a tuple with the RedirectIpv6Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRedirectPagePayload) GetRedirectIpv6AddressOk() (*string, bool) {
	if o == nil || IsNil(o.RedirectIpv6Address) {
		return nil, false
	}
	return o.RedirectIpv6Address, true
}

// HasRedirectIpv6Address returns a boolean if a field has been set.
func (o *UpdateRedirectPagePayload) HasRedirectIpv6Address() bool {
	if o != nil && !IsNil(o.RedirectIpv6Address) {
		return true
	}

	return false
}

// SetRedirectIpv6Address gets a reference to the given string and assigns it to the RedirectIpv6Address field.
func (o *UpdateRedirectPagePayload) SetRedirectIpv6Address(v string) {
	o.RedirectIpv6Address = &v
}

// GetSmart returns the Smart field value if set, zero value otherwise.
func (o *UpdateRedirectPagePayload) GetSmart() bool {
	if o == nil || IsNil(o.Smart) {
		var ret bool
		return ret
	}
	return *o.Smart
}

// GetSmartOk returns a tuple with the Smart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRedirectPagePayload) GetSmartOk() (*bool, bool) {
	if o == nil || IsNil(o.Smart) {
		return nil, false
	}
	return o.Smart, true
}

// HasSmart returns a boolean if a field has been set.
func (o *UpdateRedirectPagePayload) HasSmart() bool {
	if o != nil && !IsNil(o.Smart) {
		return true
	}

	return false
}

// SetSmart gets a reference to the given bool and assigns it to the Smart field.
func (o *UpdateRedirectPagePayload) SetSmart(v bool) {
	o.Smart = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateRedirectPagePayload) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRedirectPagePayload) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdateRedirectPagePayload) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpdateRedirectPagePayload) SetType(v string) {
	o.Type = &v
}

func (o UpdateRedirectPagePayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRedirectPagePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.RedirectIpAddress) {
		toSerialize["redirect_ip_address"] = o.RedirectIpAddress
	}
	if !IsNil(o.RedirectIpv6Address) {
		toSerialize["redirect_ipv6_address"] = o.RedirectIpv6Address
	}
	if !IsNil(o.Smart) {
		toSerialize["smart"] = o.Smart
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateRedirectPagePayload) UnmarshalJSON(data []byte) (err error) {
	varUpdateRedirectPagePayload := _UpdateRedirectPagePayload{}

	err = json.Unmarshal(data, &varUpdateRedirectPagePayload)

	if err != nil {
		return err
	}

	*o = UpdateRedirectPagePayload(varUpdateRedirectPagePayload)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "content")
		delete(additionalProperties, "redirect_ip_address")
		delete(additionalProperties, "redirect_ipv6_address")
		delete(additionalProperties, "smart")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateRedirectPagePayload struct {
	value *UpdateRedirectPagePayload
	isSet bool
}

func (v NullableUpdateRedirectPagePayload) Get() *UpdateRedirectPagePayload {
	return v.value
}

func (v *NullableUpdateRedirectPagePayload) Set(val *UpdateRedirectPagePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRedirectPagePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRedirectPagePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRedirectPagePayload(val *UpdateRedirectPagePayload) *NullableUpdateRedirectPagePayload {
	return &NullableUpdateRedirectPagePayload{value: val, isSet: true}
}

func (v NullableUpdateRedirectPagePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRedirectPagePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
