// Code generated by go-swagger; DO NOT EDIT.

package auth_nsg

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	b1cliruntime "github.com/infobloxopen/b1ddi-go-client/runtime"
)

// New creates a new auth nsg API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for auth nsg API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AuthNsgCreate(params *AuthNsgCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthNsgCreateCreated, error)

	AuthNsgDelete(params *AuthNsgDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthNsgDeleteNoContent, error)

	AuthNsgList(params *AuthNsgListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthNsgListOK, error)

	AuthNsgRead(params *AuthNsgReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthNsgReadOK, error)

	AuthNsgUpdate(params *AuthNsgUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthNsgUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AuthNsgCreate creates the auth n s g object

  Use this method to create an AuthNSG object.
The _dns/auth_nsg_ object represents an Authoritative DNS Server Group for authoritative zones.
*/
func (a *Client) AuthNsgCreate(params *AuthNsgCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthNsgCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthNsgCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "auth_nsgCreate",
		Method:             "POST",
		PathPattern:        "/dns/auth_nsg",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AuthNsgCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthNsgCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for auth_nsgCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AuthNsgDelete moves the auth n s g object to recyclebin

  Use this method to move an AuthNSG object to Recyclebin.
The _dns/auth_nsg_ object represents an Authoritative DNS Server Group for authoritative zones.
*/
func (a *Client) AuthNsgDelete(params *AuthNsgDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthNsgDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthNsgDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "auth_nsgDelete",
		Method:             "DELETE",
		PathPattern:        "/dns/auth_nsg/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AuthNsgDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthNsgDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for auth_nsgDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AuthNsgList lists auth n s g objects

  Use this method to list AuthNSG objects.
The _dns/auth_nsg_ object represents an Authoritative DNS Server Group for authoritative zones.
*/
func (a *Client) AuthNsgList(params *AuthNsgListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthNsgListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthNsgListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "auth_nsgList",
		Method:             "GET",
		PathPattern:        "/dns/auth_nsg",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AuthNsgListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthNsgListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for auth_nsgList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AuthNsgRead reads the auth n s g object

  Use this method to read an AuthNSG object.
The _dns/auth_nsg_ object represents an Authoritative DNS Server Group for authoritative zones.
*/
func (a *Client) AuthNsgRead(params *AuthNsgReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthNsgReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthNsgReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "auth_nsgRead",
		Method:             "GET",
		PathPattern:        "/dns/auth_nsg/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AuthNsgReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthNsgReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for auth_nsgRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AuthNsgUpdate updates the auth n s g object

  Use this method to update an AuthNSG object.
The _dns/auth_nsg_ object represents an Authoritative DNS Server Group for authoritative zones.
*/
func (a *Client) AuthNsgUpdate(params *AuthNsgUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthNsgUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthNsgUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "auth_nsgUpdate",
		Method:             "PATCH",
		PathPattern:        "/dns/auth_nsg/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AuthNsgUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthNsgUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for auth_nsgUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
