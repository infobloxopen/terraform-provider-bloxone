// Code generated by go-swagger; DO NOT EDIT.

package acl

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	b1cliruntime "github.com/infobloxopen/b1ddi-go-client/runtime"
)

// New creates a new acl API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for acl API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ACLCreate(params *ACLCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ACLCreateCreated, error)

	ACLDelete(params *ACLDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ACLDeleteNoContent, error)

	ACLList(params *ACLListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ACLListOK, error)

	ACLRead(params *ACLReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ACLReadOK, error)

	ACLUpdate(params *ACLUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ACLUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ACLCreate creates the ACL object

  Use this method to create an ACL object.
ACL object (_dns/acl_) represents a named Access Control List.
*/
func (a *Client) ACLCreate(params *ACLCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ACLCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewACLCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "aclCreate",
		Method:             "POST",
		PathPattern:        "/dns/acl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ACLCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ACLCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for aclCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ACLDelete moves the ACL object to recyclebin

  Use this method to move an ACL object to Recyclebin.
ACL object (_dns/acl_) represents a named Access Control List.
*/
func (a *Client) ACLDelete(params *ACLDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ACLDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewACLDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "aclDelete",
		Method:             "DELETE",
		PathPattern:        "/dns/acl/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ACLDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ACLDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for aclDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ACLList lists ACL objects

  Use this method to list ACL objects.
ACL object (_dns/acl_) represents a named Access Control List.
*/
func (a *Client) ACLList(params *ACLListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ACLListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewACLListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "aclList",
		Method:             "GET",
		PathPattern:        "/dns/acl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ACLListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ACLListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for aclList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ACLRead reads the ACL object

  Use this method to read an ACL object.
ACL object (_dns/acl_) represents a named Access Control List.
*/
func (a *Client) ACLRead(params *ACLReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ACLReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewACLReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "aclRead",
		Method:             "GET",
		PathPattern:        "/dns/acl/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ACLReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ACLReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for aclRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ACLUpdate updates the ACL object

  Use this method to update an ACL object.
ACL object (_dns/acl_) represents a named Access Control List.
*/
func (a *Client) ACLUpdate(params *ACLUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ACLUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewACLUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "aclUpdate",
		Method:             "PATCH",
		PathPattern:        "/dns/acl/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ACLUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ACLUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for aclUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
