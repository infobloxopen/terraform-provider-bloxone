// Code generated by go-swagger; DO NOT EDIT.

package host

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	b1cliruntime "github.com/infobloxopen/b1ddi-go-client/runtime"
)

// New creates a new host API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for host API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	HostList(params *HostListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HostListOK, error)

	HostRead(params *HostReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HostReadOK, error)

	HostUpdate(params *HostUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HostUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  HostList lists DNS host objects

  Use this method to list DNS Host objects.
A DNS Host object associates DNS configuration with hosts.
*/
func (a *Client) HostList(params *HostListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HostListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHostListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "hostList",
		Method:             "GET",
		PathPattern:        "/dns/host",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HostListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HostListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for hostList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HostRead reads the DNS host object

  Use this method to read a DNS Host object.
A DNS Host object associates DNS configuration with hosts.
*/
func (a *Client) HostRead(params *HostReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HostReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHostReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "hostRead",
		Method:             "GET",
		PathPattern:        "/dns/host/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HostReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HostReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for hostRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HostUpdate updates the DNS host object

  Use this method to update a DNS Host object.
A DNS Host object associates DNS configuration with hosts.
*/
func (a *Client) HostUpdate(params *HostUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HostUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHostUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "hostUpdate",
		Method:             "PATCH",
		PathPattern:        "/dns/host/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HostUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HostUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for hostUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
