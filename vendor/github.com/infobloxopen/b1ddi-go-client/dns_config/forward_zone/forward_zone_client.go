// Code generated by go-swagger; DO NOT EDIT.

package forward_zone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	b1cliruntime "github.com/infobloxopen/b1ddi-go-client/runtime"
)

// New creates a new forward zone API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for forward zone API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ForwardZoneCopy(params *ForwardZoneCopyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardZoneCopyCreated, error)

	ForwardZoneCreate(params *ForwardZoneCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardZoneCreateCreated, error)

	ForwardZoneDelete(params *ForwardZoneDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardZoneDeleteNoContent, error)

	ForwardZoneList(params *ForwardZoneListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardZoneListOK, error)

	ForwardZoneRead(params *ForwardZoneReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardZoneReadOK, error)

	ForwardZoneUpdate(params *ForwardZoneUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardZoneUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ForwardZoneCopy copies the forward zone object

  Use this method to copy an __ForwardZone__ object to a different __View__.
This object (_dns/forward_zone_) represents a forwarding zone.
*/
func (a *Client) ForwardZoneCopy(params *ForwardZoneCopyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardZoneCopyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForwardZoneCopyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "forward_zoneCopy",
		Method:             "POST",
		PathPattern:        "/dns/forward_zone/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ForwardZoneCopyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForwardZoneCopyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for forward_zoneCopy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ForwardZoneCreate creates the forward zone object

  Use this method to create a ForwardZone object.
This object (_dns/forward_zone_) represents a forwarding zone.
*/
func (a *Client) ForwardZoneCreate(params *ForwardZoneCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardZoneCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForwardZoneCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "forward_zoneCreate",
		Method:             "POST",
		PathPattern:        "/dns/forward_zone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ForwardZoneCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForwardZoneCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for forward_zoneCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ForwardZoneDelete moves the forward zone object to recyclebin

  Use this method to move a Forward Zone object to Recyclebin.
This object (_dns/forward_zone_) represents a forwarding zone.
*/
func (a *Client) ForwardZoneDelete(params *ForwardZoneDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardZoneDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForwardZoneDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "forward_zoneDelete",
		Method:             "DELETE",
		PathPattern:        "/dns/forward_zone/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ForwardZoneDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForwardZoneDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for forward_zoneDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ForwardZoneList lists forward zone objects

  Use this method to list Forward Zone objects.
This object (_dns/forward_zone_) represents a forwarding zone.
*/
func (a *Client) ForwardZoneList(params *ForwardZoneListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardZoneListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForwardZoneListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "forward_zoneList",
		Method:             "GET",
		PathPattern:        "/dns/forward_zone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ForwardZoneListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForwardZoneListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for forward_zoneList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ForwardZoneRead reads the forward zone object

  Use this method to read a Forward Zone object.
This object (_dns/forward_zone_) represents a forwarding zone.
*/
func (a *Client) ForwardZoneRead(params *ForwardZoneReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardZoneReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForwardZoneReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "forward_zoneRead",
		Method:             "GET",
		PathPattern:        "/dns/forward_zone/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ForwardZoneReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForwardZoneReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for forward_zoneRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ForwardZoneUpdate updates the forward zone object

  Use this method to update a Forward Zone object.
This object (_dns/forward_zone_) represents a forwarding zone.
*/
func (a *Client) ForwardZoneUpdate(params *ForwardZoneUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardZoneUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForwardZoneUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "forward_zoneUpdate",
		Method:             "PATCH",
		PathPattern:        "/dns/forward_zone/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ForwardZoneUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForwardZoneUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for forward_zoneUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
