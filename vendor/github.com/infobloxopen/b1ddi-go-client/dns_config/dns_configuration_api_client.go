// Code generated by go-swagger; DO NOT EDIT.

package dns_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/infobloxopen/b1ddi-go-client/dns_config/acl"
	"github.com/infobloxopen/b1ddi-go-client/dns_config/auth_nsg"
	"github.com/infobloxopen/b1ddi-go-client/dns_config/auth_zone"
	"github.com/infobloxopen/b1ddi-go-client/dns_config/cache_flush"
	"github.com/infobloxopen/b1ddi-go-client/dns_config/convert_domain_name"
	"github.com/infobloxopen/b1ddi-go-client/dns_config/convert_rname"
	"github.com/infobloxopen/b1ddi-go-client/dns_config/delegation"
	"github.com/infobloxopen/b1ddi-go-client/dns_config/forward_nsg"
	"github.com/infobloxopen/b1ddi-go-client/dns_config/forward_zone"
	"github.com/infobloxopen/b1ddi-go-client/dns_config/global"
	"github.com/infobloxopen/b1ddi-go-client/dns_config/host"
	serverops "github.com/infobloxopen/b1ddi-go-client/dns_config/server"
	"github.com/infobloxopen/b1ddi-go-client/dns_config/view"
)

// Default DNS configuration API HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/api/ddi/v1/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http", "https"}

// NewHTTPClient creates a new DNS configuration API HTTP client.
func NewHTTPClient(formats strfmt.Registry) *DNSConfigurationAPI {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new DNS configuration API HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *DNSConfigurationAPI {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new DNS configuration API client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *DNSConfigurationAPI {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(DNSConfigurationAPI)
	cli.Transport = transport
	cli.ACL = acl.New(transport, formats)
	cli.AuthNsg = auth_nsg.New(transport, formats)
	cli.AuthZone = auth_zone.New(transport, formats)
	cli.CacheFlush = cache_flush.New(transport, formats)
	cli.ConvertDomainName = convert_domain_name.New(transport, formats)
	cli.ConvertRname = convert_rname.New(transport, formats)
	cli.Delegation = delegation.New(transport, formats)
	cli.ForwardNsg = forward_nsg.New(transport, formats)
	cli.ForwardZone = forward_zone.New(transport, formats)
	cli.Global = global.New(transport, formats)
	cli.Host = host.New(transport, formats)
	cli.Server = serverops.New(transport, formats)
	cli.View = view.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// DNSConfigurationAPI is a client for DNS configuration API
type DNSConfigurationAPI struct {
	ACL acl.ClientService

	AuthNsg auth_nsg.ClientService

	AuthZone auth_zone.ClientService

	CacheFlush cache_flush.ClientService

	ConvertDomainName convert_domain_name.ClientService

	ConvertRname convert_rname.ClientService

	Delegation delegation.ClientService

	ForwardNsg forward_nsg.ClientService

	ForwardZone forward_zone.ClientService

	Global global.ClientService

	Host host.ClientService

	Server serverops.ClientService

	View view.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *DNSConfigurationAPI) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.ACL.SetTransport(transport)
	c.AuthNsg.SetTransport(transport)
	c.AuthZone.SetTransport(transport)
	c.CacheFlush.SetTransport(transport)
	c.ConvertDomainName.SetTransport(transport)
	c.ConvertRname.SetTransport(transport)
	c.Delegation.SetTransport(transport)
	c.ForwardNsg.SetTransport(transport)
	c.ForwardZone.SetTransport(transport)
	c.Global.SetTransport(transport)
	c.Host.SetTransport(transport)
	c.Server.SetTransport(transport)
	c.View.SetTransport(transport)
}
