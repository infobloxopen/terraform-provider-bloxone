// Code generated by go-swagger; DO NOT EDIT.

package forward_nsg

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	b1cliruntime "github.com/infobloxopen/b1ddi-go-client/runtime"
)

// New creates a new forward nsg API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for forward nsg API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ForwardNsgCreate(params *ForwardNsgCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardNsgCreateCreated, error)

	ForwardNsgDelete(params *ForwardNsgDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardNsgDeleteNoContent, error)

	ForwardNsgList(params *ForwardNsgListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardNsgListOK, error)

	ForwardNsgRead(params *ForwardNsgReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardNsgReadOK, error)

	ForwardNsgUpdate(params *ForwardNsgUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardNsgUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ForwardNsgCreate creates the forward n s g object

  Use this method to create a ForwardNSG object.
The _dns/forward_nsg_ object represents a Forward DNS Server Group for forward zones.
*/
func (a *Client) ForwardNsgCreate(params *ForwardNsgCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardNsgCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForwardNsgCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "forward_nsgCreate",
		Method:             "POST",
		PathPattern:        "/dns/forward_nsg",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ForwardNsgCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForwardNsgCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for forward_nsgCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ForwardNsgDelete moves the forward n s g object to recyclebin

  Use this method to move a ForwardNSG object to Recyclebin.
The _dns/forward_nsg_ object represents a Forward DNS Server Group for forward zones.
*/
func (a *Client) ForwardNsgDelete(params *ForwardNsgDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardNsgDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForwardNsgDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "forward_nsgDelete",
		Method:             "DELETE",
		PathPattern:        "/dns/forward_nsg/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ForwardNsgDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForwardNsgDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for forward_nsgDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ForwardNsgList lists forward n s g objects

  Use this method to list ForwardNSG objects.
The _dns/forward_nsg_ object represents a Forward DNS Server Group for forward zones.
*/
func (a *Client) ForwardNsgList(params *ForwardNsgListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardNsgListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForwardNsgListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "forward_nsgList",
		Method:             "GET",
		PathPattern:        "/dns/forward_nsg",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ForwardNsgListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForwardNsgListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for forward_nsgList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ForwardNsgRead reads the forward n s g object

  Use this method to read a ForwardNSG object.
The _dns/forward_nsg_ object represents a Forward DNS Server Group for forward zones.
*/
func (a *Client) ForwardNsgRead(params *ForwardNsgReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardNsgReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForwardNsgReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "forward_nsgRead",
		Method:             "GET",
		PathPattern:        "/dns/forward_nsg/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ForwardNsgReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForwardNsgReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for forward_nsgRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ForwardNsgUpdate updates the forward n s g object

  Use this method to update a ForwardNSG object.
The _dns/forward_nsg_ object represents a Forward DNS Server Group for forward zones.
*/
func (a *Client) ForwardNsgUpdate(params *ForwardNsgUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForwardNsgUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForwardNsgUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "forward_nsgUpdate",
		Method:             "PATCH",
		PathPattern:        "/dns/forward_nsg/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ForwardNsgUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForwardNsgUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for forward_nsgUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
