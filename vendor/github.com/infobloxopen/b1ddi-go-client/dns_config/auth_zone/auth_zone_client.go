// Code generated by go-swagger; DO NOT EDIT.

package auth_zone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	b1cliruntime "github.com/infobloxopen/b1ddi-go-client/runtime"
)

// New creates a new auth zone API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for auth zone API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AuthZoneCopy(params *AuthZoneCopyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthZoneCopyCreated, error)

	AuthZoneCreate(params *AuthZoneCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthZoneCreateCreated, error)

	AuthZoneDelete(params *AuthZoneDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthZoneDeleteNoContent, error)

	AuthZoneList(params *AuthZoneListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthZoneListOK, error)

	AuthZoneRead(params *AuthZoneReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthZoneReadOK, error)

	AuthZoneUpdate(params *AuthZoneUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthZoneUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AuthZoneCopy copies the auth zone object

  Use this method to copy an __AuthZone__ object to a different __View__.
This object (_dns/auth_zone_) represents an authoritative zone.
*/
func (a *Client) AuthZoneCopy(params *AuthZoneCopyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthZoneCopyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthZoneCopyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "auth_zoneCopy",
		Method:             "POST",
		PathPattern:        "/dns/auth_zone/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AuthZoneCopyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthZoneCopyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for auth_zoneCopy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AuthZoneCreate creates the auth zone object

  Use this method to create an AuthZone object.
This object (_dns/auth_zone_) represents an authoritative zone.
*/
func (a *Client) AuthZoneCreate(params *AuthZoneCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthZoneCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthZoneCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "auth_zoneCreate",
		Method:             "POST",
		PathPattern:        "/dns/auth_zone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AuthZoneCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthZoneCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for auth_zoneCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AuthZoneDelete moves the auth zone object to recyclebin

  Use this method to move an AuthZone object to Recyclebin.
This object (_dns/auth_zone_) represents an authoritative zone.
*/
func (a *Client) AuthZoneDelete(params *AuthZoneDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthZoneDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthZoneDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "auth_zoneDelete",
		Method:             "DELETE",
		PathPattern:        "/dns/auth_zone/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AuthZoneDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthZoneDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for auth_zoneDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AuthZoneList lists auth zone objects

  Use this method to list AuthZone objects.
This object (_dns/auth_zone_) represents an authoritative zone.
*/
func (a *Client) AuthZoneList(params *AuthZoneListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthZoneListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthZoneListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "auth_zoneList",
		Method:             "GET",
		PathPattern:        "/dns/auth_zone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AuthZoneListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthZoneListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for auth_zoneList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AuthZoneRead reads the auth zone object

  Use this method to read an AuthZone object.
This object (_dns/auth_zone_) represents an authoritative zone.
*/
func (a *Client) AuthZoneRead(params *AuthZoneReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthZoneReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthZoneReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "auth_zoneRead",
		Method:             "GET",
		PathPattern:        "/dns/auth_zone/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AuthZoneReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthZoneReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for auth_zoneRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AuthZoneUpdate updates the auth zone object

  Use this method to update an AuthZone object.
This object (_dns/auth_zone_) represents an authoritative zone.
*/
func (a *Client) AuthZoneUpdate(params *AuthZoneUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthZoneUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthZoneUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "auth_zoneUpdate",
		Method:             "PATCH",
		PathPattern:        "/dns/auth_zone/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AuthZoneUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthZoneUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for auth_zoneUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
