// Code generated by go-swagger; DO NOT EDIT.

package option_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	b1cliruntime "github.com/infobloxopen/b1ddi-go-client/runtime"
)

// New creates a new option group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for option group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	OptionGroupCreate(params *OptionGroupCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionGroupCreateCreated, error)

	OptionGroupDelete(params *OptionGroupDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionGroupDeleteNoContent, error)

	OptionGroupList(params *OptionGroupListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionGroupListOK, error)

	OptionGroupRead(params *OptionGroupReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionGroupReadOK, error)

	OptionGroupUpdate(params *OptionGroupUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionGroupUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  OptionGroupCreate creates the d h c p option group

  Use this method to create an __OptionGroup__ object.
The __OptionGroup__ object is a named collection of options.
*/
func (a *Client) OptionGroupCreate(params *OptionGroupCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionGroupCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionGroupCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "option_groupCreate",
		Method:             "POST",
		PathPattern:        "/dhcp/option_group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OptionGroupCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionGroupCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for option_groupCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionGroupDelete moves the d h c p option group to the recycle bin

  Use this method to move an __OptionGroup__ object to the recycle bin.
The __OptionGroup__ object is a named collection of options.
*/
func (a *Client) OptionGroupDelete(params *OptionGroupDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionGroupDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionGroupDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "option_groupDelete",
		Method:             "DELETE",
		PathPattern:        "/dhcp/option_group/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OptionGroupDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionGroupDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for option_groupDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionGroupList retrieves d h c p option groups

  Use this method to retrieve __OptionGroup__ objects.
The __OptionGroup__ object is a named collection of options.
*/
func (a *Client) OptionGroupList(params *OptionGroupListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionGroupListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionGroupListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "option_groupList",
		Method:             "GET",
		PathPattern:        "/dhcp/option_group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OptionGroupListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionGroupListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for option_groupList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionGroupRead retrieves the d h c p option group

  Use this method to retrieve an __OptionGroup__ object.
The __OptionGroup__ object is a named collection of options.
*/
func (a *Client) OptionGroupRead(params *OptionGroupReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionGroupReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionGroupReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "option_groupRead",
		Method:             "GET",
		PathPattern:        "/dhcp/option_group/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OptionGroupReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionGroupReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for option_groupRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionGroupUpdate updates the d h c p option group

  Use this method to update an __OptionGroup__ object.
The __OptionGroup__ object is a named collection of options.
*/
func (a *Client) OptionGroupUpdate(params *OptionGroupUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionGroupUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionGroupUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "option_groupUpdate",
		Method:             "PATCH",
		PathPattern:        "/dhcp/option_group/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OptionGroupUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionGroupUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for option_groupUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
