// Code generated by go-swagger; DO NOT EDIT.

package option_space

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	b1cliruntime "github.com/infobloxopen/b1ddi-go-client/runtime"
)

// New creates a new option space API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for option space API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	OptionSpaceCreate(params *OptionSpaceCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionSpaceCreateCreated, error)

	OptionSpaceDelete(params *OptionSpaceDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionSpaceDeleteNoContent, error)

	OptionSpaceList(params *OptionSpaceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionSpaceListOK, error)

	OptionSpaceRead(params *OptionSpaceReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionSpaceReadOK, error)

	OptionSpaceUpdate(params *OptionSpaceUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionSpaceUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  OptionSpaceCreate creates the d h c p option space

  Use this method to create an __OptionSpace__ object.
The __OptionSpace__ object represents a set of DHCP option codes.
*/
func (a *Client) OptionSpaceCreate(params *OptionSpaceCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionSpaceCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionSpaceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "option_spaceCreate",
		Method:             "POST",
		PathPattern:        "/dhcp/option_space",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OptionSpaceCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionSpaceCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for option_spaceCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionSpaceDelete moves the d h c p option space to the recycle bin

  Use this method to move an __OptionSpace__ object to the recycle bin.
The __OptionSpace__ object represents a set of DHCP option codes.
*/
func (a *Client) OptionSpaceDelete(params *OptionSpaceDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionSpaceDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionSpaceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "option_spaceDelete",
		Method:             "DELETE",
		PathPattern:        "/dhcp/option_space/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OptionSpaceDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionSpaceDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for option_spaceDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionSpaceList retrieves d h c p option spaces

  Use this method to retrieve __OptionSpace__ objects.
The __OptionSpace__ object represents a set of DHCP option codes.
*/
func (a *Client) OptionSpaceList(params *OptionSpaceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionSpaceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionSpaceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "option_spaceList",
		Method:             "GET",
		PathPattern:        "/dhcp/option_space",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OptionSpaceListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionSpaceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for option_spaceList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionSpaceRead retrieves the d h c p option space

  Use this method to retrieve an __OptionSpace__ object.
The __OptionSpace__ object represents a set of DHCP option codes.
*/
func (a *Client) OptionSpaceRead(params *OptionSpaceReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionSpaceReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionSpaceReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "option_spaceRead",
		Method:             "GET",
		PathPattern:        "/dhcp/option_space/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OptionSpaceReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionSpaceReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for option_spaceRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionSpaceUpdate updates the d h c p option space

  Use this method to update an __OptionSpace__ object.
The __OptionSpace__ object represents a set of DHCP option codes.
*/
func (a *Client) OptionSpaceUpdate(params *OptionSpaceUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionSpaceUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionSpaceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "option_spaceUpdate",
		Method:             "PATCH",
		PathPattern:        "/dhcp/option_space/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OptionSpaceUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionSpaceUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for option_spaceUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
