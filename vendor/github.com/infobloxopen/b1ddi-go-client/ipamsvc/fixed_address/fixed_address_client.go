// Code generated by go-swagger; DO NOT EDIT.

package fixed_address

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	b1cliruntime "github.com/infobloxopen/b1ddi-go-client/runtime"
)

// New creates a new fixed address API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fixed address API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	FixedAddressCreate(params *FixedAddressCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FixedAddressCreateCreated, error)

	FixedAddressDelete(params *FixedAddressDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FixedAddressDeleteNoContent, error)

	FixedAddressList(params *FixedAddressListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FixedAddressListOK, error)

	FixedAddressRead(params *FixedAddressReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FixedAddressReadOK, error)

	FixedAddressUpdate(params *FixedAddressUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FixedAddressUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  FixedAddressCreate creates the fixed address

  Use this method to create a __FixedAddress__ object.
The __FixedAddress__ object reserves an address for a specific client. It must have a _match_type_ and a valid corresponding _match_value_ so that it can match that client.
*/
func (a *Client) FixedAddressCreate(params *FixedAddressCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FixedAddressCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFixedAddressCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "fixed_addressCreate",
		Method:             "POST",
		PathPattern:        "/dhcp/fixed_address",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FixedAddressCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FixedAddressCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for fixed_addressCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FixedAddressDelete moves the fixed address to the recycle bin

  Use this method to move a __FixedAddress__ object to the recycle bin.
The __FixedAddress__ object reserves an address for a specific client. It must have a _match_type_ and a valid corresponding _match_value_ so that it can match that client.
*/
func (a *Client) FixedAddressDelete(params *FixedAddressDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FixedAddressDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFixedAddressDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "fixed_addressDelete",
		Method:             "DELETE",
		PathPattern:        "/dhcp/fixed_address/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FixedAddressDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FixedAddressDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for fixed_addressDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FixedAddressList retrieves fixed addresses

  Use this method to retrieve __FixedAddress__ objects.
The __FixedAddress__ object reserves an address for a specific client. It must have a _match_type_ and a valid corresponding _match_value_ so that it can match that client.
*/
func (a *Client) FixedAddressList(params *FixedAddressListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FixedAddressListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFixedAddressListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "fixed_addressList",
		Method:             "GET",
		PathPattern:        "/dhcp/fixed_address",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FixedAddressListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FixedAddressListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for fixed_addressList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FixedAddressRead retrieves the fixed address

  Use this method to retrieve a __FixedAddress__ object.
The __FixedAddress__ object reserves an address for a specific client. It must have a _match_type_ and a valid corresponding _match_value_ so that it can match that client.
*/
func (a *Client) FixedAddressRead(params *FixedAddressReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FixedAddressReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFixedAddressReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "fixed_addressRead",
		Method:             "GET",
		PathPattern:        "/dhcp/fixed_address/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FixedAddressReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FixedAddressReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for fixed_addressRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FixedAddressUpdate updates the fixed address

  Use this method to update a __FixedAddress__ object.
The __FixedAddress__ object reserves an address for a specific client. It must have a _match_type_ and a valid corresponding _match_value_ so that it can match that client.
*/
func (a *Client) FixedAddressUpdate(params *FixedAddressUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FixedAddressUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFixedAddressUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "fixed_addressUpdate",
		Method:             "PATCH",
		PathPattern:        "/dhcp/fixed_address/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FixedAddressUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FixedAddressUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for fixed_addressUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
