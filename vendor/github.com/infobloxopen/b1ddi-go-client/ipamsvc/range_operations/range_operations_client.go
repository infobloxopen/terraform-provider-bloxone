// Code generated by go-swagger; DO NOT EDIT.

package range_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	b1cliruntime "github.com/infobloxopen/b1ddi-go-client/runtime"
)

// New creates a new range operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for range operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	RangeCreate(params *RangeCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RangeCreateCreated, error)

	RangeCreateNextAvailableIP(params *RangeCreateNextAvailableIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RangeCreateNextAvailableIPCreated, error)

	RangeDelete(params *RangeDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RangeDeleteNoContent, error)

	RangeList(params *RangeListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RangeListOK, error)

	RangeListNextAvailableIP(params *RangeListNextAvailableIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RangeListNextAvailableIPOK, error)

	RangeRead(params *RangeReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RangeReadOK, error)

	RangeUpdate(params *RangeUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RangeUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  RangeCreate creates the range

  Use this method to create a __Range__ object.
A __Range__ object represents a set of contiguous IP addresses in the same IP space with no gap, expressed as a (start, end) pair within a given subnet that are grouped together for administrative purpose and protocol management. The start and end values are not required to align with CIDR boundaries.
*/
func (a *Client) RangeCreate(params *RangeCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RangeCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRangeCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rangeCreate",
		Method:             "POST",
		PathPattern:        "/ipam/range",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RangeCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RangeCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rangeCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RangeCreateNextAvailableIP allocates the next available IP address

  Use this method to allocate the next available IP address.
This allocates one or more __Address__ (_ipam/address_) resource from available addresses, when the IP address is not known prior to allocation.
*/
func (a *Client) RangeCreateNextAvailableIP(params *RangeCreateNextAvailableIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RangeCreateNextAvailableIPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRangeCreateNextAvailableIPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rangeCreateNextAvailableIP",
		Method:             "POST",
		PathPattern:        "/ipam/range/{id}/nextavailableip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RangeCreateNextAvailableIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RangeCreateNextAvailableIPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rangeCreateNextAvailableIP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RangeDelete moves the range to the recycle bin

  Use this method to move a __Range__ object to the recycle bin.
A __Range__ object represents a set of contiguous IP addresses in the same IP space with no gap, expressed as a (start, end) pair within a given subnet that are grouped together for administrative purpose and protocol management. The start and end values are not required to align with CIDR boundaries.
*/
func (a *Client) RangeDelete(params *RangeDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RangeDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRangeDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rangeDelete",
		Method:             "DELETE",
		PathPattern:        "/ipam/range/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RangeDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RangeDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rangeDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RangeList retrieves ranges

  Use this method to retrieve __Range__ objects.
A __Range__ object represents a set of contiguous IP addresses in the same IP space with no gap, expressed as a (start, end) pair within a given subnet that are grouped together for administrative purpose and protocol management. The start and end values are not required to align with CIDR boundaries.
*/
func (a *Client) RangeList(params *RangeListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RangeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRangeListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rangeList",
		Method:             "GET",
		PathPattern:        "/ipam/range",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RangeListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RangeListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rangeList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RangeListNextAvailableIP retrieves the next available IP address

  Use this method to retrieve the next available IP address.
This returns one or more __Address__ (_ipam/address_) resource from available addresses, when IP address is not known prior to allocation.
*/
func (a *Client) RangeListNextAvailableIP(params *RangeListNextAvailableIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RangeListNextAvailableIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRangeListNextAvailableIPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rangeListNextAvailableIP",
		Method:             "GET",
		PathPattern:        "/ipam/range/{id}/nextavailableip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RangeListNextAvailableIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RangeListNextAvailableIPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rangeListNextAvailableIP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RangeRead retrieves the range

  Use this method to retrieve a __Range__ object.
A __Range__ object represents a set of contiguous IP addresses in the same IP space with no gap, expressed as a (start, end) pair within a given subnet that are grouped together for administrative purpose and protocol management. The start and end values are not required to align with CIDR boundaries.
*/
func (a *Client) RangeRead(params *RangeReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RangeReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRangeReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rangeRead",
		Method:             "GET",
		PathPattern:        "/ipam/range/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RangeReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RangeReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rangeRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RangeUpdate updates the range

  Use this method to update a __Range__ object.
A __Range__ object represents a set of contiguous IP addresses in the same IP space with no gap, expressed as a (start, end) pair within a given subnet that are grouped together for administrative purpose and protocol management. The start and end values are not required to align with CIDR boundaries.
*/
func (a *Client) RangeUpdate(params *RangeUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RangeUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRangeUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rangeUpdate",
		Method:             "PATCH",
		PathPattern:        "/ipam/range/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RangeUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RangeUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rangeUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
