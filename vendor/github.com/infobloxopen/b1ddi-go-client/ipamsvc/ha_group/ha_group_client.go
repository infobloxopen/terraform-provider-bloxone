// Code generated by go-swagger; DO NOT EDIT.

package ha_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	b1cliruntime "github.com/infobloxopen/b1ddi-go-client/runtime"
)

// New creates a new ha group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ha group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	HaGroupCreate(params *HaGroupCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HaGroupCreateCreated, error)

	HaGroupDelete(params *HaGroupDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HaGroupDeleteNoContent, error)

	HaGroupList(params *HaGroupListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HaGroupListOK, error)

	HaGroupRead(params *HaGroupReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HaGroupReadOK, error)

	HaGroupUpdate(params *HaGroupUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HaGroupUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  HaGroupCreate creates the h a group

  Use this method to create an __HAGroup__ object.
The __HAGroup__ object represents on-prem hosts that can serve the same leases for HA.
*/
func (a *Client) HaGroupCreate(params *HaGroupCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HaGroupCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHaGroupCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ha_groupCreate",
		Method:             "POST",
		PathPattern:        "/dhcp/ha_group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HaGroupCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HaGroupCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ha_groupCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HaGroupDelete deletes the h a group

  Use this method to delete an __HAGroup__ object.
The __HAGroup__ (_dhcp/ha_group_) object represents on-prem hosts that can serve the same leases for HA.
*/
func (a *Client) HaGroupDelete(params *HaGroupDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HaGroupDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHaGroupDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ha_groupDelete",
		Method:             "DELETE",
		PathPattern:        "/dhcp/ha_group/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HaGroupDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HaGroupDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ha_groupDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HaGroupList retrieves h a groups

  Use this method to retrieve __HAGroup__ objects.
The __HAGroup__ (_dhcp/ha_group_) object represents on-prem hosts that can serve the same leases for HA.
*/
func (a *Client) HaGroupList(params *HaGroupListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HaGroupListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHaGroupListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ha_groupList",
		Method:             "GET",
		PathPattern:        "/dhcp/ha_group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HaGroupListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HaGroupListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ha_groupList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HaGroupRead retrieves the h a group

  Use this method to retrieve an __HAGroup__ object.
The __HAGroup__ object represents on-prem hosts that can serve the same leases for HA.
*/
func (a *Client) HaGroupRead(params *HaGroupReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HaGroupReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHaGroupReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ha_groupRead",
		Method:             "GET",
		PathPattern:        "/dhcp/ha_group/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HaGroupReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HaGroupReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ha_groupRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HaGroupUpdate updates the h a group

  Use this method to update an __HAGroup__ object.
The __HAGroup__ object represents on-prem hosts that can serve the same leases for HA.
*/
func (a *Client) HaGroupUpdate(params *HaGroupUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HaGroupUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHaGroupUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ha_groupUpdate",
		Method:             "PATCH",
		PathPattern:        "/dhcp/ha_group/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HaGroupUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HaGroupUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ha_groupUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
