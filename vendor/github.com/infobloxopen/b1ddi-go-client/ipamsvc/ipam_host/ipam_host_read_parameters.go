// Code generated by go-swagger; DO NOT EDIT.

package ipam_host

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewIpamHostReadParams creates a new IpamHostReadParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewIpamHostReadParams() *IpamHostReadParams {
	return &IpamHostReadParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewIpamHostReadParamsWithTimeout creates a new IpamHostReadParams object
// with the ability to set a timeout on a request.
func NewIpamHostReadParamsWithTimeout(timeout time.Duration) *IpamHostReadParams {
	return &IpamHostReadParams{
		timeout: timeout,
	}
}

// NewIpamHostReadParamsWithContext creates a new IpamHostReadParams object
// with the ability to set a context for a request.
func NewIpamHostReadParamsWithContext(ctx context.Context) *IpamHostReadParams {
	return &IpamHostReadParams{
		Context: ctx,
	}
}

// NewIpamHostReadParamsWithHTTPClient creates a new IpamHostReadParams object
// with the ability to set a custom HTTPClient for a request.
func NewIpamHostReadParamsWithHTTPClient(client *http.Client) *IpamHostReadParams {
	return &IpamHostReadParams{
		HTTPClient: client,
	}
}

/* IpamHostReadParams contains all the parameters to send to the API endpoint
   for the ipam host read operation.

   Typically these are written to a http.Request.
*/
type IpamHostReadParams struct {

	/* Fields.



	A collection of response resources can be transformed by specifying a set of JSON tags to be returned. For a “flat” resource, the tag name is straightforward. If field selection is allowed on non-flat hierarchical resources, the service should implement a qualified naming scheme such as dot-qualification to reference data down the hierarchy. If a resource does not have the specified tag, the tag does not appear in the output resource.

	Specify this parameter as a comma-separated list of JSON tag names.


	*/
	Fields *string

	/* OrderBy.



	A collection of response resources can be sorted by their JSON tags. For a 'flat' resource, the tag name is straightforward. If sorting is allowed on non-flat hierarchical resources, the service should implement a qualified naming scheme such as dot-qualification to reference data down the hierarchy. If a resource does not have the specified tag, its value is assumed to be null.)

	Specify this parameter as a comma-separated list of JSON tag names. The sort direction can be specified by a suffix separated by whitespace before the tag name. The suffix 'asc' sorts the data in ascending order. The suffix 'desc' sorts the data in descending order. If no suffix is specified the data is sorted in ascending order.


	*/
	OrderBy *string

	/* ID.

	   An application specific resource identity of a resource
	*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the ipam host read params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IpamHostReadParams) WithDefaults() *IpamHostReadParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the ipam host read params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IpamHostReadParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the ipam host read params
func (o *IpamHostReadParams) WithTimeout(timeout time.Duration) *IpamHostReadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the ipam host read params
func (o *IpamHostReadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the ipam host read params
func (o *IpamHostReadParams) WithContext(ctx context.Context) *IpamHostReadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the ipam host read params
func (o *IpamHostReadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the ipam host read params
func (o *IpamHostReadParams) WithHTTPClient(client *http.Client) *IpamHostReadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the ipam host read params
func (o *IpamHostReadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the ipam host read params
func (o *IpamHostReadParams) WithFields(fields *string) *IpamHostReadParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the ipam host read params
func (o *IpamHostReadParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithOrderBy adds the orderBy to the ipam host read params
func (o *IpamHostReadParams) WithOrderBy(orderBy *string) *IpamHostReadParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the ipam host read params
func (o *IpamHostReadParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithID adds the id to the ipam host read params
func (o *IpamHostReadParams) WithID(id string) *IpamHostReadParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the ipam host read params
func (o *IpamHostReadParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *IpamHostReadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// query param _fields
		var qrFields string

		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {

			if err := r.SetQueryParam("_fields", qFields); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// query param _order_by
		var qrOrderBy string

		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {

			if err := r.SetQueryParam("_order_by", qOrderBy); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
