// Code generated by go-swagger; DO NOT EDIT.

package ip_space

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	b1cliruntime "github.com/infobloxopen/b1ddi-go-client/runtime"
)

// New creates a new ip space API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ip space API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	IPSpaceBulkCopy(params *IPSpaceBulkCopyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IPSpaceBulkCopyCreated, error)

	IPSpaceCopy(params *IPSpaceCopyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IPSpaceCopyCreated, error)

	IPSpaceCreate(params *IPSpaceCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IPSpaceCreateCreated, error)

	IPSpaceDelete(params *IPSpaceDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IPSpaceDeleteNoContent, error)

	IPSpaceList(params *IPSpaceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IPSpaceListOK, error)

	IPSpaceRead(params *IPSpaceReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IPSpaceReadOK, error)

	IPSpaceUpdate(params *IPSpaceUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IPSpaceUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  IPSpaceBulkCopy copies the specified address block and subnets in the IP space

  Use this method to bulk copy __AddressBlock__ and __Subnet__ objects from one __IPSpace__ object to another __IPSpace__ object.
The __IPSpace__ object represents an entire address space.
The __AddressBlock__ object allows a uniform representation of the address space segmentation, supporting functions such as administrative grouping, routing aggregation, delegation etc.
The __Subnet__ object represents a set of addresses from which addresses are assigned to network equipment interfaces.

The _copy_objects_ specifies the list of objects (_ipam/address_block_ and _ipam/subnet_ only) in the _ipam/ip_space_ object to copy.
The _target_ specifies the _ipam/ip_space_ object to which the objects must be copied.
*/
func (a *Client) IPSpaceBulkCopy(params *IPSpaceBulkCopyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IPSpaceBulkCopyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIPSpaceBulkCopyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ip_spaceBulkCopy",
		Method:             "POST",
		PathPattern:        "/ipam/ip_space/bulk_copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IPSpaceBulkCopyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IPSpaceBulkCopyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ip_spaceBulkCopy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IPSpaceCopy copies the IP space

  Use this method to copy an __IPSpace__ object.
The __IPSpace__ object represents an entire address space.
*/
func (a *Client) IPSpaceCopy(params *IPSpaceCopyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IPSpaceCopyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIPSpaceCopyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ip_spaceCopy",
		Method:             "POST",
		PathPattern:        "/ipam/ip_space/{id}/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IPSpaceCopyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IPSpaceCopyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ip_spaceCopy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IPSpaceCreate creates the IP space

  Use this method to create an __IPSpace__ object.
The __IPSpace__ object represents an entire address space.
*/
func (a *Client) IPSpaceCreate(params *IPSpaceCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IPSpaceCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIPSpaceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ip_spaceCreate",
		Method:             "POST",
		PathPattern:        "/ipam/ip_space",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IPSpaceCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IPSpaceCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ip_spaceCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IPSpaceDelete moves the IP space to the recycle bin

  Use this method to move an __IPSpace__ object to the recycle bin.
The __IPSpace__ object represents an entire address space.
*/
func (a *Client) IPSpaceDelete(params *IPSpaceDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IPSpaceDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIPSpaceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ip_spaceDelete",
		Method:             "DELETE",
		PathPattern:        "/ipam/ip_space/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IPSpaceDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IPSpaceDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ip_spaceDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IPSpaceList retrieves IP spaces

  Use this method to retrieve __IPSpace__ objects.
The __IPSpace__ object represents an entire address space.
*/
func (a *Client) IPSpaceList(params *IPSpaceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IPSpaceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIPSpaceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ip_spaceList",
		Method:             "GET",
		PathPattern:        "/ipam/ip_space",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IPSpaceListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IPSpaceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ip_spaceList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IPSpaceRead retrieves the IP space

  Use this method to retrieve an __IPSpace__ object.
The __IPSpace__ object represents an entire address space.
*/
func (a *Client) IPSpaceRead(params *IPSpaceReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IPSpaceReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIPSpaceReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ip_spaceRead",
		Method:             "GET",
		PathPattern:        "/ipam/ip_space/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IPSpaceReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IPSpaceReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ip_spaceRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IPSpaceUpdate updates the IP space

  Use this method to update an __IPSpace__ object.
The __IPSpace__ object represents an entire address space.
*/
func (a *Client) IPSpaceUpdate(params *IPSpaceUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IPSpaceUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIPSpaceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ip_spaceUpdate",
		Method:             "PATCH",
		PathPattern:        "/ipam/ip_space/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IPSpaceUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IPSpaceUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ip_spaceUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
