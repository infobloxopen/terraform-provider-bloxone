// Code generated by go-swagger; DO NOT EDIT.

package subnet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	b1cliruntime "github.com/infobloxopen/b1ddi-go-client/runtime"
)

// New creates a new subnet API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subnet API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SubnetCopy(params *SubnetCopyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubnetCopyCreated, error)

	SubnetCreate(params *SubnetCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubnetCreateCreated, error)

	SubnetCreateNextAvailableIP(params *SubnetCreateNextAvailableIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubnetCreateNextAvailableIPCreated, error)

	SubnetDelete(params *SubnetDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubnetDeleteNoContent, error)

	SubnetList(params *SubnetListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubnetListOK, error)

	SubnetListNextAvailableIP(params *SubnetListNextAvailableIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubnetListNextAvailableIPOK, error)

	SubnetRead(params *SubnetReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubnetReadOK, error)

	SubnetUpdate(params *SubnetUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubnetUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SubnetCopy copies the subnet

  Use this method to copy a __Subnet__ object.
The __Subnet__ object represents a set of addresses from which addresses are assigned to network equipment interfaces.
*/
func (a *Client) SubnetCopy(params *SubnetCopyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubnetCopyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubnetCopyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "subnetCopy",
		Method:             "POST",
		PathPattern:        "/ipam/subnet/{id}/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubnetCopyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubnetCopyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subnetCopy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubnetCreate creates the subnet

  Use this method to create a __Subnet__ object.
The __Subnet__ object represents a set of addresses from which addresses are assigned to network equipment interfaces.
*/
func (a *Client) SubnetCreate(params *SubnetCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubnetCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubnetCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "subnetCreate",
		Method:             "POST",
		PathPattern:        "/ipam/subnet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubnetCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubnetCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subnetCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubnetCreateNextAvailableIP allocates the next available IP address

  Use this method to allocate the next available IP address.
This allocates one or more __Address__ (_ipam/address_) resource from available addresses, when the IP address is not known prior to allocation.
*/
func (a *Client) SubnetCreateNextAvailableIP(params *SubnetCreateNextAvailableIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubnetCreateNextAvailableIPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubnetCreateNextAvailableIPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "subnetCreateNextAvailableIP",
		Method:             "POST",
		PathPattern:        "/ipam/subnet/{id}/nextavailableip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubnetCreateNextAvailableIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubnetCreateNextAvailableIPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subnetCreateNextAvailableIP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubnetDelete moves the subnet to the recycle bin

  Use this method to move a __Subnet__ object to the recycle bin.
The __Subnet__ object represents a set of addresses from which addresses are assigned to network equipment interfaces.
*/
func (a *Client) SubnetDelete(params *SubnetDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubnetDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubnetDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "subnetDelete",
		Method:             "DELETE",
		PathPattern:        "/ipam/subnet/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubnetDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubnetDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subnetDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubnetList retrieves subnets

  Use this method to retrieve __Subnet__ objects.
The __Subnet__ object represents a set of addresses from which addresses are assigned to network equipment interfaces.
*/
func (a *Client) SubnetList(params *SubnetListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubnetListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubnetListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "subnetList",
		Method:             "GET",
		PathPattern:        "/ipam/subnet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubnetListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubnetListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subnetList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubnetListNextAvailableIP retrieves the next available IP address

  Use this method to retrieve the next available IP address.
This returns one or more __Address__ (_ipam/address_) resource from available addresses, when IP address is not known prior to allocation.
*/
func (a *Client) SubnetListNextAvailableIP(params *SubnetListNextAvailableIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubnetListNextAvailableIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubnetListNextAvailableIPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "subnetListNextAvailableIP",
		Method:             "GET",
		PathPattern:        "/ipam/subnet/{id}/nextavailableip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubnetListNextAvailableIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubnetListNextAvailableIPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subnetListNextAvailableIP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubnetRead retrieves the subnet

  Use this method to retrieve a __Subnet__ object.
The __Subnet__ object represents a set of addresses from which addresses are assigned to network equipment interfaces.
*/
func (a *Client) SubnetRead(params *SubnetReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubnetReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubnetReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "subnetRead",
		Method:             "GET",
		PathPattern:        "/ipam/subnet/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubnetReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubnetReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subnetRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubnetUpdate updates the subnet

  Use this method to update a __Subnet__ object.
The __Subnet__ object represents a set of addresses from which addresses are assigned to network equipment interfaces.
*/
func (a *Client) SubnetUpdate(params *SubnetUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubnetUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubnetUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "subnetUpdate",
		Method:             "PATCH",
		PathPattern:        "/ipam/subnet/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubnetUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubnetUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subnetUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
