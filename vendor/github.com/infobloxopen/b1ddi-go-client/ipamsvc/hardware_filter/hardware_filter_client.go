// Code generated by go-swagger; DO NOT EDIT.

package hardware_filter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	b1cliruntime "github.com/infobloxopen/b1ddi-go-client/runtime"
)

// New creates a new hardware filter API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hardware filter API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	HardwareFilterCreate(params *HardwareFilterCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HardwareFilterCreateCreated, error)

	HardwareFilterDelete(params *HardwareFilterDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HardwareFilterDeleteNoContent, error)

	HardwareFilterList(params *HardwareFilterListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HardwareFilterListOK, error)

	HardwareFilterRead(params *HardwareFilterReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HardwareFilterReadOK, error)

	HardwareFilterUpdate(params *HardwareFilterUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HardwareFilterUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  HardwareFilterCreate creates the hardware filter

  Use this method to create a __HardwareFilter__ object.
The __HardwareFilter__ object applies options to clients with matching hardware addresses. It must be configured in the _filters_ list of a scope to be effective.
*/
func (a *Client) HardwareFilterCreate(params *HardwareFilterCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HardwareFilterCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHardwareFilterCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "hardware_filterCreate",
		Method:             "POST",
		PathPattern:        "/dhcp/hardware_filter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HardwareFilterCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HardwareFilterCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for hardware_filterCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HardwareFilterDelete moves the hardware filter to the recycle bin

  Use this method to move a __HardwareFilter__ object to the recycle bin.
The __HardwareFilter__ object applies options to clients with matching hardware addresses. It must be configured in the _filters_ list of a scope to be effective.
*/
func (a *Client) HardwareFilterDelete(params *HardwareFilterDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HardwareFilterDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHardwareFilterDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "hardware_filterDelete",
		Method:             "DELETE",
		PathPattern:        "/dhcp/hardware_filter/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HardwareFilterDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HardwareFilterDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for hardware_filterDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HardwareFilterList retrieves hardware filters

  Use this method to retrieve __HardwareFilter__ objects.
The __HardwareFilter__ object applies options to clients with matching hardware addresses. It must be configured in the _filters_ list of a scope to be effective.
*/
func (a *Client) HardwareFilterList(params *HardwareFilterListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HardwareFilterListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHardwareFilterListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "hardware_filterList",
		Method:             "GET",
		PathPattern:        "/dhcp/hardware_filter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HardwareFilterListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HardwareFilterListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for hardware_filterList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HardwareFilterRead retrieves the hardware filter

  Use this method to retrieve a __HardwareFilter__ object.
The __HardwareFilter__ object applies options to clients with matching hardware addresses. It must be configured in the _filters_ list of a scope to be effective.
*/
func (a *Client) HardwareFilterRead(params *HardwareFilterReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HardwareFilterReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHardwareFilterReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "hardware_filterRead",
		Method:             "GET",
		PathPattern:        "/dhcp/hardware_filter/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HardwareFilterReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HardwareFilterReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for hardware_filterRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HardwareFilterUpdate updates the hardware filter

  Use this method to update a __HardwareFilter__ object.
The __HardwareFilter__ object applies options to clients with matching hardware addresses. It must be configured in the _filters_ list of a scope to be effective.
*/
func (a *Client) HardwareFilterUpdate(params *HardwareFilterUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HardwareFilterUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHardwareFilterUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "hardware_filterUpdate",
		Method:             "PATCH",
		PathPattern:        "/dhcp/hardware_filter/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HardwareFilterUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HardwareFilterUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for hardware_filterUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
