// Code generated by go-swagger; DO NOT EDIT.

package option_code

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	b1cliruntime "github.com/infobloxopen/b1ddi-go-client/runtime"
)

// New creates a new option code API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for option code API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	OptionCodeCreate(params *OptionCodeCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionCodeCreateCreated, error)

	OptionCodeDelete(params *OptionCodeDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionCodeDeleteNoContent, error)

	OptionCodeList(params *OptionCodeListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionCodeListOK, error)

	OptionCodeRead(params *OptionCodeReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionCodeReadOK, error)

	OptionCodeUpdate(params *OptionCodeUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionCodeUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  OptionCodeCreate creates the d h c p option code

  Use this method to create an __OptionCode__ object.
The __OptionCode__ object defines a DHCP option code.
*/
func (a *Client) OptionCodeCreate(params *OptionCodeCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionCodeCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionCodeCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "option_codeCreate",
		Method:             "POST",
		PathPattern:        "/dhcp/option_code",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OptionCodeCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionCodeCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for option_codeCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionCodeDelete deletes the d h c p option code

  Use this method to delete an __OptionCode__ object.
The __OptionCode__ object defines a DHCP option code.
*/
func (a *Client) OptionCodeDelete(params *OptionCodeDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionCodeDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionCodeDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "option_codeDelete",
		Method:             "DELETE",
		PathPattern:        "/dhcp/option_code/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OptionCodeDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionCodeDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for option_codeDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionCodeList retrieves d h c p option codes

  Use this method to retrieve __OptionCode__ objects.
The __OptionCode__ object defines a DHCP option code.
*/
func (a *Client) OptionCodeList(params *OptionCodeListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionCodeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionCodeListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "option_codeList",
		Method:             "GET",
		PathPattern:        "/dhcp/option_code",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OptionCodeListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionCodeListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for option_codeList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionCodeRead retrieves the d h c p option code

  Use this method to retrieve an __OptionCode__ object.
The __OptionCode__ object defines a DHCP option code.
*/
func (a *Client) OptionCodeRead(params *OptionCodeReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionCodeReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionCodeReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "option_codeRead",
		Method:             "GET",
		PathPattern:        "/dhcp/option_code/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OptionCodeReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionCodeReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for option_codeRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionCodeUpdate updates the d h c p option code

  Use this method to update an __OptionCode__ object.
The __OptionCode__ object defines a DHCP option code.
*/
func (a *Client) OptionCodeUpdate(params *OptionCodeUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OptionCodeUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionCodeUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "option_codeUpdate",
		Method:             "PATCH",
		PathPattern:        "/dhcp/option_code/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OptionCodeUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionCodeUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for option_codeUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
