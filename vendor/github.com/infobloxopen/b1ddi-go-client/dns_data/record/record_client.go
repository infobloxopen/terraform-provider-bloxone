// Code generated by go-swagger; DO NOT EDIT.

package record

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	b1cliruntime "github.com/infobloxopen/b1ddi-go-client/runtime"
)

// New creates a new record API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for record API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	RecordCreate(params *RecordCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RecordCreateCreated, error)

	RecordDelete(params *RecordDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RecordDeleteNoContent, error)

	RecordList(params *RecordListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RecordListOK, error)

	RecordRead(params *RecordReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RecordReadOK, error)

	RecordSOASerialIncrement(params *RecordSOASerialIncrementParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RecordSOASerialIncrementCreated, error)

	RecordUpdate(params *RecordUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RecordUpdateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  RecordCreate creates the DNS resource record

  Use this method to create a DNS __Record__ object.
A __Record__ object represents a DNS resource record in an authoritative zone.
*/
func (a *Client) RecordCreate(params *RecordCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RecordCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRecordCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "recordCreate",
		Method:             "POST",
		PathPattern:        "/dns/record",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RecordCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RecordCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for recordCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RecordDelete moves the DNS resource record to recycle bin

  Use this method to move a DNS __Record__ object to the recycle bin.
A __Record__ object represents a DNS resource record in an authoritative zone.
*/
func (a *Client) RecordDelete(params *RecordDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RecordDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRecordDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "recordDelete",
		Method:             "DELETE",
		PathPattern:        "/dns/record/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RecordDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RecordDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for recordDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RecordList retrieves DNS resource records

  Use this method to retrieve DNS __Record__ objects.
A __Record__ object represents a DNS resource record in an authoritative zone.
*/
func (a *Client) RecordList(params *RecordListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RecordListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRecordListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "recordList",
		Method:             "GET",
		PathPattern:        "/dns/record",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RecordListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RecordListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for recordList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RecordRead retrieves the DNS resource record

  Use this method to retrieve a DNS __Record__ object.
A __Record__ object represents a DNS resource record in an authoritative zone.
*/
func (a *Client) RecordRead(params *RecordReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RecordReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRecordReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "recordRead",
		Method:             "GET",
		PathPattern:        "/dns/record/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RecordReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RecordReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for recordRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RecordSOASerialIncrement increments serial number for the s o a record

  Use this method to increment the serial number for an SOA (Start of Authority) _Record_ object.
A __Record__ object represents a DNS resource record in an authoritative zone.
*/
func (a *Client) RecordSOASerialIncrement(params *RecordSOASerialIncrementParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RecordSOASerialIncrementCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRecordSOASerialIncrementParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "recordSOASerialIncrement",
		Method:             "POST",
		PathPattern:        "/dns/record/{id}/serial_increment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RecordSOASerialIncrementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RecordSOASerialIncrementCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for recordSOASerialIncrement: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RecordUpdate updates the DNS resource record

  Use this method to update a DNS __Record__ object.
A __Record__ object represents a DNS resource record in an authoritative zone.
*/
func (a *Client) RecordUpdate(params *RecordUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RecordUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRecordUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "recordUpdate",
		Method:             "PATCH",
		PathPattern:        "/dns/record/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RecordUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	params.ID = b1cliruntime.TrimIDPrefix(op.PathPattern, params.ID)
	op.Params = params

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RecordUpdateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for recordUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
