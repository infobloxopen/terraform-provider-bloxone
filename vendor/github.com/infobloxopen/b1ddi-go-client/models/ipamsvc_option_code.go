// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpamsvcOptionCode OptionCode
//
// An __OptionCode__ (_dhcp/option_code_) defines a DHCP option code.
//
// swagger:model ipamsvcOptionCode
type IpamsvcOptionCode struct {

	// Indicates whether the option value is an array of the type or not.
	Array bool `json:"array,omitempty"`

	// The option code.
	// Required: true
	// Maximum: 254
	// Minimum: 1
	Code *int64 `json:"code,omitempty"`

	// The description for the option code. May contain 0 to 1024 characters. Can include UTF-8.
	Comment string `json:"comment,omitempty"`

	// Time when the object has been created.
	// Read Only: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// The resource identifier.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the option code. Must contain 1 to 256 characters. Can include UTF-8.
	// Required: true
	Name *string `json:"name,omitempty"`

	// The resource identifier.
	// Required: true
	OptionSpace *string `json:"option_space,omitempty"`

	// The source for the option code.
	//
	// Valid values are:
	//  * _dhcp_server_
	//  * _reserved_
	//  * _blox_one_ddi_
	//  * _customer_
	//
	// Defaults to _customer_.
	// Read Only: true
	Source string `json:"source,omitempty"`

	// The option type for the option code.
	//
	// Valid values are:
	// * _address4_
	// * _address6_
	// * _boolean_
	// * _empty_
	// * _fqdn_
	// * _int8_
	// * _int16_
	// * _int32_
	// * _text_
	// * _uint8_
	// * _uint16_
	// * _uint32_
	// Required: true
	Type *string `json:"type,omitempty"`

	// Time when the object has been updated. Equals to _created_at_ if not updated after creation.
	// Read Only: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this ipamsvc option code
func (m *IpamsvcOptionCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionSpace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcOptionCode) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	if err := validate.MinimumInt("code", "body", *m.Code, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("code", "body", *m.Code, 254, false); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcOptionCode) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcOptionCode) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcOptionCode) validateOptionSpace(formats strfmt.Registry) error {

	if err := validate.Required("option_space", "body", m.OptionSpace); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcOptionCode) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcOptionCode) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ipamsvc option code based on the context it is used
func (m *IpamsvcOptionCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcOptionCode) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcOptionCode) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcOptionCode) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "source", "body", string(m.Source)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcOptionCode) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpamsvcOptionCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamsvcOptionCode) UnmarshalBinary(b []byte) error {
	var res IpamsvcOptionCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
