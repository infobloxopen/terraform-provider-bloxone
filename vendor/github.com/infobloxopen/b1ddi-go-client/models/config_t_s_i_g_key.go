// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigTSIGKey TSIGKey
//
// Object representing TSIG key synced from Keys Service.
//
// swagger:model configTSIGKey
type ConfigTSIGKey struct {

	// TSIG key algorithm.
	//
	// Possible values:
	//  * _hmac_sha256_,
	//  * _hmac_sha1_,
	//  * _hmac_sha224_,
	//  * _hmac_sha384_,
	//  * _hmac_sha512_.
	Algorithm string `json:"algorithm,omitempty"`

	// Comment for TSIG key.
	Comment string `json:"comment,omitempty"`

	// The resource identifier.
	// Required: true
	Key *string `json:"key,omitempty"`

	// TSIG key name, FQDN.
	Name string `json:"name,omitempty"`

	// TSIG key name in punycode.
	// Read Only: true
	ProtocolName string `json:"protocol_name,omitempty"`

	// TSIG key secret, base64 string.
	Secret string `json:"secret,omitempty"`
}

// Validate validates this config t s i g key
func (m *ConfigTSIGKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigTSIGKey) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this config t s i g key based on the context it is used
func (m *ConfigTSIGKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProtocolName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigTSIGKey) contextValidateProtocolName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "protocol_name", "body", string(m.ProtocolName)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigTSIGKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigTSIGKey) UnmarshalBinary(b []byte) error {
	var res ConfigTSIGKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
