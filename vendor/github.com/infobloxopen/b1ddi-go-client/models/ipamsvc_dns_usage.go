// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpamsvcDNSUsage DNSRecordUsage
//
// The __DNSUsage__ object tracks DNS usage of a resource record on an address.
//
// swagger:model ipamsvcDNSUsage
type IpamsvcDNSUsage struct {

	// The absolute name of the resource record in associated zone.
	// Read Only: true
	AbsoluteName string `json:"absolute_name,omitempty"`

	// The address of the referenced record.
	// Read Only: true
	Address string `json:"address,omitempty"`

	// The description for the referenced record. May contain 0 to 1024 characters. Can include UTF-8.
	// Read Only: true
	Comment string `json:"comment,omitempty"`

	// The resource identifier.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name in zone of the referenced record.
	// Read Only: true
	Name string `json:"name,omitempty"`

	// The resource identifier.
	Record string `json:"record,omitempty"`

	// The resource identifier.
	Space string `json:"space,omitempty"`

	// The type of the referenced record.
	// Read Only: true
	Type string `json:"type,omitempty"`

	// The resource identifier.
	View string `json:"view,omitempty"`

	// The resource identifier.
	Zone string `json:"zone,omitempty"`
}

// Validate validates this ipamsvc DNS usage
func (m *IpamsvcDNSUsage) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this ipamsvc DNS usage based on the context it is used
func (m *IpamsvcDNSUsage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAbsoluteName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateComment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcDNSUsage) contextValidateAbsoluteName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "absolute_name", "body", string(m.AbsoluteName)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcDNSUsage) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "address", "body", string(m.Address)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcDNSUsage) contextValidateComment(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "comment", "body", string(m.Comment)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcDNSUsage) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcDNSUsage) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcDNSUsage) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpamsvcDNSUsage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamsvcDNSUsage) UnmarshalBinary(b []byte) error {
	var res IpamsvcDNSUsage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
