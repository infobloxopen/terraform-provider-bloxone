// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpamsvcAddress Address
//
// An __Address__ object (_ipam/address_) represents any single IP address within a given IP space.
//
// swagger:model ipamsvcAddress
type IpamsvcAddress struct {

	// The address in form "a.b.c.d".
	// Required: true
	Address *string `json:"address,omitempty"`

	// The description for the address object. May contain 0 to 1024 characters. Can include UTF-8.
	Comment string `json:"comment,omitempty"`

	// Time when the object has been created.
	// Read Only: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// The DHCP information associated with this object.
	// Read Only: true
	DhcpInfo *IpamsvcDHCPInfo `json:"dhcp_info,omitempty"`

	// The resource identifier.
	Host string `json:"host,omitempty"`

	// The hardware address associated with this IP address.
	Hwaddr string `json:"hwaddr,omitempty"`

	// The resource identifier.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The name of the network interface card (NIC) associated with the address, if any.
	Interface string `json:"interface,omitempty"`

	// The list of all names associated with this address.
	Names []*IpamsvcName `json:"names,omitempty"`

	// The resource identifier.
	Parent string `json:"parent,omitempty"`

	// The type of protocol (_ipv4_ or _ipv6_).
	// Read Only: true
	Protocol string `json:"protocol,omitempty"`

	// The resource identifier.
	Range string `json:"range,omitempty"`

	// The resource identifier.
	// Required: true
	Space *string `json:"space,omitempty"`

	// The state of the address (_used_ or _free_).
	// Read Only: true
	State string `json:"state,omitempty"`

	// The tags for this address in JSON format.
	Tags interface{} `json:"tags,omitempty"`

	// Time when the object has been updated. Equals to _created_at_ if not updated after creation.
	// Read Only: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// The usage is a combination of indicators, each tracking a specific associated use. Listed below are usage indicators with their meaning:
	//  usage indicator        | description
	//  ---------------------- | --------------------------------
	//  _IPAM_                 |  Address was created by the IPAM component.
	//  _IPAM_, _RESERVED_     |  Address was created by the API call _ipam/address_ or _ipam/host_.
	//  _IPAM_, _NETWORK_      |  Address was automatically created by the IPAM component and is the network address of the parent subnet.
	//  _IPAM_, _BROADCAST_    |  Address was automatically created by the IPAM component and is the broadcast address of the parent subnet.
	//  _DHCP_                 |  Address was created by the DHCP component.
	//  _DHCP_, _FIXEDADDRESS_ |  Address was created by the API call _dhcp/fixed_address_.
	//  _DHCP_, _LEASED_       |  An active lease for that address was issued by a DHCP server.
	//  _DNS_                  |  Address is used by one or more DNS records.
	// Read Only: true
	Usage []string `json:"usage,omitempty"`
}

// Validate validates this ipamsvc address
func (m *IpamsvcAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDhcpInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcAddress) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcAddress) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcAddress) validateDhcpInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DhcpInfo) { // not required
		return nil
	}

	if m.DhcpInfo != nil {
		if err := m.DhcpInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcp_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcp_info")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcAddress) validateNames(formats strfmt.Registry) error {
	if swag.IsZero(m.Names) { // not required
		return nil
	}

	for i := 0; i < len(m.Names); i++ {
		if swag.IsZero(m.Names[i]) { // not required
			continue
		}

		if m.Names[i] != nil {
			if err := m.Names[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("names" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("names" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IpamsvcAddress) validateSpace(formats strfmt.Registry) error {

	if err := validate.Required("space", "body", m.Space); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcAddress) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ipamsvc address based on the context it is used
func (m *IpamsvcAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDhcpInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNames(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtocol(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcAddress) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcAddress) contextValidateDhcpInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DhcpInfo != nil {
		if err := m.DhcpInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcp_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcp_info")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcAddress) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcAddress) contextValidateNames(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Names); i++ {

		if m.Names[i] != nil {
			if err := m.Names[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("names" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("names" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IpamsvcAddress) contextValidateProtocol(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "protocol", "body", string(m.Protocol)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcAddress) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcAddress) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcAddress) contextValidateUsage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "usage", "body", []string(m.Usage)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpamsvcAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamsvcAddress) UnmarshalBinary(b []byte) error {
	var res IpamsvcAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
