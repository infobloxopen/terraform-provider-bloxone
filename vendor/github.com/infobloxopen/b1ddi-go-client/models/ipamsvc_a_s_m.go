// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpamsvcASM ASM
//
// The __ASM__ object is a synthetic object representing the suggestions from the Automated Scope Management suggestion engine for expanding subnet or range.
//
// swagger:model ipamsvcASM
type IpamsvcASM struct {

	// The end IP address when adding to the back.
	// Read Only: true
	BackEnd string `json:"back_end,omitempty"`

	// The start IP address when adding to the back.
	// Read Only: true
	BackStart string `json:"back_start,omitempty"`

	// The end IP address when adding to the back.
	// Read Only: true
	BothEnd string `json:"both_end,omitempty"`

	// The start IP address when adding to both front and back.
	// Read Only: true
	BothStart string `json:"both_start,omitempty"`

	// The end IP address when adding to the front.
	// Read Only: true
	FrontEnd string `json:"front_end,omitempty"`

	// The start IP address when adding to the front.
	// Read Only: true
	FrontStart string `json:"front_start,omitempty"`

	// Calculated number of addresses to grow range; its value is determined by asm_config growth factor, type, and min_unused after the expansion.
	// Read Only: true
	Growth int32 `json:"growth,omitempty"`

	// The resource identifier.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Either the value from the ASM configuration or -1 if the estimate is that utilization will not exceed the threshold.
	// Read Only: true
	Lookahead int32 `json:"lookahead,omitempty"`

	// The end IP address of the range.
	RangeEnd string `json:"range_end,omitempty"`

	// The resource identifier.
	RangeID string `json:"range_id,omitempty"`

	// The start IP address of the range.
	RangeStart string `json:"range_start,omitempty"`

	// The suggested subnet expansion.
	// Read Only: true
	SubnetAddress string `json:"subnet_address,omitempty"`

	// The CIDR of the subnet.
	// Read Only: true
	SubnetCidr int64 `json:"subnet_cidr,omitempty"`

	// Indicates where the subnet may expand. As the subnet can only be expanded by one bit at a time,
	// it can only grow in one of the two directions. It is set to _none_ if the subnet can't be expanded.
	//
	// Valid values are:
	// * _front_
	// * _back_
	// * _none_
	// Read Only: true
	SubnetDirection string `json:"subnet_direction,omitempty"`

	// The resource identifier.
	// Required: true
	SubnetID *string `json:"subnet_id,omitempty"`

	// The resource identifier.
	SubnetRange string `json:"subnet_range,omitempty"`

	// The suggested new range end in expanded subnet.
	// Read Only: true
	SubnetRangeEnd string `json:"subnet_range_end,omitempty"`

	// The suggested new range start in expanded subnet.
	// Read Only: true
	SubnetRangeStart string `json:"subnet_range_start,omitempty"`

	// Indicates if future notifications for this subnet should be suppressed.
	//
	// Valid values are:
	// * _no_
	// * _time_
	// * _permanent_
	//
	// If set to _permanent_ notifications are suppressed until the administrator modifies the configuration for the subnet.
	// If set to _time_ notifications are suppressed until the specified time.
	// Defaults to _no_.
	Suppress string `json:"suppress,omitempty"`

	// The time duration in days to suppress the notifications for this subnet.
	SuppressTime int64 `json:"suppress_time,omitempty"`

	// The utilization threshold as per ASM configuration.
	// Read Only: true
	ThresholdUtilization int64 `json:"threshold_utilization,omitempty"`

	// The object to update.
	//
	// Valid values are:
	// * _range_
	// * _subnet_
	// * _none_
	Update string `json:"update,omitempty"`

	// The utilization of DHCP addresses in the subnet.
	// Read Only: true
	Utilization int64 `json:"utilization,omitempty"`
}

// Validate validates this ipamsvc a s m
func (m *IpamsvcASM) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSubnetID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcASM) validateSubnetID(formats strfmt.Registry) error {

	if err := validate.Required("subnet_id", "body", m.SubnetID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ipamsvc a s m based on the context it is used
func (m *IpamsvcASM) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackEnd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackStart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBothEnd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBothStart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFrontEnd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFrontStart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGrowth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLookahead(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnetAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnetCidr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnetDirection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnetRangeEnd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubnetRangeStart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThresholdUtilization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUtilization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcASM) contextValidateBackEnd(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "back_end", "body", string(m.BackEnd)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcASM) contextValidateBackStart(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "back_start", "body", string(m.BackStart)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcASM) contextValidateBothEnd(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "both_end", "body", string(m.BothEnd)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcASM) contextValidateBothStart(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "both_start", "body", string(m.BothStart)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcASM) contextValidateFrontEnd(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "front_end", "body", string(m.FrontEnd)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcASM) contextValidateFrontStart(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "front_start", "body", string(m.FrontStart)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcASM) contextValidateGrowth(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "growth", "body", int32(m.Growth)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcASM) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcASM) contextValidateLookahead(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lookahead", "body", int32(m.Lookahead)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcASM) contextValidateSubnetAddress(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "subnet_address", "body", string(m.SubnetAddress)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcASM) contextValidateSubnetCidr(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "subnet_cidr", "body", int64(m.SubnetCidr)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcASM) contextValidateSubnetDirection(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "subnet_direction", "body", string(m.SubnetDirection)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcASM) contextValidateSubnetRangeEnd(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "subnet_range_end", "body", string(m.SubnetRangeEnd)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcASM) contextValidateSubnetRangeStart(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "subnet_range_start", "body", string(m.SubnetRangeStart)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcASM) contextValidateThresholdUtilization(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "threshold_utilization", "body", int64(m.ThresholdUtilization)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcASM) contextValidateUtilization(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "utilization", "body", int64(m.Utilization)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpamsvcASM) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamsvcASM) UnmarshalBinary(b []byte) error {
	var res IpamsvcASM
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
