// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpamsvcDDNSZone DDNSZone
//
// A __DDNSZone__ object (_dhcp/ddns_zone_) represents a DNS zone that can accept dynamic DNS updates from DHCP.
//
// swagger:model ipamsvcDDNSZone
type IpamsvcDDNSZone struct {

	// Zone FQDN.
	//
	// If _zone_ is defined, the _fqdn_ field must be empty.
	Fqdn string `json:"fqdn,omitempty"`

	// The IPv4 addresses of the nameservers in the zone.
	//
	// Each IP should be unique across the list of nameservers.
	Nameservers []string `json:"nameservers"`

	// Indicates if TSIG key should be used for the update.
	//
	// Defaults to _false_.
	TsigEnabled bool `json:"tsig_enabled,omitempty"`

	// The TSIG key. Required if _tsig_enable_ is _true_.
	//
	// Defaults to empty.
	TsigKey *IpamsvcTSIGKey `json:"tsig_key,omitempty"`

	// The resource identifier.
	View string `json:"view,omitempty"`

	// The name of the view.
	// Read Only: true
	ViewName string `json:"view_name,omitempty"`

	// The resource identifier.
	// Required: true
	Zone *string `json:"zone,omitempty"`
}

// Validate validates this ipamsvc d DNS zone
func (m *IpamsvcDDNSZone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTsigKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcDDNSZone) validateTsigKey(formats strfmt.Registry) error {
	if swag.IsZero(m.TsigKey) { // not required
		return nil
	}

	if m.TsigKey != nil {
		if err := m.TsigKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tsig_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tsig_key")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDDNSZone) validateZone(formats strfmt.Registry) error {

	if err := validate.Required("zone", "body", m.Zone); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ipamsvc d DNS zone based on the context it is used
func (m *IpamsvcDDNSZone) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTsigKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcDDNSZone) contextValidateTsigKey(ctx context.Context, formats strfmt.Registry) error {

	if m.TsigKey != nil {
		if err := m.TsigKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tsig_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tsig_key")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDDNSZone) contextValidateViewName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "view_name", "body", string(m.ViewName)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpamsvcDDNSZone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamsvcDDNSZone) UnmarshalBinary(b []byte) error {
	var res IpamsvcDDNSZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
