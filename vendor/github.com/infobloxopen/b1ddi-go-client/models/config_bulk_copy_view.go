// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigBulkCopyView config bulk copy view
//
// swagger:model configBulkCopyView
type ConfigBulkCopyView struct {

	// Optional. Authoritative zone related configuration.
	AuthZoneConfig *ConfigAuthZoneConfig `json:"auth_zone_config,omitempty"`

	// Optional. Forward zone related configuration.
	ForwardZoneConfig *ConfigForwardZoneConfig `json:"forward_zone_config,omitempty"`

	// Indicates whether child objects should be copied or not.
	//
	// Defaults to _false_. Reserved for future use.
	Recursive bool `json:"recursive,omitempty"`

	// The resource identifier.
	// Required: true
	Resources []string `json:"resources"`

	// Optional. Secondary zone related configuration.
	SecondaryZoneConfig *ConfigAuthZoneConfig `json:"secondary_zone_config,omitempty"`

	// Indicates whether copying should skip object in case of error and continue with next, or abort copying in case of error.
	//
	// Defaults to _false_.
	SkipOnError bool `json:"skip_on_error,omitempty"`

	// The resource identifier.
	// Required: true
	Target *string `json:"target,omitempty"`
}

// Validate validates this config bulk copy view
func (m *ConfigBulkCopyView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthZoneConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForwardZoneConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryZoneConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigBulkCopyView) validateAuthZoneConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthZoneConfig) { // not required
		return nil
	}

	if m.AuthZoneConfig != nil {
		if err := m.AuthZoneConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth_zone_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auth_zone_config")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigBulkCopyView) validateForwardZoneConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ForwardZoneConfig) { // not required
		return nil
	}

	if m.ForwardZoneConfig != nil {
		if err := m.ForwardZoneConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forward_zone_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("forward_zone_config")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigBulkCopyView) validateResources(formats strfmt.Registry) error {

	if err := validate.Required("resources", "body", m.Resources); err != nil {
		return err
	}

	return nil
}

func (m *ConfigBulkCopyView) validateSecondaryZoneConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryZoneConfig) { // not required
		return nil
	}

	if m.SecondaryZoneConfig != nil {
		if err := m.SecondaryZoneConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondary_zone_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondary_zone_config")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigBulkCopyView) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this config bulk copy view based on the context it is used
func (m *ConfigBulkCopyView) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthZoneConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateForwardZoneConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondaryZoneConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigBulkCopyView) contextValidateAuthZoneConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthZoneConfig != nil {
		if err := m.AuthZoneConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth_zone_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auth_zone_config")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigBulkCopyView) contextValidateForwardZoneConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ForwardZoneConfig != nil {
		if err := m.ForwardZoneConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forward_zone_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("forward_zone_config")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigBulkCopyView) contextValidateSecondaryZoneConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.SecondaryZoneConfig != nil {
		if err := m.SecondaryZoneConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondary_zone_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondary_zone_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigBulkCopyView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigBulkCopyView) UnmarshalBinary(b []byte) error {
	var res ConfigBulkCopyView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
