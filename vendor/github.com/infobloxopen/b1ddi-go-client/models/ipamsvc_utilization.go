// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpamsvcUtilization Utilization
//
// The __Utilization__ object represents IP address usage statistics for an object.
//
// swagger:model ipamsvcUtilization
type IpamsvcUtilization struct {

	// The percentage of abandoned IP addresses relative to the total IP addresses available in the scope of the object.
	// Read Only: true
	// Maximum: 100
	AbandonUtilization int64 `json:"abandon_utilization,omitempty"`

	// The number of IP addresses in the scope of the object which are in the abandoned state (issued by a DHCP server and then declined by the client).
	// Read Only: true
	Abandoned string `json:"abandoned,omitempty"`

	// The number of IP addresses handed out by DHCP in the scope of the object. This includes all leased addresses, fixed addresses that are defined but not currently leased and abandoned leases.
	// Read Only: true
	Dynamic string `json:"dynamic,omitempty"`

	// The number of IP addresses available in the scope of the object.
	// Read Only: true
	Free string `json:"free,omitempty"`

	// The number of defined IP addresses such as reservations or DNS records. It can be computed as _static_ = _used_ - _dynamic_.
	// Read Only: true
	Static string `json:"static,omitempty"`

	// The total number of IP addresses available in the scope of the object.
	// Read Only: true
	Total string `json:"total,omitempty"`

	// The number of IP addresses used in the scope of the object.
	// Read Only: true
	Used string `json:"used,omitempty"`

	// The percentage of used IP addresses relative to the total IP addresses available in the scope of the object.
	// Read Only: true
	// Maximum: 100
	Utilization int64 `json:"utilization,omitempty"`
}

// Validate validates this ipamsvc utilization
func (m *IpamsvcUtilization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbandonUtilization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUtilization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcUtilization) validateAbandonUtilization(formats strfmt.Registry) error {
	if swag.IsZero(m.AbandonUtilization) { // not required
		return nil
	}

	if err := validate.MaximumInt("abandon_utilization", "body", m.AbandonUtilization, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcUtilization) validateUtilization(formats strfmt.Registry) error {
	if swag.IsZero(m.Utilization) { // not required
		return nil
	}

	if err := validate.MaximumInt("utilization", "body", m.Utilization, 100, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ipamsvc utilization based on the context it is used
func (m *IpamsvcUtilization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAbandonUtilization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAbandoned(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDynamic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFree(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUtilization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcUtilization) contextValidateAbandonUtilization(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "abandon_utilization", "body", int64(m.AbandonUtilization)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcUtilization) contextValidateAbandoned(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "abandoned", "body", string(m.Abandoned)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcUtilization) contextValidateDynamic(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dynamic", "body", string(m.Dynamic)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcUtilization) contextValidateFree(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "free", "body", string(m.Free)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcUtilization) contextValidateStatic(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "static", "body", string(m.Static)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcUtilization) contextValidateTotal(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "total", "body", string(m.Total)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcUtilization) contextValidateUsed(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "used", "body", string(m.Used)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcUtilization) contextValidateUtilization(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "utilization", "body", int64(m.Utilization)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpamsvcUtilization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamsvcUtilization) UnmarshalBinary(b []byte) error {
	var res IpamsvcUtilization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
