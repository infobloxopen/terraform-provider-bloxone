// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigView View
//
// Named collection of DNS View settings.
//
// swagger:model configView
type ConfigView struct {

	// Optional. Comment for view.
	Comment string `json:"comment,omitempty"`

	// The timestamp when the object has been created.
	// Read Only: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Optional. List of custom root nameservers. The order does not matter.
	//
	// Error if empty while _custom_root_ns_enabled_ is _true_.
	// Error if there are duplicate items in the list.
	//
	// Defaults to empty.
	CustomRootNs []*ConfigRootNS `json:"custom_root_ns,omitempty"`

	// Optional. _true_ to use custom root nameservers instead of the default ones.
	//
	// The _custom_root_ns_ is validated when enabled.
	//
	// Defaults to _false_.
	CustomRootNsEnabled bool `json:"custom_root_ns_enabled,omitempty"`

	// Optional. _true_ to disable object. A disabled object is effectively non-existent when generating configuration.
	Disabled bool `json:"disabled,omitempty"`

	// Optional. _true_ to perform DNSSEC validation.
	// Ignored if _dnssec_enabled_ is _false_.
	//
	// Defaults to _true_.
	DnssecEnableValidation *bool `json:"dnssec_enable_validation,omitempty"`

	// Optional. Master toggle for all DNSSEC processing.
	// Other _dnssec_*_ configuration is unused if this is disabled.
	//
	// Defaults to _true_.
	DnssecEnabled *bool `json:"dnssec_enabled,omitempty"`

	// DNSSEC root keys. The root keys are not configurable.
	//
	// A default list is provided by cloud management and included here for config generation.
	// Read Only: true
	DnssecRootKeys []*ConfigTrustAnchor `json:"dnssec_root_keys,omitempty"`

	// Optional. DNSSEC trust anchors.
	//
	// Error if there are list items with duplicate (_zone_, _sep_, _algorithm_) combinations.
	//
	// Defaults to empty.
	DnssecTrustAnchors []*ConfigTrustAnchor `json:"dnssec_trust_anchors,omitempty"`

	// Optional. _true_ to reject expired DNSSEC keys.
	// Ignored if either _dnssec_enabled_ or _dnssec_enable_validation_ is _false_.
	//
	// Defaults to _true_.
	DnssecValidateExpiry *bool `json:"dnssec_validate_expiry,omitempty"`

	// Optional. _true_ to enable EDNS client subnet for recursive queries.
	// Other _ecs_*_ fields are ignored if this field is not enabled.
	//
	// Defaults to _false-.
	EcsEnabled bool `json:"ecs_enabled,omitempty"`

	// Optional. _true_ to enable ECS options in outbound queries. This functionality has additional overhead so it is disabled by default.
	//
	// Defaults to _false_.
	EcsForwarding bool `json:"ecs_forwarding,omitempty"`

	// Optional. Maximum scope length for v4 ECS.
	//
	// Unsigned integer, min 1 max 24
	//
	// Defaults to 24.
	EcsPrefixV4 int64 `json:"ecs_prefix_v4,omitempty"`

	// Optional. Maximum scope length for v6 ECS.
	//
	// Unsigned integer, min 1 max 56
	//
	// Defaults to 56.
	EcsPrefixV6 int64 `json:"ecs_prefix_v6,omitempty"`

	// Optional. List of zones where ECS queries may be sent.
	//
	// Error if empty while _ecs_enabled_ is _true_.
	// Error if there are duplicate FQDNs in the list.
	//
	// Defaults to empty.
	EcsZones []*ConfigECSZone `json:"ecs_zones,omitempty"`

	// Optional. _edns_udp_size_ represents the edns UDP size.
	// The size a querying DNS server advertises to the DNS server itâ€™s sending a query to.
	//
	// Defaults to 1232 bytes.
	EdnsUDPSize int64 `json:"edns_udp_size,omitempty"`

	// Optional. List of forwarders.
	//
	// Error if empty while _forwarders_only_ is _true_.
	// Error if there are items in the list with duplicate addresses.
	//
	// Defaults to empty.
	Forwarders []*ConfigForwarder `json:"forwarders,omitempty"`

	// Optional. _true_ to only forward.
	//
	// Defaults to _false_.
	ForwardersOnly bool `json:"forwarders_only,omitempty"`

	// _gss_tsig_enabled_ enables/disables GSS-TSIG signed dynamic updates.
	//
	// Defaults to _false_.
	GssTsigEnabled bool `json:"gss_tsig_enabled,omitempty"`

	// The resource identifier.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Optional. Inheritance configuration.
	InheritanceSources *ConfigViewInheritance `json:"inheritance_sources,omitempty"`

	// The resource identifier.
	IPSpaces []string `json:"ip_spaces,omitempty"`

	// Optional. Unused in the current on-prem DNS server implementation.
	//
	// Unsigned integer, min 0 max 3600 (1h).
	//
	// Defaults to 600.
	LameTTL int64 `json:"lame_ttl,omitempty"`

	// Optional. Specifies which clients have access to the view.
	//
	// Defaults to empty.
	MatchClientsACL []*ConfigACLItem `json:"match_clients_acl,omitempty"`

	// Optional. Specifies which destination addresses have access to the view.
	//
	// Defaults to empty.
	MatchDestinationsACL []*ConfigACLItem `json:"match_destinations_acl,omitempty"`

	// Optional. If _true_ only recursive queries from matching clients access the view.
	//
	// Defaults to _false_.
	MatchRecursiveOnly bool `json:"match_recursive_only,omitempty"`

	// Optional. Seconds to cache positive responses.
	//
	// Unsigned integer, min 1 max 604800 (7d).
	//
	// Defaults to 604800 (7d).
	MaxCacheTTL int64 `json:"max_cache_ttl,omitempty"`

	// Optional. Seconds to cache negative responses.
	//
	// Unsigned integer, min 1 max 604800 (7d).
	//
	// Defaults to 10800 (3h).
	MaxNegativeTTL int64 `json:"max_negative_ttl,omitempty"`

	// Optional. _max_udp_size_ represents maximum UDP payload size.
	// The maximum number of bytes a responding DNS server will send to a UDP datagram.
	//
	// Defaults to 1232 bytes.
	MaxUDPSize int64 `json:"max_udp_size,omitempty"`

	// Optional. When enabled, the DNS server will only add records to the authority and additional data sections when they are required.
	//
	// Defaults to _false_.
	MinimalResponses bool `json:"minimal_responses,omitempty"`

	// Name of view.
	// Required: true
	Name *string `json:"name,omitempty"`

	// _notify_ all external secondary DNS servers.
	//
	// Defaults to _false_.
	Notify bool `json:"notify,omitempty"`

	// Optional. Clients must match this ACL to make authoritative queries.
	// Also used for recursive queries if that ACL is unset.
	//
	// Defaults to empty.
	QueryACL []*ConfigACLItem `json:"query_acl,omitempty"`

	// Optional. Clients must match this ACL to make recursive queries. If this ACL is empty, then the _query_acl_ will be used instead.
	//
	// Defaults to empty.
	RecursionACL []*ConfigACLItem `json:"recursion_acl,omitempty"`

	// Optional. _true_ to allow recursive DNS queries.
	//
	// Defaults to _true_.
	RecursionEnabled *bool `json:"recursion_enabled,omitempty"`

	// Tagging specifics.
	Tags interface{} `json:"tags,omitempty"`

	// Optional. Clients must match this ACL to receive zone transfers.
	//
	// Defaults to empty.
	TransferACL []*ConfigACLItem `json:"transfer_acl,omitempty"`

	// Optional. Specifies which hosts are allowed to issue Dynamic DNS updates for authoritative zones of _primary_type_ _cloud_.
	//
	// Defaults to empty.
	UpdateACL []*ConfigACLItem `json:"update_acl,omitempty"`

	// The timestamp when the object has been updated. Equals to _created_at_ if not updated after creation.
	// Read Only: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Optional. Use default forwarders to resolve queries for subzones.
	//
	// Defaults to _true_.
	UseForwardersForSubzones *bool `json:"use_forwarders_for_subzones,omitempty"`

	// Optional. ZoneAuthority.
	ZoneAuthority *ConfigZoneAuthority `json:"zone_authority,omitempty"`
}

// Validate validates this config view
func (m *ConfigView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomRootNs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDnssecRootKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDnssecTrustAnchors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEcsZones(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForwarders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInheritanceSources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchClientsACL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchDestinationsACL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryACL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecursionACL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransferACL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateACL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoneAuthority(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigView) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConfigView) validateCustomRootNs(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomRootNs) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomRootNs); i++ {
		if swag.IsZero(m.CustomRootNs[i]) { // not required
			continue
		}

		if m.CustomRootNs[i] != nil {
			if err := m.CustomRootNs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_root_ns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("custom_root_ns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) validateDnssecRootKeys(formats strfmt.Registry) error {
	if swag.IsZero(m.DnssecRootKeys) { // not required
		return nil
	}

	for i := 0; i < len(m.DnssecRootKeys); i++ {
		if swag.IsZero(m.DnssecRootKeys[i]) { // not required
			continue
		}

		if m.DnssecRootKeys[i] != nil {
			if err := m.DnssecRootKeys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dnssec_root_keys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dnssec_root_keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) validateDnssecTrustAnchors(formats strfmt.Registry) error {
	if swag.IsZero(m.DnssecTrustAnchors) { // not required
		return nil
	}

	for i := 0; i < len(m.DnssecTrustAnchors); i++ {
		if swag.IsZero(m.DnssecTrustAnchors[i]) { // not required
			continue
		}

		if m.DnssecTrustAnchors[i] != nil {
			if err := m.DnssecTrustAnchors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dnssec_trust_anchors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dnssec_trust_anchors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) validateEcsZones(formats strfmt.Registry) error {
	if swag.IsZero(m.EcsZones) { // not required
		return nil
	}

	for i := 0; i < len(m.EcsZones); i++ {
		if swag.IsZero(m.EcsZones[i]) { // not required
			continue
		}

		if m.EcsZones[i] != nil {
			if err := m.EcsZones[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ecs_zones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ecs_zones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) validateForwarders(formats strfmt.Registry) error {
	if swag.IsZero(m.Forwarders) { // not required
		return nil
	}

	for i := 0; i < len(m.Forwarders); i++ {
		if swag.IsZero(m.Forwarders[i]) { // not required
			continue
		}

		if m.Forwarders[i] != nil {
			if err := m.Forwarders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("forwarders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("forwarders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) validateInheritanceSources(formats strfmt.Registry) error {
	if swag.IsZero(m.InheritanceSources) { // not required
		return nil
	}

	if m.InheritanceSources != nil {
		if err := m.InheritanceSources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inheritance_sources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inheritance_sources")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigView) validateMatchClientsACL(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchClientsACL) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchClientsACL); i++ {
		if swag.IsZero(m.MatchClientsACL[i]) { // not required
			continue
		}

		if m.MatchClientsACL[i] != nil {
			if err := m.MatchClientsACL[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("match_clients_acl" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("match_clients_acl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) validateMatchDestinationsACL(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchDestinationsACL) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchDestinationsACL); i++ {
		if swag.IsZero(m.MatchDestinationsACL[i]) { // not required
			continue
		}

		if m.MatchDestinationsACL[i] != nil {
			if err := m.MatchDestinationsACL[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("match_destinations_acl" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("match_destinations_acl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ConfigView) validateQueryACL(formats strfmt.Registry) error {
	if swag.IsZero(m.QueryACL) { // not required
		return nil
	}

	for i := 0; i < len(m.QueryACL); i++ {
		if swag.IsZero(m.QueryACL[i]) { // not required
			continue
		}

		if m.QueryACL[i] != nil {
			if err := m.QueryACL[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("query_acl" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("query_acl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) validateRecursionACL(formats strfmt.Registry) error {
	if swag.IsZero(m.RecursionACL) { // not required
		return nil
	}

	for i := 0; i < len(m.RecursionACL); i++ {
		if swag.IsZero(m.RecursionACL[i]) { // not required
			continue
		}

		if m.RecursionACL[i] != nil {
			if err := m.RecursionACL[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recursion_acl" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("recursion_acl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) validateTransferACL(formats strfmt.Registry) error {
	if swag.IsZero(m.TransferACL) { // not required
		return nil
	}

	for i := 0; i < len(m.TransferACL); i++ {
		if swag.IsZero(m.TransferACL[i]) { // not required
			continue
		}

		if m.TransferACL[i] != nil {
			if err := m.TransferACL[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transfer_acl" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transfer_acl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) validateUpdateACL(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateACL) { // not required
		return nil
	}

	for i := 0; i < len(m.UpdateACL); i++ {
		if swag.IsZero(m.UpdateACL[i]) { // not required
			continue
		}

		if m.UpdateACL[i] != nil {
			if err := m.UpdateACL[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("update_acl" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("update_acl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConfigView) validateZoneAuthority(formats strfmt.Registry) error {
	if swag.IsZero(m.ZoneAuthority) { // not required
		return nil
	}

	if m.ZoneAuthority != nil {
		if err := m.ZoneAuthority.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone_authority")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zone_authority")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this config view based on the context it is used
func (m *ConfigView) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomRootNs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDnssecRootKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDnssecTrustAnchors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEcsZones(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateForwarders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInheritanceSources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchClientsACL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchDestinationsACL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueryACL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecursionACL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransferACL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateACL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZoneAuthority(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigView) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ConfigView) contextValidateCustomRootNs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomRootNs); i++ {

		if m.CustomRootNs[i] != nil {
			if err := m.CustomRootNs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_root_ns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("custom_root_ns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) contextValidateDnssecRootKeys(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dnssec_root_keys", "body", []*ConfigTrustAnchor(m.DnssecRootKeys)); err != nil {
		return err
	}

	for i := 0; i < len(m.DnssecRootKeys); i++ {

		if m.DnssecRootKeys[i] != nil {
			if err := m.DnssecRootKeys[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dnssec_root_keys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dnssec_root_keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) contextValidateDnssecTrustAnchors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DnssecTrustAnchors); i++ {

		if m.DnssecTrustAnchors[i] != nil {
			if err := m.DnssecTrustAnchors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dnssec_trust_anchors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dnssec_trust_anchors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) contextValidateEcsZones(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EcsZones); i++ {

		if m.EcsZones[i] != nil {
			if err := m.EcsZones[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ecs_zones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ecs_zones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) contextValidateForwarders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Forwarders); i++ {

		if m.Forwarders[i] != nil {
			if err := m.Forwarders[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("forwarders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("forwarders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigView) contextValidateInheritanceSources(ctx context.Context, formats strfmt.Registry) error {

	if m.InheritanceSources != nil {
		if err := m.InheritanceSources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inheritance_sources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inheritance_sources")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigView) contextValidateMatchClientsACL(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MatchClientsACL); i++ {

		if m.MatchClientsACL[i] != nil {
			if err := m.MatchClientsACL[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("match_clients_acl" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("match_clients_acl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) contextValidateMatchDestinationsACL(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MatchDestinationsACL); i++ {

		if m.MatchDestinationsACL[i] != nil {
			if err := m.MatchDestinationsACL[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("match_destinations_acl" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("match_destinations_acl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) contextValidateQueryACL(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.QueryACL); i++ {

		if m.QueryACL[i] != nil {
			if err := m.QueryACL[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("query_acl" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("query_acl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) contextValidateRecursionACL(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RecursionACL); i++ {

		if m.RecursionACL[i] != nil {
			if err := m.RecursionACL[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recursion_acl" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("recursion_acl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) contextValidateTransferACL(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TransferACL); i++ {

		if m.TransferACL[i] != nil {
			if err := m.TransferACL[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transfer_acl" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transfer_acl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) contextValidateUpdateACL(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UpdateACL); i++ {

		if m.UpdateACL[i] != nil {
			if err := m.UpdateACL[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("update_acl" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("update_acl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigView) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ConfigView) contextValidateZoneAuthority(ctx context.Context, formats strfmt.Registry) error {

	if m.ZoneAuthority != nil {
		if err := m.ZoneAuthority.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone_authority")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zone_authority")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigView) UnmarshalBinary(b []byte) error {
	var res ConfigView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
