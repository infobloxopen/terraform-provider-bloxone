// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IpamsvcServerInheritance ServerInheritance
//
// The inheritance configuration specifies how and which fields _Server_ object (DHCP Config Profile) inherits from _Global_ parent.
//
// swagger:model ipamsvcServerInheritance
type IpamsvcServerInheritance struct {

	// The inheritance configuration for _ddns_enabled_, _ddns_send_updates_, _ddns_domain_, _ddns_zones_ fields from _Server_ object.
	DdnsBlock *IpamsvcInheritedDDNSBlock `json:"ddns_block,omitempty"`

	// The inheritance configuration for _ddns_client_update_ field from _Server_ object.
	DdnsClientUpdate *InheritanceInheritedString `json:"ddns_client_update,omitempty"`

	// The inheritance configuration for _ddns_generate_name_ and _ddns_generated_prefix_ fields from _Server_ object.
	DdnsHostnameBlock *IpamsvcInheritedDDNSHostnameBlock `json:"ddns_hostname_block,omitempty"`

	// The inheritance configuration for _ddns_update_on_renew_ field from _Server_ object.
	DdnsUpdateOnRenew *InheritanceInheritedBool `json:"ddns_update_on_renew,omitempty"`

	// The inheritance configuration for _ddns_use_conflict_resolution_ field from _Server_ object.
	DdnsUseConflictResolution *InheritanceInheritedBool `json:"ddns_use_conflict_resolution,omitempty"`

	// The inheritance configuration for _dhcp_config_ field from _Server_ object.
	DhcpConfig *IpamsvcInheritedDHCPConfig `json:"dhcp_config,omitempty"`

	// The inheritance configuration for _dhcp_options_ field from _Server_ object.
	DhcpOptions *IpamsvcInheritedDHCPOptionList `json:"dhcp_options,omitempty"`

	// The inheritance configuration for _header_option_filename_ field.
	HeaderOptionFilename *InheritanceInheritedString `json:"header_option_filename,omitempty"`

	// The inheritance configuration for _header_option_server_address_ field.
	HeaderOptionServerAddress *InheritanceInheritedString `json:"header_option_server_address,omitempty"`

	// The inheritance configuration for _header_option_server_name_ field.
	HeaderOptionServerName *InheritanceInheritedString `json:"header_option_server_name,omitempty"`

	// The inheritance configuration for _hostname_rewrite_enabled_, _hostname_rewrite_regex_, _hostname_rewrite_char_ fields from _Server_ object.
	HostnameRewriteBlock *IpamsvcInheritedHostnameRewriteBlock `json:"hostname_rewrite_block,omitempty"`

	// The inheritance configuration for _vendor_specific_option_option_space_ field from _Server_ object.
	VendorSpecificOptionOptionSpace *InheritanceInheritedIdentifier `json:"vendor_specific_option_option_space,omitempty"`
}

// Validate validates this ipamsvc server inheritance
func (m *IpamsvcServerInheritance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDdnsBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdnsClientUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdnsHostnameBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdnsUpdateOnRenew(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdnsUseConflictResolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDhcpConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDhcpOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaderOptionFilename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaderOptionServerAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaderOptionServerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostnameRewriteBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendorSpecificOptionOptionSpace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcServerInheritance) validateDdnsBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.DdnsBlock) { // not required
		return nil
	}

	if m.DdnsBlock != nil {
		if err := m.DdnsBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_block")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) validateDdnsClientUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.DdnsClientUpdate) { // not required
		return nil
	}

	if m.DdnsClientUpdate != nil {
		if err := m.DdnsClientUpdate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_client_update")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_client_update")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) validateDdnsHostnameBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.DdnsHostnameBlock) { // not required
		return nil
	}

	if m.DdnsHostnameBlock != nil {
		if err := m.DdnsHostnameBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_hostname_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_hostname_block")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) validateDdnsUpdateOnRenew(formats strfmt.Registry) error {
	if swag.IsZero(m.DdnsUpdateOnRenew) { // not required
		return nil
	}

	if m.DdnsUpdateOnRenew != nil {
		if err := m.DdnsUpdateOnRenew.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_update_on_renew")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_update_on_renew")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) validateDdnsUseConflictResolution(formats strfmt.Registry) error {
	if swag.IsZero(m.DdnsUseConflictResolution) { // not required
		return nil
	}

	if m.DdnsUseConflictResolution != nil {
		if err := m.DdnsUseConflictResolution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_use_conflict_resolution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_use_conflict_resolution")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) validateDhcpConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.DhcpConfig) { // not required
		return nil
	}

	if m.DhcpConfig != nil {
		if err := m.DhcpConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcp_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcp_config")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) validateDhcpOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.DhcpOptions) { // not required
		return nil
	}

	if m.DhcpOptions != nil {
		if err := m.DhcpOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcp_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcp_options")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) validateHeaderOptionFilename(formats strfmt.Registry) error {
	if swag.IsZero(m.HeaderOptionFilename) { // not required
		return nil
	}

	if m.HeaderOptionFilename != nil {
		if err := m.HeaderOptionFilename.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header_option_filename")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header_option_filename")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) validateHeaderOptionServerAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.HeaderOptionServerAddress) { // not required
		return nil
	}

	if m.HeaderOptionServerAddress != nil {
		if err := m.HeaderOptionServerAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header_option_server_address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header_option_server_address")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) validateHeaderOptionServerName(formats strfmt.Registry) error {
	if swag.IsZero(m.HeaderOptionServerName) { // not required
		return nil
	}

	if m.HeaderOptionServerName != nil {
		if err := m.HeaderOptionServerName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header_option_server_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header_option_server_name")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) validateHostnameRewriteBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.HostnameRewriteBlock) { // not required
		return nil
	}

	if m.HostnameRewriteBlock != nil {
		if err := m.HostnameRewriteBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostname_rewrite_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostname_rewrite_block")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) validateVendorSpecificOptionOptionSpace(formats strfmt.Registry) error {
	if swag.IsZero(m.VendorSpecificOptionOptionSpace) { // not required
		return nil
	}

	if m.VendorSpecificOptionOptionSpace != nil {
		if err := m.VendorSpecificOptionOptionSpace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vendor_specific_option_option_space")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vendor_specific_option_option_space")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ipamsvc server inheritance based on the context it is used
func (m *IpamsvcServerInheritance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDdnsBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDdnsClientUpdate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDdnsHostnameBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDdnsUpdateOnRenew(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDdnsUseConflictResolution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDhcpConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDhcpOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeaderOptionFilename(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeaderOptionServerAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeaderOptionServerName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostnameRewriteBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVendorSpecificOptionOptionSpace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcServerInheritance) contextValidateDdnsBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.DdnsBlock != nil {
		if err := m.DdnsBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_block")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) contextValidateDdnsClientUpdate(ctx context.Context, formats strfmt.Registry) error {

	if m.DdnsClientUpdate != nil {
		if err := m.DdnsClientUpdate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_client_update")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_client_update")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) contextValidateDdnsHostnameBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.DdnsHostnameBlock != nil {
		if err := m.DdnsHostnameBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_hostname_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_hostname_block")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) contextValidateDdnsUpdateOnRenew(ctx context.Context, formats strfmt.Registry) error {

	if m.DdnsUpdateOnRenew != nil {
		if err := m.DdnsUpdateOnRenew.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_update_on_renew")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_update_on_renew")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) contextValidateDdnsUseConflictResolution(ctx context.Context, formats strfmt.Registry) error {

	if m.DdnsUseConflictResolution != nil {
		if err := m.DdnsUseConflictResolution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_use_conflict_resolution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_use_conflict_resolution")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) contextValidateDhcpConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.DhcpConfig != nil {
		if err := m.DhcpConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcp_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcp_config")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) contextValidateDhcpOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.DhcpOptions != nil {
		if err := m.DhcpOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcp_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcp_options")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) contextValidateHeaderOptionFilename(ctx context.Context, formats strfmt.Registry) error {

	if m.HeaderOptionFilename != nil {
		if err := m.HeaderOptionFilename.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header_option_filename")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header_option_filename")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) contextValidateHeaderOptionServerAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.HeaderOptionServerAddress != nil {
		if err := m.HeaderOptionServerAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header_option_server_address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header_option_server_address")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) contextValidateHeaderOptionServerName(ctx context.Context, formats strfmt.Registry) error {

	if m.HeaderOptionServerName != nil {
		if err := m.HeaderOptionServerName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header_option_server_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header_option_server_name")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) contextValidateHostnameRewriteBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.HostnameRewriteBlock != nil {
		if err := m.HostnameRewriteBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostname_rewrite_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostname_rewrite_block")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcServerInheritance) contextValidateVendorSpecificOptionOptionSpace(ctx context.Context, formats strfmt.Registry) error {

	if m.VendorSpecificOptionOptionSpace != nil {
		if err := m.VendorSpecificOptionOptionSpace.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vendor_specific_option_option_space")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vendor_specific_option_option_space")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpamsvcServerInheritance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamsvcServerInheritance) UnmarshalBinary(b []byte) error {
	var res IpamsvcServerInheritance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
