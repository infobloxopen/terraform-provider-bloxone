// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigViewInheritance ViewInheritance
//
// Inheritance configuration specifies how and which fields _View_ object inherits from [ _Global_, _Server_ ] parent.
//
// swagger:model configViewInheritance
type ConfigViewInheritance struct {

	// Optional. Field config for _custom_root_ns_block_ field from _View_ object.
	CustomRootNsBlock *ConfigInheritedCustomRootNSBlock `json:"custom_root_ns_block,omitempty"`

	// Optional. Field config for _dnssec_validation_block_ field from _View_ object.
	DnssecValidationBlock *ConfigInheritedDNSSECValidationBlock `json:"dnssec_validation_block,omitempty"`

	// Optional. Field config for _ecs_block_ field from _View_ object.
	EcsBlock *ConfigInheritedECSBlock `json:"ecs_block,omitempty"`

	// Optional. Field config for _edns_udp_size_ field from [View] object.
	EdnsUDPSize *Inheritance2InheritedUInt32 `json:"edns_udp_size,omitempty"`

	// Optional. Field config for _forwarders_block_ field from _View_ object.
	ForwardersBlock *ConfigInheritedForwardersBlock `json:"forwarders_block,omitempty"`

	// Optional. Field config for _gss_tsig_enabled_ field from _View_ object.
	GssTsigEnabled *Inheritance2InheritedBool `json:"gss_tsig_enabled,omitempty"`

	// Optional. Field config for _lame_ttl_ field from _View_ object.
	LameTTL *Inheritance2InheritedUInt32 `json:"lame_ttl,omitempty"`

	// Optional. Field config for _match_recursive_only_ field from _View_ object.
	MatchRecursiveOnly *Inheritance2InheritedBool `json:"match_recursive_only,omitempty"`

	// Optional. Field config for _max_cache_ttl_ field from _View_ object.
	MaxCacheTTL *Inheritance2InheritedUInt32 `json:"max_cache_ttl,omitempty"`

	// Optional. Field config for _max_negative_ttl_ field from _View_ object.
	MaxNegativeTTL *Inheritance2InheritedUInt32 `json:"max_negative_ttl,omitempty"`

	// Optional. Field config for _max_udp_size_ field from [View] object.
	MaxUDPSize *Inheritance2InheritedUInt32 `json:"max_udp_size,omitempty"`

	// Optional. Field config for _minimal_responses_ field from _View_ object.
	MinimalResponses *Inheritance2InheritedBool `json:"minimal_responses,omitempty"`

	// Field config for _notify_ field from _View_ object.
	Notify *Inheritance2InheritedBool `json:"notify,omitempty"`

	// Optional. Field config for _query_acl_ field from _View_ object.
	QueryACL *ConfigInheritedACLItems `json:"query_acl,omitempty"`

	// Optional. Field config for _recursion_acl_ field from _View_ object.
	RecursionACL *ConfigInheritedACLItems `json:"recursion_acl,omitempty"`

	// Optional. Field config for _recursion_enabled_ field from _View_ object.
	RecursionEnabled *Inheritance2InheritedBool `json:"recursion_enabled,omitempty"`

	// Optional. Field config for _transfer_acl_ field from _View_ object.
	TransferACL *ConfigInheritedACLItems `json:"transfer_acl,omitempty"`

	// Optional. Field config for _update_acl_ field from _View_ object.
	UpdateACL *ConfigInheritedACLItems `json:"update_acl,omitempty"`

	// Optional. Field config for _use_forwarders_for_subzones_ field from _View_ object.
	UseForwardersForSubzones *Inheritance2InheritedBool `json:"use_forwarders_for_subzones,omitempty"`

	// Optional. Field config for _zone_authority_ field from _View_ object.
	ZoneAuthority *ConfigInheritedZoneAuthority `json:"zone_authority,omitempty"`
}

// Validate validates this config view inheritance
func (m *ConfigViewInheritance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomRootNsBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDnssecValidationBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEcsBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdnsUDPSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForwardersBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGssTsigEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLameTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchRecursiveOnly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxCacheTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxNegativeTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxUDPSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinimalResponses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryACL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecursionACL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecursionEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransferACL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateACL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseForwardersForSubzones(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoneAuthority(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigViewInheritance) validateCustomRootNsBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomRootNsBlock) { // not required
		return nil
	}

	if m.CustomRootNsBlock != nil {
		if err := m.CustomRootNsBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom_root_ns_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom_root_ns_block")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) validateDnssecValidationBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.DnssecValidationBlock) { // not required
		return nil
	}

	if m.DnssecValidationBlock != nil {
		if err := m.DnssecValidationBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dnssec_validation_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dnssec_validation_block")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) validateEcsBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.EcsBlock) { // not required
		return nil
	}

	if m.EcsBlock != nil {
		if err := m.EcsBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecs_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecs_block")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) validateEdnsUDPSize(formats strfmt.Registry) error {
	if swag.IsZero(m.EdnsUDPSize) { // not required
		return nil
	}

	if m.EdnsUDPSize != nil {
		if err := m.EdnsUDPSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edns_udp_size")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edns_udp_size")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) validateForwardersBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.ForwardersBlock) { // not required
		return nil
	}

	if m.ForwardersBlock != nil {
		if err := m.ForwardersBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forwarders_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("forwarders_block")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) validateGssTsigEnabled(formats strfmt.Registry) error {
	if swag.IsZero(m.GssTsigEnabled) { // not required
		return nil
	}

	if m.GssTsigEnabled != nil {
		if err := m.GssTsigEnabled.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gss_tsig_enabled")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gss_tsig_enabled")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) validateLameTTL(formats strfmt.Registry) error {
	if swag.IsZero(m.LameTTL) { // not required
		return nil
	}

	if m.LameTTL != nil {
		if err := m.LameTTL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lame_ttl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lame_ttl")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) validateMatchRecursiveOnly(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchRecursiveOnly) { // not required
		return nil
	}

	if m.MatchRecursiveOnly != nil {
		if err := m.MatchRecursiveOnly.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("match_recursive_only")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("match_recursive_only")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) validateMaxCacheTTL(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxCacheTTL) { // not required
		return nil
	}

	if m.MaxCacheTTL != nil {
		if err := m.MaxCacheTTL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_cache_ttl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_cache_ttl")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) validateMaxNegativeTTL(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxNegativeTTL) { // not required
		return nil
	}

	if m.MaxNegativeTTL != nil {
		if err := m.MaxNegativeTTL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_negative_ttl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_negative_ttl")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) validateMaxUDPSize(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxUDPSize) { // not required
		return nil
	}

	if m.MaxUDPSize != nil {
		if err := m.MaxUDPSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_udp_size")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_udp_size")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) validateMinimalResponses(formats strfmt.Registry) error {
	if swag.IsZero(m.MinimalResponses) { // not required
		return nil
	}

	if m.MinimalResponses != nil {
		if err := m.MinimalResponses.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minimal_responses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minimal_responses")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) validateNotify(formats strfmt.Registry) error {
	if swag.IsZero(m.Notify) { // not required
		return nil
	}

	if m.Notify != nil {
		if err := m.Notify.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notify")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notify")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) validateQueryACL(formats strfmt.Registry) error {
	if swag.IsZero(m.QueryACL) { // not required
		return nil
	}

	if m.QueryACL != nil {
		if err := m.QueryACL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query_acl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("query_acl")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) validateRecursionACL(formats strfmt.Registry) error {
	if swag.IsZero(m.RecursionACL) { // not required
		return nil
	}

	if m.RecursionACL != nil {
		if err := m.RecursionACL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recursion_acl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recursion_acl")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) validateRecursionEnabled(formats strfmt.Registry) error {
	if swag.IsZero(m.RecursionEnabled) { // not required
		return nil
	}

	if m.RecursionEnabled != nil {
		if err := m.RecursionEnabled.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recursion_enabled")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recursion_enabled")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) validateTransferACL(formats strfmt.Registry) error {
	if swag.IsZero(m.TransferACL) { // not required
		return nil
	}

	if m.TransferACL != nil {
		if err := m.TransferACL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transfer_acl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transfer_acl")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) validateUpdateACL(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateACL) { // not required
		return nil
	}

	if m.UpdateACL != nil {
		if err := m.UpdateACL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("update_acl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("update_acl")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) validateUseForwardersForSubzones(formats strfmt.Registry) error {
	if swag.IsZero(m.UseForwardersForSubzones) { // not required
		return nil
	}

	if m.UseForwardersForSubzones != nil {
		if err := m.UseForwardersForSubzones.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("use_forwarders_for_subzones")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("use_forwarders_for_subzones")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) validateZoneAuthority(formats strfmt.Registry) error {
	if swag.IsZero(m.ZoneAuthority) { // not required
		return nil
	}

	if m.ZoneAuthority != nil {
		if err := m.ZoneAuthority.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone_authority")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zone_authority")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this config view inheritance based on the context it is used
func (m *ConfigViewInheritance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomRootNsBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDnssecValidationBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEcsBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdnsUDPSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateForwardersBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGssTsigEnabled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLameTTL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchRecursiveOnly(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxCacheTTL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxNegativeTTL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxUDPSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinimalResponses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotify(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueryACL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecursionACL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecursionEnabled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransferACL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateACL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUseForwardersForSubzones(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZoneAuthority(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigViewInheritance) contextValidateCustomRootNsBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomRootNsBlock != nil {
		if err := m.CustomRootNsBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom_root_ns_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom_root_ns_block")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) contextValidateDnssecValidationBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.DnssecValidationBlock != nil {
		if err := m.DnssecValidationBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dnssec_validation_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dnssec_validation_block")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) contextValidateEcsBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.EcsBlock != nil {
		if err := m.EcsBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecs_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecs_block")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) contextValidateEdnsUDPSize(ctx context.Context, formats strfmt.Registry) error {

	if m.EdnsUDPSize != nil {
		if err := m.EdnsUDPSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edns_udp_size")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edns_udp_size")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) contextValidateForwardersBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.ForwardersBlock != nil {
		if err := m.ForwardersBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forwarders_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("forwarders_block")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) contextValidateGssTsigEnabled(ctx context.Context, formats strfmt.Registry) error {

	if m.GssTsigEnabled != nil {
		if err := m.GssTsigEnabled.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gss_tsig_enabled")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gss_tsig_enabled")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) contextValidateLameTTL(ctx context.Context, formats strfmt.Registry) error {

	if m.LameTTL != nil {
		if err := m.LameTTL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lame_ttl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lame_ttl")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) contextValidateMatchRecursiveOnly(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchRecursiveOnly != nil {
		if err := m.MatchRecursiveOnly.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("match_recursive_only")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("match_recursive_only")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) contextValidateMaxCacheTTL(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxCacheTTL != nil {
		if err := m.MaxCacheTTL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_cache_ttl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_cache_ttl")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) contextValidateMaxNegativeTTL(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxNegativeTTL != nil {
		if err := m.MaxNegativeTTL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_negative_ttl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_negative_ttl")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) contextValidateMaxUDPSize(ctx context.Context, formats strfmt.Registry) error {

	if m.MaxUDPSize != nil {
		if err := m.MaxUDPSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_udp_size")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("max_udp_size")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) contextValidateMinimalResponses(ctx context.Context, formats strfmt.Registry) error {

	if m.MinimalResponses != nil {
		if err := m.MinimalResponses.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minimal_responses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minimal_responses")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) contextValidateNotify(ctx context.Context, formats strfmt.Registry) error {

	if m.Notify != nil {
		if err := m.Notify.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notify")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notify")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) contextValidateQueryACL(ctx context.Context, formats strfmt.Registry) error {

	if m.QueryACL != nil {
		if err := m.QueryACL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query_acl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("query_acl")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) contextValidateRecursionACL(ctx context.Context, formats strfmt.Registry) error {

	if m.RecursionACL != nil {
		if err := m.RecursionACL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recursion_acl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recursion_acl")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) contextValidateRecursionEnabled(ctx context.Context, formats strfmt.Registry) error {

	if m.RecursionEnabled != nil {
		if err := m.RecursionEnabled.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recursion_enabled")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recursion_enabled")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) contextValidateTransferACL(ctx context.Context, formats strfmt.Registry) error {

	if m.TransferACL != nil {
		if err := m.TransferACL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transfer_acl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transfer_acl")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) contextValidateUpdateACL(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdateACL != nil {
		if err := m.UpdateACL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("update_acl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("update_acl")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) contextValidateUseForwardersForSubzones(ctx context.Context, formats strfmt.Registry) error {

	if m.UseForwardersForSubzones != nil {
		if err := m.UseForwardersForSubzones.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("use_forwarders_for_subzones")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("use_forwarders_for_subzones")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigViewInheritance) contextValidateZoneAuthority(ctx context.Context, formats strfmt.Registry) error {

	if m.ZoneAuthority != nil {
		if err := m.ZoneAuthority.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone_authority")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zone_authority")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigViewInheritance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigViewInheritance) UnmarshalBinary(b []byte) error {
	var res ConfigViewInheritance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
