// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpamsvcUtilizationThreshold UtilizationThreshold
//
// A __UtilizationThreshold__ object represents IP address utilization threshold settings.
//
// swagger:model ipamsvcUtilizationThreshold
type IpamsvcUtilizationThreshold struct {

	// Indicates whether the utilization threshold for IP addresses is enabled or not.
	// Required: true
	Enabled bool `json:"enabled,omitempty"`

	// The high threshold value for the percentage of used IP addresses relative to the total IP addresses available in the scope of the object. Thresholds are inclusive in the comparison test.
	// Required: true
	// Maximum: 100
	High *int64 `json:"high,omitempty"`

	// The low threshold value for the percentage of used IP addresses relative to the total IP addresses available in the scope of the object. Thresholds are inclusive in the comparison test.
	// Required: true
	// Maximum: 100
	Low *int64 `json:"low,omitempty"`
}

// Validate validates this ipamsvc utilization threshold
func (m *IpamsvcUtilizationThreshold) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHigh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcUtilizationThreshold) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", bool(m.Enabled)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcUtilizationThreshold) validateHigh(formats strfmt.Registry) error {

	if err := validate.Required("high", "body", m.High); err != nil {
		return err
	}

	if err := validate.MaximumInt("high", "body", *m.High, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcUtilizationThreshold) validateLow(formats strfmt.Registry) error {

	if err := validate.Required("low", "body", m.Low); err != nil {
		return err
	}

	if err := validate.MaximumInt("low", "body", *m.Low, 100, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ipamsvc utilization threshold based on context it is used
func (m *IpamsvcUtilizationThreshold) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IpamsvcUtilizationThreshold) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamsvcUtilizationThreshold) UnmarshalBinary(b []byte) error {
	var res IpamsvcUtilizationThreshold
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
