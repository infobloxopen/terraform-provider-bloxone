// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpamsvcHost Host
//
// A DHCP __Host__ (_dhcp/host_) object associates a DHCP Config Profile with an on-prem host.
//
// swagger:model ipamsvcHost
type IpamsvcHost struct {

	// The primary IP address of the on-prem host.
	// Read Only: true
	Address string `json:"address,omitempty"`

	// The DHCP Config Profile for the on-prem host.
	AssociatedServer *IpamsvcHostAssociatedServer `json:"associated_server,omitempty"`

	// The description for the on-prem host.
	// Read Only: true
	Comment string `json:"comment,omitempty"`

	// Current dhcp application version of the host.
	// Read Only: true
	CurrentVersion string `json:"current_version,omitempty"`

	// The resource identifier.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The resource identifier.
	IPSpace string `json:"ip_space,omitempty"`

	// The display name of the on-prem host.
	// Read Only: true
	Name string `json:"name,omitempty"`

	// The on-prem host ID.
	// Read Only: true
	Ophid string `json:"ophid,omitempty"`

	// The resource identifier.
	Server string `json:"server,omitempty"`

	// The tags of the on-prem host in JSON format.
	Tags interface{} `json:"tags,omitempty"`
}

// Validate validates this ipamsvc host
func (m *IpamsvcHost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociatedServer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcHost) validateAssociatedServer(formats strfmt.Registry) error {
	if swag.IsZero(m.AssociatedServer) { // not required
		return nil
	}

	if m.AssociatedServer != nil {
		if err := m.AssociatedServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associated_server")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("associated_server")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ipamsvc host based on the context it is used
func (m *IpamsvcHost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssociatedServer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateComment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrentVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOphid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcHost) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "address", "body", string(m.Address)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcHost) contextValidateAssociatedServer(ctx context.Context, formats strfmt.Registry) error {

	if m.AssociatedServer != nil {
		if err := m.AssociatedServer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("associated_server")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("associated_server")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcHost) contextValidateComment(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "comment", "body", string(m.Comment)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcHost) contextValidateCurrentVersion(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "current_version", "body", string(m.CurrentVersion)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcHost) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcHost) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcHost) contextValidateOphid(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ophid", "body", string(m.Ophid)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpamsvcHost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamsvcHost) UnmarshalBinary(b []byte) error {
	var res IpamsvcHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
