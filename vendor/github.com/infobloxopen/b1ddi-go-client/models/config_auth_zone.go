// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigAuthZone AuthZone
//
// Authoritative zone.
//
// swagger:model configAuthZone
type ConfigAuthZone struct {

	// Optional. Comment for zone configuration.
	Comment string `json:"comment,omitempty"`

	// Time when the object has been created.
	// Read Only: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at,omitempty"`

	// Optional. _true_ to disable object. A disabled object is effectively non-existent when generating configuration.
	Disabled bool `json:"disabled,omitempty"`

	// Optional. DNS primaries external to BloxOne DDI. Order is not significant.
	ExternalPrimaries []*ConfigExternalPrimary `json:"external_primaries,omitempty"`

	// DNS secondaries external to BloxOne DDI. Order is not significant.
	ExternalSecondaries []*ConfigExternalSecondary `json:"external_secondaries,omitempty"`

	// Zone FQDN.
	// The FQDN supplied at creation will be converted to canonical form.
	//
	// Read-only after creation.
	// Required: true
	Fqdn *string `json:"fqdn,omitempty"`

	// _gss_tsig_enabled_ enables/disables GSS-TSIG signed dynamic updates.
	//
	// Defaults to _false_.
	GssTsigEnabled bool `json:"gss_tsig_enabled,omitempty"`

	// The resource identifier.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The list of the inheritance assigned hosts of the object.
	// Read Only: true
	InheritanceAssignedHosts []*Inheritance2AssignedHost `json:"inheritance_assigned_hosts,omitempty"`

	// Optional. Inheritance configuration.
	InheritanceSources *ConfigAuthZoneInheritance `json:"inheritance_sources,omitempty"`

	// On-create-only. SOA serial is allowed to be set when the authoritative zone is created.
	InitialSoaSerial int64 `json:"initial_soa_serial,omitempty"`

	// Optional. BloxOne DDI hosts acting as internal secondaries. Order is not significant.
	InternalSecondaries []*ConfigInternalSecondary `json:"internal_secondaries,omitempty"`

	// Reverse zone network address in the following format: "ip-address/cidr".
	// Defaults to empty.
	// Read Only: true
	MappedSubnet string `json:"mapped_subnet,omitempty"`

	// Zone mapping type.
	// Allowed values:
	//  * _forward_,
	//  * _ipv4_reverse_.
	//  * _ipv6_reverse_.
	//
	// Defaults to forward.
	// Read Only: true
	Mapping string `json:"mapping,omitempty"`

	// Also notify all external secondary DNS servers if enabled.
	//
	// Defaults to _false_.
	Notify bool `json:"notify,omitempty"`

	// The resource identifier.
	Nsgs []string `json:"nsgs,omitempty"`

	// The resource identifier.
	Parent string `json:"parent,omitempty"`

	// Primary type for an authoritative zone.
	// Read only after creation.
	// Allowed values:
	//  * _external_: zone data owned by an external nameserver,
	//  * _cloud_: zone data is owned by a BloxOne DDI host.
	// Required: true
	PrimaryType *string `json:"primary_type,omitempty"`

	// Zone FQDN in punycode.
	// Read Only: true
	ProtocolFqdn string `json:"protocol_fqdn,omitempty"`

	// Optional. Clients must match this ACL to make authoritative queries.
	// Also used for recursive queries if that ACL is unset.
	//
	// Defaults to empty.
	QueryACL []*ConfigACLItem `json:"query_acl,omitempty"`

	// Tagging specifics.
	Tags interface{} `json:"tags,omitempty"`

	// Optional. Clients must match this ACL to receive zone transfers.
	TransferACL []*ConfigACLItem `json:"transfer_acl,omitempty"`

	// Optional. Specifies which hosts are allowed to submit Dynamic DNS updates for authoritative zones of _primary_type_ _cloud_.
	//
	// Defaults to empty.
	UpdateACL []*ConfigACLItem `json:"update_acl,omitempty"`

	// Time when the object has been updated. Equals to _created_at_ if not updated after creation.
	// Read Only: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at,omitempty"`

	// Optional. Use default forwarders to resolve queries for subzones.
	//
	// Defaults to _true_.
	UseForwardersForSubzones *bool `json:"use_forwarders_for_subzones,omitempty"`

	// The resource identifier.
	View string `json:"view,omitempty"`

	// Optional. ZoneAuthority.
	ZoneAuthority *ConfigZoneAuthority `json:"zone_authority,omitempty"`
}

// Validate validates this config auth zone
func (m *ConfigAuthZone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalPrimaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalSecondaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFqdn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInheritanceAssignedHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInheritanceSources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternalSecondaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryACL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransferACL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateACL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoneAuthority(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigAuthZone) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConfigAuthZone) validateExternalPrimaries(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalPrimaries) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalPrimaries); i++ {
		if swag.IsZero(m.ExternalPrimaries[i]) { // not required
			continue
		}

		if m.ExternalPrimaries[i] != nil {
			if err := m.ExternalPrimaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external_primaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("external_primaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigAuthZone) validateExternalSecondaries(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalSecondaries) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalSecondaries); i++ {
		if swag.IsZero(m.ExternalSecondaries[i]) { // not required
			continue
		}

		if m.ExternalSecondaries[i] != nil {
			if err := m.ExternalSecondaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external_secondaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("external_secondaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigAuthZone) validateFqdn(formats strfmt.Registry) error {

	if err := validate.Required("fqdn", "body", m.Fqdn); err != nil {
		return err
	}

	return nil
}

func (m *ConfigAuthZone) validateInheritanceAssignedHosts(formats strfmt.Registry) error {
	if swag.IsZero(m.InheritanceAssignedHosts) { // not required
		return nil
	}

	for i := 0; i < len(m.InheritanceAssignedHosts); i++ {
		if swag.IsZero(m.InheritanceAssignedHosts[i]) { // not required
			continue
		}

		if m.InheritanceAssignedHosts[i] != nil {
			if err := m.InheritanceAssignedHosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inheritance_assigned_hosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inheritance_assigned_hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigAuthZone) validateInheritanceSources(formats strfmt.Registry) error {
	if swag.IsZero(m.InheritanceSources) { // not required
		return nil
	}

	if m.InheritanceSources != nil {
		if err := m.InheritanceSources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inheritance_sources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inheritance_sources")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigAuthZone) validateInternalSecondaries(formats strfmt.Registry) error {
	if swag.IsZero(m.InternalSecondaries) { // not required
		return nil
	}

	for i := 0; i < len(m.InternalSecondaries); i++ {
		if swag.IsZero(m.InternalSecondaries[i]) { // not required
			continue
		}

		if m.InternalSecondaries[i] != nil {
			if err := m.InternalSecondaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("internal_secondaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("internal_secondaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigAuthZone) validatePrimaryType(formats strfmt.Registry) error {

	if err := validate.Required("primary_type", "body", m.PrimaryType); err != nil {
		return err
	}

	return nil
}

func (m *ConfigAuthZone) validateQueryACL(formats strfmt.Registry) error {
	if swag.IsZero(m.QueryACL) { // not required
		return nil
	}

	for i := 0; i < len(m.QueryACL); i++ {
		if swag.IsZero(m.QueryACL[i]) { // not required
			continue
		}

		if m.QueryACL[i] != nil {
			if err := m.QueryACL[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("query_acl" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("query_acl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigAuthZone) validateTransferACL(formats strfmt.Registry) error {
	if swag.IsZero(m.TransferACL) { // not required
		return nil
	}

	for i := 0; i < len(m.TransferACL); i++ {
		if swag.IsZero(m.TransferACL[i]) { // not required
			continue
		}

		if m.TransferACL[i] != nil {
			if err := m.TransferACL[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transfer_acl" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transfer_acl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigAuthZone) validateUpdateACL(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateACL) { // not required
		return nil
	}

	for i := 0; i < len(m.UpdateACL); i++ {
		if swag.IsZero(m.UpdateACL[i]) { // not required
			continue
		}

		if m.UpdateACL[i] != nil {
			if err := m.UpdateACL[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("update_acl" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("update_acl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigAuthZone) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConfigAuthZone) validateZoneAuthority(formats strfmt.Registry) error {
	if swag.IsZero(m.ZoneAuthority) { // not required
		return nil
	}

	if m.ZoneAuthority != nil {
		if err := m.ZoneAuthority.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone_authority")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zone_authority")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this config auth zone based on the context it is used
func (m *ConfigAuthZone) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalPrimaries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalSecondaries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInheritanceAssignedHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInheritanceSources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInternalSecondaries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMappedSubnet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMapping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtocolFqdn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueryACL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransferACL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateACL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZoneAuthority(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigAuthZone) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ConfigAuthZone) contextValidateExternalPrimaries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalPrimaries); i++ {

		if m.ExternalPrimaries[i] != nil {
			if err := m.ExternalPrimaries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external_primaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("external_primaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigAuthZone) contextValidateExternalSecondaries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalSecondaries); i++ {

		if m.ExternalSecondaries[i] != nil {
			if err := m.ExternalSecondaries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external_secondaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("external_secondaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigAuthZone) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigAuthZone) contextValidateInheritanceAssignedHosts(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "inheritance_assigned_hosts", "body", []*Inheritance2AssignedHost(m.InheritanceAssignedHosts)); err != nil {
		return err
	}

	for i := 0; i < len(m.InheritanceAssignedHosts); i++ {

		if m.InheritanceAssignedHosts[i] != nil {
			if err := m.InheritanceAssignedHosts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inheritance_assigned_hosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inheritance_assigned_hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigAuthZone) contextValidateInheritanceSources(ctx context.Context, formats strfmt.Registry) error {

	if m.InheritanceSources != nil {
		if err := m.InheritanceSources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inheritance_sources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inheritance_sources")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigAuthZone) contextValidateInternalSecondaries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InternalSecondaries); i++ {

		if m.InternalSecondaries[i] != nil {
			if err := m.InternalSecondaries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("internal_secondaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("internal_secondaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigAuthZone) contextValidateMappedSubnet(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "mapped_subnet", "body", string(m.MappedSubnet)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigAuthZone) contextValidateMapping(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "mapping", "body", string(m.Mapping)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigAuthZone) contextValidateProtocolFqdn(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "protocol_fqdn", "body", string(m.ProtocolFqdn)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigAuthZone) contextValidateQueryACL(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.QueryACL); i++ {

		if m.QueryACL[i] != nil {
			if err := m.QueryACL[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("query_acl" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("query_acl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigAuthZone) contextValidateTransferACL(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TransferACL); i++ {

		if m.TransferACL[i] != nil {
			if err := m.TransferACL[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transfer_acl" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transfer_acl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigAuthZone) contextValidateUpdateACL(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UpdateACL); i++ {

		if m.UpdateACL[i] != nil {
			if err := m.UpdateACL[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("update_acl" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("update_acl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigAuthZone) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ConfigAuthZone) contextValidateZoneAuthority(ctx context.Context, formats strfmt.Registry) error {

	if m.ZoneAuthority != nil {
		if err := m.ZoneAuthority.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone_authority")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zone_authority")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigAuthZone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigAuthZone) UnmarshalBinary(b []byte) error {
	var res ConfigAuthZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
