// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpamsvcAsmEnableBlock AsmEnableBlock
//
// ASM enable group of fields.
//
// swagger:model ipamsvcAsmEnableBlock
type IpamsvcAsmEnableBlock struct {

	// Indicates whether Automated Scope Management is enabled or not.
	Enable bool `json:"enable,omitempty"`

	// Indicates whether sending notifications to the users is enabled or not.
	EnableNotification bool `json:"enable_notification,omitempty"`

	// The date at which notifications will be re-enabled automatically.
	// Format: date-time
	ReenableDate strfmt.DateTime `json:"reenable_date,omitempty"`
}

// Validate validates this ipamsvc asm enable block
func (m *IpamsvcAsmEnableBlock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReenableDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcAsmEnableBlock) validateReenableDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ReenableDate) { // not required
		return nil
	}

	if err := validate.FormatOf("reenable_date", "body", "date-time", m.ReenableDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ipamsvc asm enable block based on context it is used
func (m *IpamsvcAsmEnableBlock) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IpamsvcAsmEnableBlock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamsvcAsmEnableBlock) UnmarshalBinary(b []byte) error {
	var res IpamsvcAsmEnableBlock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
