// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IpamsvcFixedAddressInheritance FixedAddressInheritance
//
// The __FixedAddressInheritance__ object specifies how and which fields _FixedAddress_ object inherits from the parent.
//
// swagger:model ipamsvcFixedAddressInheritance
type IpamsvcFixedAddressInheritance struct {

	// The inheritance configuration for _dhcp_options_ field.
	DhcpOptions *IpamsvcInheritedDHCPOptionList `json:"dhcp_options,omitempty"`

	// The inheritance configuration for _header_option_filename_ field.
	HeaderOptionFilename *InheritanceInheritedString `json:"header_option_filename,omitempty"`

	// The inheritance configuration for _header_option_server_address_ field.
	HeaderOptionServerAddress *InheritanceInheritedString `json:"header_option_server_address,omitempty"`

	// The inheritance configuration for _header_option_server_name_ field.
	HeaderOptionServerName *InheritanceInheritedString `json:"header_option_server_name,omitempty"`
}

// Validate validates this ipamsvc fixed address inheritance
func (m *IpamsvcFixedAddressInheritance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDhcpOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaderOptionFilename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaderOptionServerAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaderOptionServerName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcFixedAddressInheritance) validateDhcpOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.DhcpOptions) { // not required
		return nil
	}

	if m.DhcpOptions != nil {
		if err := m.DhcpOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcp_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcp_options")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcFixedAddressInheritance) validateHeaderOptionFilename(formats strfmt.Registry) error {
	if swag.IsZero(m.HeaderOptionFilename) { // not required
		return nil
	}

	if m.HeaderOptionFilename != nil {
		if err := m.HeaderOptionFilename.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header_option_filename")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header_option_filename")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcFixedAddressInheritance) validateHeaderOptionServerAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.HeaderOptionServerAddress) { // not required
		return nil
	}

	if m.HeaderOptionServerAddress != nil {
		if err := m.HeaderOptionServerAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header_option_server_address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header_option_server_address")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcFixedAddressInheritance) validateHeaderOptionServerName(formats strfmt.Registry) error {
	if swag.IsZero(m.HeaderOptionServerName) { // not required
		return nil
	}

	if m.HeaderOptionServerName != nil {
		if err := m.HeaderOptionServerName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header_option_server_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header_option_server_name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ipamsvc fixed address inheritance based on the context it is used
func (m *IpamsvcFixedAddressInheritance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDhcpOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeaderOptionFilename(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeaderOptionServerAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeaderOptionServerName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcFixedAddressInheritance) contextValidateDhcpOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.DhcpOptions != nil {
		if err := m.DhcpOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcp_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcp_options")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcFixedAddressInheritance) contextValidateHeaderOptionFilename(ctx context.Context, formats strfmt.Registry) error {

	if m.HeaderOptionFilename != nil {
		if err := m.HeaderOptionFilename.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header_option_filename")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header_option_filename")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcFixedAddressInheritance) contextValidateHeaderOptionServerAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.HeaderOptionServerAddress != nil {
		if err := m.HeaderOptionServerAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header_option_server_address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header_option_server_address")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcFixedAddressInheritance) contextValidateHeaderOptionServerName(ctx context.Context, formats strfmt.Registry) error {

	if m.HeaderOptionServerName != nil {
		if err := m.HeaderOptionServerName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header_option_server_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header_option_server_name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpamsvcFixedAddressInheritance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamsvcFixedAddressInheritance) UnmarshalBinary(b []byte) error {
	var res IpamsvcFixedAddressInheritance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
