// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpamsvcDHCPUtilization DHCPUtilization
//
// The __DHCPUtilization__ object represents DHCP utilization statistics for an object.
//
// swagger:model ipamsvcDHCPUtilization
type IpamsvcDHCPUtilization struct {

	// The total free IP addresses in the DHCP ranges in the scope of this object. It can be computed as _dhcp_total_ - _dhcp_used_.
	// Read Only: true
	DhcpFree string `json:"dhcp_free,omitempty"`

	// The total IP addresses available in the DHCP ranges in the scope of this object.
	// Read Only: true
	DhcpTotal string `json:"dhcp_total,omitempty"`

	// The total IP addresses marked as used in the DHCP ranges in the scope of this object.
	// Read Only: true
	DhcpUsed string `json:"dhcp_used,omitempty"`

	// The percentage of used IP addresses relative to the total IP addresses available in the DHCP ranges in the scope of this object.
	// Read Only: true
	// Maximum: 100
	DhcpUtilization int64 `json:"dhcp_utilization,omitempty"`
}

// Validate validates this ipamsvc d h c p utilization
func (m *IpamsvcDHCPUtilization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDhcpUtilization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcDHCPUtilization) validateDhcpUtilization(formats strfmt.Registry) error {
	if swag.IsZero(m.DhcpUtilization) { // not required
		return nil
	}

	if err := validate.MaximumInt("dhcp_utilization", "body", m.DhcpUtilization, 100, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ipamsvc d h c p utilization based on the context it is used
func (m *IpamsvcDHCPUtilization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDhcpFree(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDhcpTotal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDhcpUsed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDhcpUtilization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcDHCPUtilization) contextValidateDhcpFree(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dhcp_free", "body", string(m.DhcpFree)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcDHCPUtilization) contextValidateDhcpTotal(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dhcp_total", "body", string(m.DhcpTotal)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcDHCPUtilization) contextValidateDhcpUsed(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dhcp_used", "body", string(m.DhcpUsed)); err != nil {
		return err
	}

	return nil
}

func (m *IpamsvcDHCPUtilization) contextValidateDhcpUtilization(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dhcp_utilization", "body", int64(m.DhcpUtilization)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpamsvcDHCPUtilization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamsvcDHCPUtilization) UnmarshalBinary(b []byte) error {
	var res IpamsvcDHCPUtilization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
