// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigExternalPrimary ExternalPrimary
//
// External DNS primary.
//
// swagger:model configExternalPrimary
type ConfigExternalPrimary struct {

	// Optional. Required only if _type_ is _server_. IP Address of nameserver.
	Address string `json:"address,omitempty"`

	// Optional. Required only if _type_ is _server_. FQDN of nameserver.
	Fqdn string `json:"fqdn,omitempty"`

	// The resource identifier.
	Nsg string `json:"nsg,omitempty"`

	// FQDN of nameserver in punycode.
	// Read Only: true
	ProtocolFqdn string `json:"protocol_fqdn,omitempty"`

	// Optional. If enabled, secondaries will use the configured TSIG key when requesting a zone transfer from this primary.
	TsigEnabled bool `json:"tsig_enabled,omitempty"`

	// Optional. TSIG key.
	//
	// Error if empty while _tsig_enabled_ is _true_.
	TsigKey *ConfigTSIGKey `json:"tsig_key,omitempty"`

	// Allowed values:
	// * _nsg_,
	// * _primary_.
	// Required: true
	Type *string `json:"type,omitempty"`
}

// Validate validates this config external primary
func (m *ConfigExternalPrimary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTsigKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigExternalPrimary) validateTsigKey(formats strfmt.Registry) error {
	if swag.IsZero(m.TsigKey) { // not required
		return nil
	}

	if m.TsigKey != nil {
		if err := m.TsigKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tsig_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tsig_key")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigExternalPrimary) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this config external primary based on the context it is used
func (m *ConfigExternalPrimary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProtocolFqdn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTsigKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigExternalPrimary) contextValidateProtocolFqdn(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "protocol_fqdn", "body", string(m.ProtocolFqdn)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigExternalPrimary) contextValidateTsigKey(ctx context.Context, formats strfmt.Registry) error {

	if m.TsigKey != nil {
		if err := m.TsigKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tsig_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tsig_key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigExternalPrimary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigExternalPrimary) UnmarshalBinary(b []byte) error {
	var res ConfigExternalPrimary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
