// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpamsvcASMConfig ASMConfig
//
// The __ASMConfig__ object represents Automated Scope Management configuration.
//
// swagger:model ipamsvcASMConfig
type IpamsvcASMConfig struct {

	// ASM shows the number of addresses forecast to be used _forecast_period_ days in the future, if it is greater than _asm_threshold_ percent * _dhcp_total_ (see _dhcp_utilization_) then the subnet is flagged.
	AsmThreshold int64 `json:"asm_threshold,omitempty"`

	// Indicates if Automated Scope Management is enabled.
	Enable *bool `json:"enable,omitempty"`

	// Indicates if ASM should send notifications to the user.
	EnableNotification *bool `json:"enable_notification,omitempty"`

	// The forecast period in days.
	ForecastPeriod int64 `json:"forecast_period,omitempty"`

	// Indicates the growth in the number or percentage of IP addresses.
	GrowthFactor int64 `json:"growth_factor,omitempty"`

	// The type of factor to use: _percent_ or _count_.
	GrowthType string `json:"growth_type,omitempty"`

	// The minimum amount of history needed before ASM can run on this subnet.
	History int64 `json:"history,omitempty"`

	// The minimum size of range needed for ASM to run on this subnet.
	MinTotal int64 `json:"min_total,omitempty"`

	// The minimum percentage of addresses that must be available outside of the DHCP ranges and fixed addresses
	// when making a suggested change..
	MinUnused int64 `json:"min_unused,omitempty"`

	// reenable date
	// Format: date-time
	ReenableDate strfmt.DateTime `json:"reenable_date,omitempty"`
}

// Validate validates this ipamsvc a s m config
func (m *IpamsvcASMConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReenableDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcASMConfig) validateReenableDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ReenableDate) { // not required
		return nil
	}

	if err := validate.FormatOf("reenable_date", "body", "date-time", m.ReenableDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ipamsvc a s m config based on context it is used
func (m *IpamsvcASMConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IpamsvcASMConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamsvcASMConfig) UnmarshalBinary(b []byte) error {
	var res IpamsvcASMConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
