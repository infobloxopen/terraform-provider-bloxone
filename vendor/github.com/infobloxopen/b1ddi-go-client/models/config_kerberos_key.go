// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigKerberosKey KerberosKey
//
// A __KerberosKey__ object (_keys/kerberos_) represents a Kerberos key.
//
// swagger:model configKerberosKey
type ConfigKerberosKey struct {

	// Encryption algorithm of the key in accordance with RFC 3961.
	// Read Only: true
	Algorithm string `json:"algorithm,omitempty"`

	// Kerberos realm of the principal.
	// Read Only: true
	Domain string `json:"domain,omitempty"`

	// The resource identifier.
	// Required: true
	Key *string `json:"key,omitempty"`

	// Kerberos principal associated with key.
	// Read Only: true
	Principal string `json:"principal,omitempty"`

	// Upload time for the key.
	// Read Only: true
	UploadedAt string `json:"uploaded_at,omitempty"`

	// The version number (KVNO) of the key.
	// Read Only: true
	Version int64 `json:"version,omitempty"`
}

// Validate validates this config kerberos key
func (m *ConfigKerberosKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigKerberosKey) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this config kerberos key based on the context it is used
func (m *ConfigKerberosKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlgorithm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrincipal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUploadedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigKerberosKey) contextValidateAlgorithm(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "algorithm", "body", string(m.Algorithm)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigKerberosKey) contextValidateDomain(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "domain", "body", string(m.Domain)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigKerberosKey) contextValidatePrincipal(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "principal", "body", string(m.Principal)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigKerberosKey) contextValidateUploadedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "uploaded_at", "body", string(m.UploadedAt)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigKerberosKey) contextValidateVersion(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "version", "body", int64(m.Version)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigKerberosKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigKerberosKey) UnmarshalBinary(b []byte) error {
	var res ConfigKerberosKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
