// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IpamsvcDHCPInheritance DHCPInheritance
//
// The __DHCPInheritance__ object specifies how the _dhcp_config_, _dhcp_options_ and _asm_config_ configuration fields are inherited from the parent object.
//
// swagger:model ipamsvcDHCPInheritance
type IpamsvcDHCPInheritance struct {

	// The inheritance configuration for _asm_config_ field.
	AsmConfig *IpamsvcInheritedASMConfig `json:"asm_config,omitempty"`

	// The inheritance configuration for _ddns_client_update_ field.
	DdnsClientUpdate *InheritanceInheritedString `json:"ddns_client_update,omitempty"`

	// The inheritance configuration for _ddns_enabled_ field. Only action allowed is 'inherit'.
	DdnsEnabled *InheritanceInheritedBool `json:"ddns_enabled,omitempty"`

	// The inheritance configuration for _ddns_generate_name_ and _ddns_generated_prefix_ fields.
	DdnsHostnameBlock *IpamsvcInheritedDDNSHostnameBlock `json:"ddns_hostname_block,omitempty"`

	// The inheritance configuration for _ddns_send_updates_ and _ddns_domain_ fields.
	DdnsUpdateBlock *IpamsvcInheritedDDNSUpdateBlock `json:"ddns_update_block,omitempty"`

	// The inheritance configuration for _ddns_update_on_renew_ field.
	DdnsUpdateOnRenew *InheritanceInheritedBool `json:"ddns_update_on_renew,omitempty"`

	// The inheritance configuration for _ddns_use_conflict_resolution_ field.
	DdnsUseConflictResolution *InheritanceInheritedBool `json:"ddns_use_conflict_resolution,omitempty"`

	// The inheritance configuration for _dhcp_config_ field.
	DhcpConfig *IpamsvcInheritedDHCPConfig `json:"dhcp_config,omitempty"`

	// The inheritance configuration for _dhcp_options_ field.
	DhcpOptions *IpamsvcInheritedDHCPOptionList `json:"dhcp_options,omitempty"`

	// The inheritance configuration for _header_option_filename_ field.
	HeaderOptionFilename *InheritanceInheritedString `json:"header_option_filename,omitempty"`

	// The inheritance configuration for _header_option_server_address_ field.
	HeaderOptionServerAddress *InheritanceInheritedString `json:"header_option_server_address,omitempty"`

	// The inheritance configuration for _header_option_server_name_ field.
	HeaderOptionServerName *InheritanceInheritedString `json:"header_option_server_name,omitempty"`

	// The inheritance configuration for _hostname_rewrite_enabled_, _hostname_rewrite_regex_, and _hostname_rewrite_char_ fields.
	HostnameRewriteBlock *IpamsvcInheritedHostnameRewriteBlock `json:"hostname_rewrite_block,omitempty"`
}

// Validate validates this ipamsvc d h c p inheritance
func (m *IpamsvcDHCPInheritance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsmConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdnsClientUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdnsEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdnsHostnameBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdnsUpdateBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdnsUpdateOnRenew(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDdnsUseConflictResolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDhcpConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDhcpOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaderOptionFilename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaderOptionServerAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaderOptionServerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostnameRewriteBlock(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcDHCPInheritance) validateAsmConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AsmConfig) { // not required
		return nil
	}

	if m.AsmConfig != nil {
		if err := m.AsmConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asm_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("asm_config")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) validateDdnsClientUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.DdnsClientUpdate) { // not required
		return nil
	}

	if m.DdnsClientUpdate != nil {
		if err := m.DdnsClientUpdate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_client_update")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_client_update")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) validateDdnsEnabled(formats strfmt.Registry) error {
	if swag.IsZero(m.DdnsEnabled) { // not required
		return nil
	}

	if m.DdnsEnabled != nil {
		if err := m.DdnsEnabled.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_enabled")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_enabled")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) validateDdnsHostnameBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.DdnsHostnameBlock) { // not required
		return nil
	}

	if m.DdnsHostnameBlock != nil {
		if err := m.DdnsHostnameBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_hostname_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_hostname_block")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) validateDdnsUpdateBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.DdnsUpdateBlock) { // not required
		return nil
	}

	if m.DdnsUpdateBlock != nil {
		if err := m.DdnsUpdateBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_update_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_update_block")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) validateDdnsUpdateOnRenew(formats strfmt.Registry) error {
	if swag.IsZero(m.DdnsUpdateOnRenew) { // not required
		return nil
	}

	if m.DdnsUpdateOnRenew != nil {
		if err := m.DdnsUpdateOnRenew.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_update_on_renew")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_update_on_renew")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) validateDdnsUseConflictResolution(formats strfmt.Registry) error {
	if swag.IsZero(m.DdnsUseConflictResolution) { // not required
		return nil
	}

	if m.DdnsUseConflictResolution != nil {
		if err := m.DdnsUseConflictResolution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_use_conflict_resolution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_use_conflict_resolution")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) validateDhcpConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.DhcpConfig) { // not required
		return nil
	}

	if m.DhcpConfig != nil {
		if err := m.DhcpConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcp_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcp_config")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) validateDhcpOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.DhcpOptions) { // not required
		return nil
	}

	if m.DhcpOptions != nil {
		if err := m.DhcpOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcp_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcp_options")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) validateHeaderOptionFilename(formats strfmt.Registry) error {
	if swag.IsZero(m.HeaderOptionFilename) { // not required
		return nil
	}

	if m.HeaderOptionFilename != nil {
		if err := m.HeaderOptionFilename.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header_option_filename")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header_option_filename")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) validateHeaderOptionServerAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.HeaderOptionServerAddress) { // not required
		return nil
	}

	if m.HeaderOptionServerAddress != nil {
		if err := m.HeaderOptionServerAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header_option_server_address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header_option_server_address")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) validateHeaderOptionServerName(formats strfmt.Registry) error {
	if swag.IsZero(m.HeaderOptionServerName) { // not required
		return nil
	}

	if m.HeaderOptionServerName != nil {
		if err := m.HeaderOptionServerName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header_option_server_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header_option_server_name")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) validateHostnameRewriteBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.HostnameRewriteBlock) { // not required
		return nil
	}

	if m.HostnameRewriteBlock != nil {
		if err := m.HostnameRewriteBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostname_rewrite_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostname_rewrite_block")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ipamsvc d h c p inheritance based on the context it is used
func (m *IpamsvcDHCPInheritance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAsmConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDdnsClientUpdate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDdnsEnabled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDdnsHostnameBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDdnsUpdateBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDdnsUpdateOnRenew(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDdnsUseConflictResolution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDhcpConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDhcpOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeaderOptionFilename(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeaderOptionServerAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeaderOptionServerName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostnameRewriteBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamsvcDHCPInheritance) contextValidateAsmConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AsmConfig != nil {
		if err := m.AsmConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asm_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("asm_config")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) contextValidateDdnsClientUpdate(ctx context.Context, formats strfmt.Registry) error {

	if m.DdnsClientUpdate != nil {
		if err := m.DdnsClientUpdate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_client_update")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_client_update")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) contextValidateDdnsEnabled(ctx context.Context, formats strfmt.Registry) error {

	if m.DdnsEnabled != nil {
		if err := m.DdnsEnabled.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_enabled")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_enabled")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) contextValidateDdnsHostnameBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.DdnsHostnameBlock != nil {
		if err := m.DdnsHostnameBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_hostname_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_hostname_block")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) contextValidateDdnsUpdateBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.DdnsUpdateBlock != nil {
		if err := m.DdnsUpdateBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_update_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_update_block")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) contextValidateDdnsUpdateOnRenew(ctx context.Context, formats strfmt.Registry) error {

	if m.DdnsUpdateOnRenew != nil {
		if err := m.DdnsUpdateOnRenew.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_update_on_renew")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_update_on_renew")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) contextValidateDdnsUseConflictResolution(ctx context.Context, formats strfmt.Registry) error {

	if m.DdnsUseConflictResolution != nil {
		if err := m.DdnsUseConflictResolution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ddns_use_conflict_resolution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ddns_use_conflict_resolution")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) contextValidateDhcpConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.DhcpConfig != nil {
		if err := m.DhcpConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcp_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcp_config")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) contextValidateDhcpOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.DhcpOptions != nil {
		if err := m.DhcpOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcp_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcp_options")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) contextValidateHeaderOptionFilename(ctx context.Context, formats strfmt.Registry) error {

	if m.HeaderOptionFilename != nil {
		if err := m.HeaderOptionFilename.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header_option_filename")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header_option_filename")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) contextValidateHeaderOptionServerAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.HeaderOptionServerAddress != nil {
		if err := m.HeaderOptionServerAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header_option_server_address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header_option_server_address")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) contextValidateHeaderOptionServerName(ctx context.Context, formats strfmt.Registry) error {

	if m.HeaderOptionServerName != nil {
		if err := m.HeaderOptionServerName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header_option_server_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header_option_server_name")
			}
			return err
		}
	}

	return nil
}

func (m *IpamsvcDHCPInheritance) contextValidateHostnameRewriteBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.HostnameRewriteBlock != nil {
		if err := m.HostnameRewriteBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostname_rewrite_block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostname_rewrite_block")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpamsvcDHCPInheritance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamsvcDHCPInheritance) UnmarshalBinary(b []byte) error {
	var res IpamsvcDHCPInheritance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
