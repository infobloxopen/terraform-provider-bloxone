// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigCopyForwardZone config copy forward zone
//
// swagger:model configCopyForwardZone
type ConfigCopyForwardZone struct {

	// A comment of the (copied) _dns/forward_zone_ object.
	Comment string `json:"comment,omitempty"`

	// Optional. External DNS servers to forward to. Order is not significant.
	ExternalForwarders []*ConfigForwarder `json:"external_forwarders,omitempty"`

	// The resource identifier.
	Hosts []string `json:"hosts,omitempty"`

	// The resource identifier.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The resource identifier.
	InternalForwarders []string `json:"internal_forwarders,omitempty"`

	// The resource identifier.
	Nsgs []string `json:"nsgs,omitempty"`

	// Indicates whether child objects should be copied or not.
	//
	// Defaults to _false_. Reserved for future use.
	Recursive bool `json:"recursive,omitempty"`

	// Indicates whether copying should skip object in case of error and continue with next, or abort copying in case of error.
	//
	// Defaults to _false_.
	SkipOnError bool `json:"skip_on_error,omitempty"`

	// The resource identifier.
	// Required: true
	TargetView *string `json:"target_view,omitempty"`
}

// Validate validates this config copy forward zone
func (m *ConfigCopyForwardZone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExternalForwarders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetView(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigCopyForwardZone) validateExternalForwarders(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalForwarders) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalForwarders); i++ {
		if swag.IsZero(m.ExternalForwarders[i]) { // not required
			continue
		}

		if m.ExternalForwarders[i] != nil {
			if err := m.ExternalForwarders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external_forwarders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("external_forwarders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigCopyForwardZone) validateTargetView(formats strfmt.Registry) error {

	if err := validate.Required("target_view", "body", m.TargetView); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this config copy forward zone based on the context it is used
func (m *ConfigCopyForwardZone) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExternalForwarders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigCopyForwardZone) contextValidateExternalForwarders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalForwarders); i++ {

		if m.ExternalForwarders[i] != nil {
			if err := m.ExternalForwarders[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external_forwarders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("external_forwarders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigCopyForwardZone) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigCopyForwardZone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigCopyForwardZone) UnmarshalBinary(b []byte) error {
	var res ConfigCopyForwardZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
