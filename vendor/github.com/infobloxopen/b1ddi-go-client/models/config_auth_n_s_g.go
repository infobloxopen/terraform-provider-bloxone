// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigAuthNSG AuthNSG
//
// Authoritative DNS Server Group for authoritative zones.
//
// swagger:model configAuthNSG
type ConfigAuthNSG struct {

	// Optional. Comment for the object.
	Comment string `json:"comment,omitempty"`

	// Optional. DNS primaries external to BloxOne DDI. Order is not significant.
	ExternalPrimaries []*ConfigExternalPrimary `json:"external_primaries,omitempty"`

	// DNS secondaries external to BloxOne DDI. Order is not significant.
	ExternalSecondaries []*ConfigExternalSecondary `json:"external_secondaries,omitempty"`

	// The resource identifier.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Optional. BloxOne DDI hosts acting as internal secondaries. Order is not significant.
	InternalSecondaries []*ConfigInternalSecondary `json:"internal_secondaries,omitempty"`

	// Name of the object.
	// Required: true
	Name *string `json:"name,omitempty"`

	// The resource identifier.
	Nsgs []string `json:"nsgs,omitempty"`

	// Tagging specifics.
	Tags interface{} `json:"tags,omitempty"`
}

// Validate validates this config auth n s g
func (m *ConfigAuthNSG) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExternalPrimaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalSecondaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternalSecondaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigAuthNSG) validateExternalPrimaries(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalPrimaries) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalPrimaries); i++ {
		if swag.IsZero(m.ExternalPrimaries[i]) { // not required
			continue
		}

		if m.ExternalPrimaries[i] != nil {
			if err := m.ExternalPrimaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external_primaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("external_primaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigAuthNSG) validateExternalSecondaries(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalSecondaries) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalSecondaries); i++ {
		if swag.IsZero(m.ExternalSecondaries[i]) { // not required
			continue
		}

		if m.ExternalSecondaries[i] != nil {
			if err := m.ExternalSecondaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external_secondaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("external_secondaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigAuthNSG) validateInternalSecondaries(formats strfmt.Registry) error {
	if swag.IsZero(m.InternalSecondaries) { // not required
		return nil
	}

	for i := 0; i < len(m.InternalSecondaries); i++ {
		if swag.IsZero(m.InternalSecondaries[i]) { // not required
			continue
		}

		if m.InternalSecondaries[i] != nil {
			if err := m.InternalSecondaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("internal_secondaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("internal_secondaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigAuthNSG) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this config auth n s g based on the context it is used
func (m *ConfigAuthNSG) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExternalPrimaries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalSecondaries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInternalSecondaries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigAuthNSG) contextValidateExternalPrimaries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalPrimaries); i++ {

		if m.ExternalPrimaries[i] != nil {
			if err := m.ExternalPrimaries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external_primaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("external_primaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigAuthNSG) contextValidateExternalSecondaries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalSecondaries); i++ {

		if m.ExternalSecondaries[i] != nil {
			if err := m.ExternalSecondaries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("external_secondaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("external_secondaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigAuthNSG) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ConfigAuthNSG) contextValidateInternalSecondaries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InternalSecondaries); i++ {

		if m.InternalSecondaries[i] != nil {
			if err := m.InternalSecondaries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("internal_secondaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("internal_secondaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigAuthNSG) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigAuthNSG) UnmarshalBinary(b []byte) error {
	var res ConfigAuthNSG
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
